<?php
set_time_limit(0);
require_once 'config.php';
require_once 'queries.php';
require_once 'Slim/Slim.php';
require_once 'functions.php';
require_once('tcpdf_min/tcpdf.php');
require_once('../zoho_crm/functions.php');
checkSession();

$app = new Slim();

$app->config('debug', DEBUG);
$app->error(function (\Exception $e) use ($app) {
    errorLog($e);
});
getLastLogin();
$app->get('/setsess', 'setSession');
$app->get('/getsess', 'getSession');
$app->get('/update_existing_file_size','updateExistingFileSize');
$app->get('/hello', 'sayHello');
$app->post('/user_login', 'chkUser');
$app->post('/forgot_password', 'forgotPassword');
$app->post('/update_password', 'resetPassword');
$app->post('/user_logout', 'logoutUser');
$app->post('/get_cats_list', 'getCategoryList');
$app->post('/get_video', 'getVideo');
$app->post('/get_video_ranking','getVideoRanking');
$app->get('/download_creative_video','downloadCreativeVideo');
$app->post('/check_video_downloads_count','checkVideoDownloadsCount');
$app->get('/update_creative_thumbnails', 'updateCreativeThumbnails');
$app->get('/update_thumb', 'updateThumb');
$app->get('/last_media_week','LastMediaWeek');
$app->get('/get_summary_log','getSummaryToggle');
$app->get('/current_week','CurrentWeek');
$app->get('/last_media_month','LastMediaMonth');
$app->get('/current_media_month','CurrentMediaMonth');
$app->post('/last_media_quarter','LastMediaQuarter');
$app->post('/current_media_quarter','CurrentMediaQuarter');
$app->post('/last_media_year','LastMediaYear');
$app->post('/update_summary_log','UpdateSummaryLog');
$app->get('/ranking_report','RankingReportWithNetwork');
$app->get('/weekly_retail_report_short_form', 'WeeklyRatailReportShortForm');
$app->get('/week_report_short_form_brand', 'WeekReportShortFormBrand');
$app->get('/week_report_long_form_brand', 'WeekReportLongFormBrand');
$app->get('/week_report_short_form_adv', 'WeekReportShortFormAdv');
$app->get('/week_report_long_form_adv', 'WeekReportLongFormAdv');
$app->get('/daily_creative_status_update','DailyCreativeStatusUpdate');
$app->post('/connect_to_authy','ConnectToAuthy');
$app->post('/add_to_db','AddToDb');
$app->post('/verify_authy','VerifyAuthy');
$app->post('/get_authy_id','getAuthyId');
$app->post('/filter_results','filterResults');
$app->post('/apply_refine_filters','applyRefineFilters');
$app->post('/view_airings_layout_tfn','viewAiringsLayoutTfn');
$app->post('/export_to_excel','exportToExcel');
$app->get('/export_results','exportResults');
$app->post('/export_results','exportResults');
$app->post('/check_ip','checkIP');
$app->post('/save_company','saveCompany');
$app->post('/create_sync_new_account','createSyncNewAccount');
$app->post('/update_account','updateAccount');
$app->post('/show_admins','showAdmins');
$app->post('/check_mobile','checkMobile');
$app->post('/check_email','checkEmail');
$app->post('/deactivate_user','deactivateUser');
$app->post('/get_users_of_company','getUsersOfCompany');
$app->post('/delete_user_from_company','deleteUserFromCompany');
$app->post('/delete_company','deleteCompany');
$app->post('/change_admin','changeAdmin');
$app->post('/deactivate_user_from_company','deactivateUserFromCompany');
$app->post('/get_company','getCompany');
$app->post('/edit_company','editCompany');
$app->post('/new_account_email','newAccountEmail');
$app->get('/company_export','companyExport');
$app->post('/show_users','showUsers');
$app->post('/show_active_shared_users','showActiveSharedUsers');
$app->post('/get_authy_countries','getAuthyContries');
$app->post('/save_user','saveUser');
$app->post('/update_user','updateUser');
$app->post('/update_config','updateConfig');
$app->post('/get_user','getUser');
$app->post('/get_user_edit','getUserEdit');
$app->post('/edit_user','editUser');
$app->get('/user_export','userExport');
$app->post('/show_tiers','showTiers');
$app->post('/contact_us','contactUs');
$app->get('/add_thumb','addThumb');
$app->get('/update_thumb_db','updateThumbDb');
$app->post('/adv_brand','advBrandsList');
$app->post('/brand_creatives', 'brandCreatives');
$app->post('/brand_networks', 'brandNetworks');
$app->post('/creatives_networks','creativesNetworks');
$app->post('/get_creatives_daypart','getCreativesDaypart');
$app->post('/get_creatives_daytime1','getCreativesDaytime');
$app->post('/get_airings_daytime','getAiringsDaytime');
$app->post('/display_information','displayInformation');
$app->post('/get_spend_graph2','getSpendGraph2');
$app->post('/get_graph_data','getGraphData');
$app->post('/display_timing_data','displayTimingData');
$app->post('/display_timing_data_long_form','displayTimingDataLongForm');
$app->post('/display_categories','displayCategories');
$app->post('/display_filters','displayFilters');
$app->post('/get_last_login','getLastLogin');
$app->get('/create_network_pdf','createNetworkPdf');
$app->post('/regenerate_password', 'regeneratePassword');
$app->get('/user_access_info', 'userAccessInfo');
$app->post('/get_advertiser_detail', 'getAdvertiserDetail');

/**Start -- Airings at brand & creative level**/
$app->post('/get_networks_airings_graph', 'getNetworksAiringsGraph');
$app->post('/get_networks_spend_index_graph', 'getNetworksSpendIndexGraph');
$app->post('/get_networks_airings_dayparts', 'getNetworksAiringsDayparts');
$app->post('/get_networks_airings_trend_graph', 'getNetworksAiringsTrendGraph');
/**End -- Airings at brand & creative level**/

$app->post('/get_networks_list', 'getNetworksList');
$app->post('/get_networks_list_filter', 'getNetworksListWithFilters');
$app->post('/get_creative_networks_list', 'getCreativeNetworksList');
$app->post('/brand_creative_networks', 'brandCreativeNetworks');
$app->post('/detail_export_report', 'detailExportReport');
$app->post('/excel_video', 'excelVideo');

$app->get('/cron_download_excel_files', 'cronDownloadExcelFiles');
//$app->post('/excel_report_grid_list', 'excelReportGirdList');
$app->post('/excel_report_grid_list', 'excelReportGirdListNew');
$app->post('/excel_report_grid_network_list','excelReportNetworkGridList');
$app->post('/get_my_reports_data', 'getMyReportsData');
$app->post('/get_all_report_data', 'getAllReportsData');
$app->post('/get_all_filter_data', 'getAllFiltersData');
$app->post('/save_inline_edit_report_data', 'saveInlineEditReportData');
$app->post('/save_edit_filter_data', 'saveFilterReportData');
$app->post('/delete_excel_row', 'deleteExcelRow');
$app->post('/get_inprogress_data', 'get_inprogress_data');
$app->post('/update_email_alerts', 'updateEmailAlerts');
$app->post('/update_share_report', 'updateShareReport');
$app->post('/update_share_filter', 'updateShareFilter');
$app->post('/update_schedule_email', 'updateScheduleEmail');
$app->post('/copy_share_report', 'copyShareReport');
$app->post('/copy_share_filter', 'copyShareFilter');
$app->post('/enable_disable_excel_popup', 'enableDisableExcelPopup');
$app->get('/downloadClientFiles', 'downloadClientFiles');
$app->post('/check_ask_alert_opt', 'CheckAskAlertOpt');
$app->post('/display_categories_for_creative', 'displayCategoriesForCreative');
$app->post('/update_ask_alt', 'updateAskAlt');
$app->post('/eula_check_updated', 'eulaCheckUpdate');
$app->post('/eula_override', 'eulaOverride');
$app->post('/get_networks_with_all_filters','getNetworksWithAllFilters');
$app->post('/get_revenue','getRevenue');
$app->post('/display_airings_brands_with_networks','displayAiringsBrandsWithNetworks');
$app->post('/get_all_active_networks','getAllActiveNetworks');
$app->post('/getCreativesForNetworks','getCreativesForNetworks');
$app->post('/network_excel_export','networkExcelExport');
$app->post('/manage_network_tab','manageNetworkTab');
$app->post('/manage_skip_authy','manageSkipAuthy');
$app->post('/manage_staging_access','manageStagingAccess');
$app->post('/get_account_owner','getAccountOwner');
$app->post('/save_user_filter','saveUserFilter');
$app->post('/fetch_selected_filter','fetchSelectedFilter');
$app->post('/get_user_filter_list','getUserFilterList');
$app->post('/delete_filter_row', 'deleteFilterRow');
$app->post('/get_advpage_brands', 'getAdvpageBrands');
$app->post('/adv_page_creatives', 'advpageCreatives');
$app->post('/get_brand_adv_creative_search_list', 'getBrandAdvCreativeSearchList');
$app->post('/get_global_search_data', 'getGlobalSearchData');
$app->post('/send_global_search_feedback', 'sendGlobalSearchFeedback');
$app->post('/send_validate_info_feedback', 'sendValidateInfoFeedback');
//---Tracking & ALerts-- Start-//
$app->post('/get_alerts_list','getAlertsList');
$app->post('/get_tracking_detail', 'getTrackingDetail');
$app->post('/set_tracking_detail', 'setTrackingDetail');
$app->post('/set_cat_tracking_detail', 'setCategoryTrackingDetail');
$app->post('/update_tracking_status', 'updateTrackingStatus');
$app->post('/delete_tracking_details', 'deleteTrackingDetails');
$app->post('/get_categorylist_with_categorytracking', 'getCategorylistWithCategorytracking');
$app->post('/unsubscribe_user', 'unsubscribeUser');
$app->post('/get_network_tracking_status', 'getNetworkTrackingStatus');
$app->post('/update_subscribe_status', 'updateSubscribeStatus');
$app->post('/delete_tracking_alerts','deleteTrackingAlerts');
//---End-------//
$app->post('/brand_export_from_grid','brandExportFromGrid');
$app->post('/behind_commercial_feedback', 'behindCommercialFeedback');
$app->post('/get_week_data_network_log','getWeekDataNetworkLog');
$app->post('/get_network_log_data','getNetworkLogData');
$app->post('/get_programs_by_network','getProgramViewByNetwork');
$app->post('/export_network_log','exportNetworkLog');
$app->get('/get_all_media_data','getAllMediaData');
$app->post('/get_all_active_inactive_networks','getAllActiveInactiveNetworks');
$app->post('/network_list_export_from_grid','networkListExportFromGrid');
$app->get('/network_list_export_from_grid','networkListExportFromGrid');
$app->post('/network_list_export_from_grid_wrapper','networkListExportFromGridWrapper');
$app->post('/network_ranking_excel','networkRankingExcel');
$app->post('/networks_ranking_export','networkRankingExport');
$app->get('/networks_ranking_export','networkRankingExport');
$app->post('/creative_network_list_export_from_grid','creativeNetworkListExportFromGrid');
$app->post('/fetch_last_exported_id','fetchLastExportedId');
$app->post('/update_excel_export_filename','updateExcelExportFilename');
$app->post('/get_company_owners','getCompanyOwners');
$app->post('/export_refine_log_wrapper','exportRefineLogWrapper');
$app->post('/export_refine_log','exportRefineLog');
$app->get('/export_refine_log','exportRefineLog');
$app->post('/export_program_view','exportProgramView');
$app->post('/refine_excel_export','refineExcelExport');
$app->post('/get_programs_of_network','getProgramsOfNetwork');
$app->post('/networks_excel','networksExcel');
$app->post('/submit_user_rate_feedback','submitUserRateFeedback');
/****Start - List related API */
$app->post('/save_user_list','saveUserList');
$app->post('/get_all_list_data', 'getAllListData');
$app->post('/get_user_lists', 'getUserLists');
$app->post('/get_all_brands_advertisers', 'getAllBrandsAdvertisers');
$app->post('/update_edited_list', 'updateEditedList');
$app->post('/update_share_list', 'updateShareList');
$app->post('/delete_list_row', 'deleteListRow');
$app->post('/copy_share_list', 'copyShareList');
$app->post('/save_edit_list_data', 'saveListData');
$app->run();


function displayCategories(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = json_decode($query_string);

    $requestData = $raw_data = array();
     foreach($set_one as $k =>$v){
        $requestData[$k] = $v;
    }
    $id     = $requestData['id'];
    $tab    = $requestData['tab'];
    $unchecked_category = isset($requestData['unchecked_category']) ? urldecode($requestData['unchecked_category']) : '';
    $subCategory = $unchecked_category;
    $subCategoryArray = explode(",",$subCategory);

    $where = ($tab == 0) ? $id : '(SELECT brand_id FROM brand WHERE adv_id = '.$id.')';
    
    $db     = getConnection();
    
    if(!in_array($id, $subCategoryArray)) {

    } else {

    }
    $sql    = sprintf(_SQL_DISPLAY_CATEGORIES,$id);
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    if(in_array($result[0]->sub_category_id, $subCategoryArray ) && $requestData['is_adv_page'] != 1) {
        if(count($result) > 1)  {  swap($result[0], $result[1]); }
    }
    /*
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);   
    */
    echo json_encode(array('status'=> 1,'result'=>$result)); 
}

function displayFilters(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
     foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $id     = $requestData['id'];
    $daysOfWeek = array('1' => 'Monday','2' => 'Tuesday', '3' => 'Wednesday', '4'=> 'Thursday' , '5'=> 'Friday', '6'=>'Saturday' ,'7' => 'Sunday');

    $hourOfday = array( '0' => '12 A',
                    '1' => '1 A',
                    '2' => '2 A',
                    '3' => '3 A' ,
                    '4' => '4 A',
                    '5' => '5 A',
                    '6' => '6 A',
                    '7' => '7 A',
                    '8' => '8 A',
                    '9' => '9 A',
                    '10' => '10 A',
                    '11' => '11 A',
                    '12' => '12 P',
                    '13' => '1 P',
                    '14' => '2 P',
                    '15' => '3 P',
                    '16' => '4 P',
                    '17' => '5 P',
                    '18' => '6 P',
                    '19' => '7 P',
                    '20' => '8 P',
                    '21' => '9 P',
                    '22' => '10 P',
                    '23' => '11 P'
                );
    $db     = getConnection();
    $sql    = sprintf(_SQL_DISPLAY_FILTERS,$id);
    
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ); 
    */
    
    foreach($result  as $key => $value){
        $value->response_type_text = str_replace(
            array("response_"," or ","=1","= 0","=0","url","sms","tfn","mar"),
            array("", ",","","","","URL","Telephone","SMS","Mobile App Response"),
            $value->response_type
        );
        
        $find_dow       = array_keys($daysOfWeek);
        $replace_dow    = array_values($daysOfWeek);
        $new_dow        = str_ireplace($find_dow, $replace_dow, $value->dow);
        
        $value->dow     = $new_dow;
        
        $find_hod       = array_keys($hourOfday);
        $replace_hod    = array_values($hourOfday);
        $new_hod        = str_ireplace($find_hod, $replace_hod, $value->hod);
        
        $value->hod     = $new_hod;
    }
    
    echo json_encode(array('status'=> 1,'result'=>$result)); 
}

function displayInformation(){
    $db = getConnection();
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
   
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
   
    $val            = $requestData['val'];
    $creativeId     = $requestData['creative_id'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $network_id     = $requestData['network_id'];
    $records = array();
   
    $id = $requestData['tab'] == 'brand' ? 'b.brand_id' : 'b.adv_id';
    $nw_code = urldecode(addslashes($requestData['code']));
    $spanish = urldecode($requestData['spanish']);
    
    if($creativeId != ''){
        $params['spanish']      = $spanish;
        $params['creative_id']  = $requestData['creative_id'];
        
        $result                 = get_query_result('__query_get_creative_details', $params, 'FETCH_OBJ');
    
        foreach($result as $c1 => $c2){
               if($c2->length > LENGTH){
                   $c2->duration = number_format(($c2->length/60),1).' m';
               }else{
                   $c2->duration = $c2->length.' sec'; 
               }
        }
    }else{
        $params['spanish']      = $spanish;
        $params['start_date']   = $sd;
        $params['end_date']     = $ed;
        $params['nw_code']      = $nw_code;
        $params['nw_id']        = $network_id;
        $params['brand_id']     = $requestData['brand_id'];
       
        $result             = get_query_result('__query_get_network_details', $params, 'FETCH_OBJ');
    }
   echo json_encode(array('status'=> 1,'result'=>$result)); 
}


function createNetworkPdf(){
    $listNetworks = getNetworksWithLastAired();
    $html = createHtmlTable($listNetworks);
    renderPdf($html);
}

function getNetworksWithLastAired(){
    $db = getConnection();
    $sql = __query_networks_with_live_date();
    $obj = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $obj = $stmt->fetchAll(PDO::FETCH_ASSOC);
    */
    return $obj;
}

function createHtmlTable($listNetworks){
  
    $table_head = '<thead><tr><th style="text-align: left; color: #1e487c; font-family: sans-serif; font-size: 14px; font-weight: bold;">Network</th><th style="text-align: right; font-size: 14px; color: #1e487c; font-weight: boldweight; font-family: sans-serif;">On Air</th></tr><tr style="height: 1px;"><th colspan="2"><hr style="width: 100%; font-weight: normal; color: #1e487c;"/></th></tr></thead>';

    $header     = '<table style="width: 100%; margin: 0 auto; line-height: 1.5;"><tr><td style="width:50%;"><table style="width:100%;">'.$table_head.'</table></td><td style="width:50%;"><table style="width:100%;">'.$table_head.'</table></td></tr></table>';
    $single_hrd = '<table style="width: 100%; margin: 0 auto; line-height: 1.5;"><tr><td style="width:50%;"><table style="width:100%;">'.$table_head.'</table></td><td style="width:50%;"><table style="width:100%;"></table></td></tr></table>';


    $no_of_rows     = 40;
    $no_of_columns  = 2;
    $total_networks = count($listNetworks);
    $total_tds      = ceil($total_networks / $no_of_rows);
    $count = 0;

    for ($i=0; $i < $total_tds; $i++) {
        $tr[$i] = '';
    }

    $row = -1;
    foreach($listNetworks as $network_key => $network_value){
      //  $new_live_date      = date("n/j/Y", strtotime($network_value['live_date']));
      $new_live_date      = date("m/d/Y", strtotime($network_value['live_date']));
        $row                = $row + 1;
        $td                 = floor($row / $no_of_rows);
        $dpi_img            = '';
        $live_date          = $network_value['live_date'];
        $current_date       = date('Y-m-d');
        $days_difference    = dateDiff($live_date, $current_date);

        if ($days_difference <= 180) {
            $new_image = ' <img width="15px" src="http://'.HOST.'/drmetrix/assets/img/new.svg" />';
        } else {
            $new_image = '';
        }
        
        if($network_value['dpi'])
                $dpi_img = ' <img width="20px" src="http://'.HOST.'/drmetrix/assets/img/dpi_img.svg" />';

        $tr[$td] .= '<tr><td style="width:75%; text-align: left; font-size: 12px; font-weight: normal;">'.$network_value['network_alias'].$new_image.$dpi_img.'</td><td style="width:25%; text-align: right; font-size: 12px; font-weight: normal;">'.$new_live_date.'</td></tr>';    
    }

    for ($i = 0; $i <= $total_tds; $i = $i+2) {
        if (!isset($tr[$i])) {
            $tr[$i] = '';
        }
        if (!isset($tr[$i+1])) {
            $tr[$i+1] = '';
        }

        if (empty($tr[$i]) && empty($tr[$i+1])) {

        } elseif (empty($tr[$i+1])) {
            $html[]  = $single_hrd . '<table style="width: 100%; margin: 0 auto; line-height: 1.5;"><tr><td style="width:50%;"><table style="width:100%;">'.$tr[$i].'</table></td><td style="width:50%;"><table style="width:100%;">'.$tr[$i+1].'</table></td></tr></table>';                
        } else {
            $html[]  = $header . '<table style="width: 100%; margin: 0 auto; line-height: 1.5;"><tr><td style="width:50%;"><table style="width:100%;">'.$tr[$i].'</table></td><td style="width:50%;"><table style="width:100%;">'.$tr[$i+1].'</table></td></tr></table>';                
        }
    }

    //echo '<pre>'.print_r($html); echo '</pre>';    exit;
    return $html;
}

function renderPdf($html){
    $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

    // set document information
    $pdf->SetCreator(PDF_CREATOR);
    $pdf->SetTitle('AdSphere Networks');

    // remove default header/footer
    $pdf->setPrintHeader(false);
    $pdf->setPrintFooter(false);

    // set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

    // set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);


    // set font
    // $pdf->SetFont('times', 'BI', 20);

    // add a page
    $i = 0;
    foreach ($html as $key => $value) {
        if ($i == 0) {
            $value = '<table cellspacing="0" cellpadding="0" align="right" border="0" style="text-align: right; font-size: 10px; font-weight: normal;"><tr><td></td><td>New Network <img width="10px" src="http://'.HOST.'/drmetrix/assets/img/new.svg" /> | <a href="https://www.drmetrix.com/en/the_drmetrix_difference.html" style="color:black" title="Learn about DPi">Learn about DPi </a><img width="20px" src="http://'.HOST.'/drmetrix/assets/img/dpi_img.svg" /> </td></tr><tr><td></td><td></td></tr></table>'.$value;
            $i = $i + 1;
        }
        $pdf->AddPage();
        $pdf->writeHTML($value, true, 0, true, 0);
    }
    $pdf->Output('AdSphereNetworks.pdf','D');
    exit;
}

function displayTimingDataLongForm(){
    $data = $result = array();
    $nestedData=array();   
    $requestData = $raw_data = array();
    $hoz_arr = array();
    $hor_arr_12 = $horz_new_arr =  $new_arr = $new_arr_time = array();
    $dayOFWeek = array('Monday'=>'Mon','Tuesday'=>'Tue','Wednesday'=>'Wed','Thursday'=>'Thu','Friday'=>'Fri','Saturday'=>'Sat','Sunday'=>'Sun','total'=>'total');
   
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $val            = $requestData['val'];
    $tab            = $requestData['tab'];
    $classification = urldecode($requestData['c']);
    $nw_code        = urldecode(addslashes($requestData['code']));
    $network_id     = $requestData['network_id'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $responseType   = urldecode($requestData['responseType']);
    $spanish        = urldecode($requestData['spanish']);
    $creative_id    = $requestData['creative_id'];
    $brand_id       = $requestData['brand_id'];
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $where_category = '';
    $export_order_by = '  start_time';
    $creative_durations         = urldecode($requestData['creative_duration']);
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    
    $date_filters   = dateFilterConditions($val,$sd,$ed);
//    $conditions     = getFilterConditions($tab,$classification);
    $brand_classification  = getBrandClassification($classification,$creative_durations);
    
     if($tab == 'brand'){
        $tab = 1;
    }else{
        $tab = 0;
    }
    
    if(!empty($cat)){
        $category= categorySqlCallForCreative($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 
    
    //find airings
  
    $params_airings['responseType']                        = $responseType;
    $params_airings['spanish']                             = $spanish;
    $params_airings['where_category']                      = $where_category;
    $params_airings['start_date']                          = $sd;
    $params_airings['end_date']                            = $ed;
    $params_airings['breaktype']                           = 'N';
    $params_airings['classification']                      = $classification;
    $params_airings['creative_id']                         = $creative_id;
    $params_airings['brand_id']                            = $brand_id;
//    $params_airings['cr_type']                             = $conditions['cr_type'];
    $params_airings['nw_code']                             = $nw_code;
    $params_airings['network_id']                          = $network_id;
    $params_airings['export_order_by']                     = $export_order_by;
    $params_airings['new_filter_opt']                       = $new_filter_opt;
    $params_airings['brand_classification']                = $brand_classification['brand_classification'];
    $params_airings['program_ids']                         = $program_ids;
    
    $airings_result  = get_query_result('__query_get_airings', $params_airings, 'FETCH_OBJ');

    $time = array('total');
    
    foreach($airings_result as $key => $value){
        array_push($time,$value->start_time);
    }
    $tot_spend = 0;
    foreach($airings_result as $a1 => $a2){
        foreach($dayOFWeek as $d1 => $d2){
           if($d2 == $a2->short_day){
                  $cnt = 1;
                  $tot_spend = $tot_spend + $a2->total_spend;
                  //$t = isset($hoz_arr['time'][$a2->start_time][$d2][$a1]) ? $hoz_arr['time'][$a2->start_time][$d2][$a1] : 0;
                $t_airings = isset($hoz_arr['time'][$a2->start_time][$d2]['airings'][$a1]) ? $hoz_arr['time'][$h2][$d2]['airings'][$a1] : 0;
                $t_spend = isset($hoz_arr['time'][$a2->start_time][$d2]['spend'][$a1]) ? $hoz_arr['time'][$h2][$d2]['spend'][$a1] : 0;
            
                $hoz_arr['time'][$a2->start_time][$d2]['airings'][$a1] = $t_airings + $cnt;
                $hoz_arr['time'][$a2->start_time][$d2]['spend'][$a1] = $t_spend +intVal(number_format($a2->total_spend, 0 , ',',''));
           }else{
                $hoz_arr['time'][$a2->start_time][$d2]['airings'][$a1] = 0;
                $hoz_arr['time'][$a2->start_time][$d2]['spend'][$a1] = 0;
           }
        }
    }
  
    $horz_new_arr = $hoz_arr;
    if(!empty($hoz_arr)){
        foreach($horz_new_arr['time'] as $g1 => $g2){
            $week_arr = array_keys($g2);
            foreach($week_arr as $w1 => $w2 ){
                //$new_arr['time'][$g1][$w2] = array_sum($hoz_arr['time'][$g1][$w2]) ? array_sum($hoz_arr['time'][$g1][$w2]) : '';
                $new_arr['time'][$g1][$w2]['airings'] = array_sum($hoz_arr['time'][$g1][$w2]['airings']) ? array_sum($hoz_arr['time'][$g1][$w2]['airings']) : 0;
                $new_arr['time'][$g1][$w2]['spend'] = array_sum($hoz_arr['time'][$g1][$w2]['spend']) ? array_sum($hoz_arr['time'][$g1][$w2]['spend']) : 0;
            }
        }
        $hoz_arr = $new_arr;
        foreach($hoz_arr['time'] as $t1 => $t2){
            $total = $total_spend = 0;
            foreach($t2 as $v1 => $v2){
                $v2_airings = is_numeric($v2['airings']) ? $v2['airings'] : 0;
                $v2_spend   = is_numeric($v2['spend']) ? $v2['spend'] : 0;
                // $total = $total + $v2;
                // $total = $total == 0 ? '' :  $total;
                // $hoz_arr['time'][$t1]['total'] = $total;

                $total = $total + $v2_airings ;
                $total = $total == 0 ? 0 :  $total;
                $total_spend = $total_spend + $v2_spend;
                $total_spend = $total_spend == 0 ? 0 :  $total_spend;
                $hoz_arr['time'][$t1]['total']['airings'] = $total;
                $hoz_arr['time'][$t1]['total']['spend'] = $total_spend;
            }
        }
       
       foreach($hoz_arr['time'] as $t1 => $t2){
           $key = date('g:i A', strtotime($t1));
           foreach($dayOFWeek as $d1 => $d2){
               if(array_key_exists($d2, $t2)){
                    $hor_arr_12[$key][$d2]['airings'] =  isset($t2[$d2]['airings']) ? $t2[$d2]['airings'] : 0;
                    $hor_arr_12[$key][$d2]['spend'] =  isset($t2[$d2]['spend']) ? $t2[$d2]['spend'] : 0;
                //$hor_arr_12[$key][$d2] =  isset($t2[$d2]) ? $t2[$d2] : '';
               }else{
                     $hor_arr_12[$key][$d2]['airings'] = 0;
                     $hor_arr_12[$key][$d2]['spend'] = 0;
               }
           }
        }
        foreach($dayOFWeek as $d1 => $d2){
            $cnt = 1;
            foreach($hor_arr_12 as $t1 => $t2){
                foreach($t2 as $day1 => $day2){
                    if($d2 == $day1){
                       // $new_arr_time['total'][$d2] =  isset($new_arr_time['total'][$d2]) ? $t2[$d2]+$new_arr_time['total'][$d2] :  $hor_arr_12[$t1][$day1];
                        $new_arr_time['total']['airings'][$d2] =  isset($new_arr_time['total']['airings'][$d2]) ? $t2[$d2]['airings']+$new_arr_time['total']['airings'][$d2] :  $hor_arr_12[$t1][$day1]['airings'];
                        $new_arr_time['total']['spend'][$d2] =  isset($new_arr_time['total']['spend'][$d2]) ? $t2[$d2]['spend']+$new_arr_time['total']['spend'][$d2] :  $hor_arr_12[$t1][$day1]['spend'];
                    }
               }
            }   
        }
        $tot_spend = number_format($tot_spend , 0);
        echo json_encode(array('status'=> 1,'total'=>$new_arr_time['total']['airings'],'total_spend'=>$tot_spend,'result'=>$hor_arr_12,'horz_total'=>$new_arr_time, 'week_head'=>$dayOFWeek));
    } else {
        echo json_encode(array('status'=> 1,'result'=>$hor_arr_12,'horz_total'=>$new_arr_time, 'week_head'=>$dayOFWeek));
    }
}

function displayTimingData(){
    ini_set('memory_limit','2048M');
    $data = $result = array();
    $nestedData=array();
    $requestData = $raw_data = array();
    $hoz_arr = array();
    $hor_arr_12 = $horz_new_arr =  $new_arr = $new_arr_time = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $color          = $requestData['dp_color'];
    $classification = urldecode($requestData['c']);
    $tab            = $requestData['tab'];
    $day_short      = $requestData['day_short'];
    $responseType   = urldecode($requestData['responseType']);
    $spanish        = urldecode($requestData['spanish']);
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $val            = $requestData['val'];
    $nw_code        = urldecode(addslashes($requestData['code']));
    $network_id     = $requestData['network_id'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $creative_id    = $requestData['creative_id'];
    $brand_id       = $requestData['brand_id'];
    $export_order_by = ' c.creative_name';
    $creative_durations         = urldecode($requestData['creative_duration']);
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $checked_trend  = $requestData['checked_trend'];

    $where_category = '';
    if(!empty($cat)){
        $category= categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 

    if($color == '%23cd3b36'){
        $breaktype = 'N';
    }else{
        $breaktype = 'D';
    }
    
    if($tab == 'brand'){
        $tab = 1;
    }else{
        $tab = 0;
    }
    
    $date_filters   = dateFilterConditions($val,$sd,$ed);
//    $conditions     = getFilterConditions($tab,$classification);
   $brand_classification  = getBrandClassification($classification,$creative_durations);
   
    $airing_where = "start >= '".$sd." 00:00:00' AND start <= '".$ed." 23:59:59'";
    $time_arr = explode("-",$requestData['dp_time']);
   
    $d0 = str_replace("%3A",":",$time_arr[0]);
    $d01 = str_replace("+"," ",$d0);
 
    $d1 = str_replace("%3A",":",$time_arr[1]);
    $d11 = str_replace("+"," ",$d1);

    $d01_24 = date("H:i", strtotime($d01));
    $d11_24 = date("H:i", strtotime($d11));
  
    $timeSlot1 = strtotime($d01_24);
    $timeSlotn = strtotime($d11_24);
    $horz = array($d01_24);
    $i = 0;

    //PM to AM
    if($timeSlot1 >= $timeSlotn){
        while($timeSlot1 >= $timeSlotn){
            $timeSlot1 = ( $timeSlot1 + 1800);
            $timeSlot = date("H:i", $timeSlot1);
            array_push($horz, $timeSlot);
            $timeSlot_time = (strtotime($timeSlot));
            $i++;
            if($timeSlot_time == $timeSlotn){break;};
        }
    }else{
         while($timeSlot1 <= $timeSlotn){
            $timeSlot1 = ( $timeSlot1 + 1800);
            $timeSlot = date("H:i", $timeSlot1);
            array_push($horz, $timeSlot);
            $i++;
           if($timeSlot1 == $timeSlotn){break;};
        }
   }
   
    $start_time = date("H:i:s", strtotime($d01));
    $end_time = date("H:i:s", strtotime($d11));
   
     //find airings
     $params_airings['responseType']                        = $responseType;
     $params_airings['spanish']                             = $spanish;
     $params_airings['where_category']                      = $where_category;
     $params_airings['start_date']                          = $sd;
     $params_airings['end_date']                            = $ed;
     $params_airings['start_time']                          = $start_time;
     $params_airings['end_time']                            = $end_time;
     $params_airings['breaktype']                           = $breaktype;
     $params_airings['classification']                      = $classification;
     $params_airings['creative_id']                         = $creative_id;
     $params_airings['brand_id']                            = $brand_id;
//     $params_airings['cr_type']                             = $conditions['cr_type'];
     $params_airings['nw_code']                             = $nw_code;
     $params_airings['network_id']                          = $network_id;
     $params_airings['day_short']                           = $day_short;
     $params_airings['export_order_by']                     = $export_order_by;
     $params_airings['brand_classification']                = $brand_classification['brand_classification'];
     $params_airings['new_filter_opt']                      = $new_filter_opt;
     
    $airings_result  = get_query_result('__query_get_airings', $params_airings, 'FETCH_OBJ');
    $dayOFWeek =  getDayPartArray($day_short); 
  $tot_spend = 0;
    foreach($horz as $h1 => $h2){
        foreach($dayOFWeek as $d1 => $d2){
            foreach($airings_result as $a1 => $a2){
                  if(isset($horz[$h1+1])){
                    if($horz[$h1+1] == '00:00'){ $horz[$h1+1] = '24:00';}
                    if(($a2->start_time >= $h2) && ($a2->start_time < $horz[$h1+1]) && $d1 == $a2->dow){
                           $cnt = 1;
                           $tot_spend = $tot_spend + $a2->total_spend;
                         //  $t = isset($hoz_arr['time'][$h2][$d2][$a1]) ? $hoz_arr['time'][$h2][$d2][$a1] : 0;
                           $t_airings = isset($hoz_arr['time'][$h2][$d2]['airings'][$a1]) ? $hoz_arr['time'][$h2][$d2]['airings'][$a1] : 0;
                           $t_spend = isset($hoz_arr['time'][$h2][$d2]['spend'][$a1]) ? $hoz_arr['time'][$h2][$d2]['spend'][$a1] : 0;
                        //   $hoz_arr['time'][$h2][$d2][$a1] = $t + $cnt;
                           $hoz_arr['time'][$h2][$d2]['airings'][$a1] = $t_airings + $cnt;
                           $hoz_arr['time'][$h2][$d2]['spend'][$a1] = $t_spend +  intVal(number_format($a2->total_spend, 0 , ',',''));

                   }else{
                        //    $hoz_arr['time'][$h2][$d2][$a1] = '';
                            $hoz_arr['time'][$h2][$d2]['airings'][$a1] = 0;
                            $hoz_arr['time'][$h2][$d2]['spend'][$a1] = 0;
                    }
                  }else{
                       $end = date("H:i", $timeSlotn);
                     //  $hoz_arr['time'][$end][$d2][$a1] = '';
                       $hoz_arr['time'][$end][$d2]['airings'][$a1] = 0;
                       $hoz_arr['time'][$h2][$d2]['spend'][$a1] = 0;
                  }
            }
        }
     }
    
     $horz_new_arr = $hoz_arr;

    if(!empty($hoz_arr)){
        foreach($horz_new_arr['time'] as $g1 => $g2){
            $week_arr = array_keys($g2);
            foreach($week_arr as $w1 => $w2 ){
              $new_arr['time'][$g1][$w2]['airings'] = array_sum($hoz_arr['time'][$g1][$w2]['airings']) ? array_sum($hoz_arr['time'][$g1][$w2]['airings']) : 0;
              $new_arr['time'][$g1][$w2]['spend'] = array_sum($hoz_arr['time'][$g1][$w2]['spend']) ? array_sum($hoz_arr['time'][$g1][$w2]['spend']) :0;
            }
        }
      
        $hoz_arr = $new_arr;
        foreach($hoz_arr['time'] as $t1 => $t2){
            $total = $total_spend=  0;
            foreach($t2 as $v1 => $v2){
                $total = intVal($total) + $v2['airings'];
                // $total = $total == 0 ? '' :  $total;

                $total_spend = intVal($total_spend) + $v2['spend'];
                // $total_spend = $total_spend == 0 ? '' :  $total_spend;

                $hoz_arr['time'][$t1]['total']['airings'] = $total;
                $hoz_arr['time'][$t1]['total']['spend'] = $total_spend;
            }
        }
        
       foreach($hoz_arr['time'] as $t1 => $t2){
           $key = date('g:i A', strtotime($t1));
           foreach($dayOFWeek as $d1 => $d2){
               if(array_key_exists($d2, $t2)){
                     $hor_arr_12[$key][$d2]['airings'] =  isset($t2[$d2]['airings']) ? $t2[$d2]['airings'] : intVal(0);
                     $hor_arr_12[$key][$d2]['spend'] =  isset($t2[$d2]['spend']) ? $t2[$d2]['spend'] : intVal(0);
               }else{
                     $hor_arr_12[$key][$d2]['airings'] = 0;
                     $hor_arr_12[$key][$d2]['spend'] = 0;
               }
           }
        }
        foreach($dayOFWeek as $d1 => $d2){
            $cnt = 1;
            foreach($hor_arr_12 as $t1 => $t2){
                
                foreach($t2 as $day1 => $day2){
                    if($d2 == $day1){
                        $new_arr_time['total']['airings'][$d2] =  isset($new_arr_time['total']['airings'][$d2]) ? $t2[$d2]['airings'] + $new_arr_time['total']['airings'][$d2] :  $hor_arr_12[$t1][$day1]['airings'];

                        $new_arr_time['total']['spend'][$d2] =  isset($new_arr_time['total']['spend'][$d2]) ? $t2[$d2]['spend'] + $new_arr_time['total']['spend'][$d2] :  $hor_arr_12[$t1][$day1]['spend'];
                    }
               }
            }   
        }
    }
   $tot_spend = number_format($tot_spend , 0);

    echo json_encode(array('status'=> 1,'total'=>$new_arr_time['total']['airings'],'total_spend'=>$tot_spend,'result'=>$hor_arr_12,'horz_total'=>$new_arr_time, 'week_head'=>$dayOFWeek));

}

function createParamsForGraph($requestData) {
    $db = getConnection();
  
    $classification         = urldecode($requestData['c']);
    //$tab            = $requestData['tab'];
    $responseType           = urldecode($requestData['responseType']);
    $spanish                = urldecode($requestData['spanish']);
    $networks               = isset($_POST['networks']) ? $_POST['networks'] : $_POST['network_code'] ;
    $network_ids            = isset($_POST['network_id']) ? $_POST['network_id'] : '';
    $hours                  = isset($_POST['hour']) ? $_POST['hour'] : '';
    $dayparts               = isset($_POST['dayparts']) ? $_POST['dayparts'] : '' ;
    $days                   = isset($_POST['day']) ? $_POST['day'] : '' ;
    $network_string         = is_array($networks) ? implode_call($networks, true) : $networks;
    $network_id             = is_array($network_ids) ? implode_call($network_ids, true) : $network_ids;
    $day_string             = is_array($days) ? implode_call($days)     : $days;
    $hours_string           = is_array($hours)    ? implode_call($hours)    : $hours;
    $dayparts_string        = is_array($dayparts)    ? implode_call($dayparts)    : $dayparts;
    $days                   = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday',);
    $creative_durations     = urldecode($requestData['creative_duration']);
    $new_filter_opt         = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
   
    $val                    = $requestData['val'];
    $sd                     = $requestData['sd'];
    $ed                     = $requestData['ed'];
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $date_filters           = dateFilterConditions($val,$sd,$ed);
//    $conditions     = getFilterConditions($tab, $classification);
    $brand_classification  = getBrandClassification($classification,$creative_durations);
    /****** Start -- bar graph ****************/
    if(isset($requestData['type'])) {
        $requestData['area'] = $requestData['type'] == 0 ? 'brand' : 'adv';
    }

    if (strpos($network_string, 'All') !== false) {
        $network_string = 'all_networks';
    }
    $params['area']                     = isset($requestData['area']) ? $requestData['area'] :  '';
    $params['start_date']               = $sd;
    $params['sd']                       = $sd;
    $params['end_date']                 = $ed;
    $params['ed']                       = $ed;
    $params['classification']           = $classification;
    $params['responseType']             = $responseType;
    $params['spanish']                  = $spanish;
    $params['id']                       = isset($requestData['id']) ? $requestData['id'] : '';;
    $params['network']                  = $network_string;
    $params['network_string']           = $network_string;
    $params['network_id']               = $params['network_ids'] = $network_id;
    $params['hours']                    = $hours_string;
    $params['dayparts']                 = $dayparts_string;
    $params['days']                     = $day_string;
    $params['new_filter_opt']           = $new_filter_opt;
    $params['breaktype']                = isset($requestData['breaktype']) ? $requestData['breaktype'] : '';
    $params['val']                      = $val;
    $params['graph_page']               = isset($requestData['graph_page']) ? $requestData['graph_page'] : '';
    $params['brand_classification']     = $brand_classification['brand_classification'];
    $params['active_tab']               = isset($requestData['active_tab']) ? $requestData['active_tab'] : '';
    $params['program_ids']              = $program_ids;
    return $params;
}

function getNetworksAiringsGraph() {
    $airings_count  = 0;
    $nat_count      = 0;
    $loc_count      = $tot_spend = $nat_spend = $loc_spend = 0;
    $flag           = 1;
    $db             = getConnection();
    $requestData    = $raw_data = array();
    $dpi            = 0;

    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $params = createParamsForGraph($requestData);
    extract($params);

    $days           = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday',);
    $dayparts_array = array(
        1 => 'Early Morning (6AM - 10AM)',
        2 => 'Daytime (10AM - 4.30PM)',
        3 => 'Early Fringe (4.30PM - 8PM)',
        4 => 'Prime (8PM - 11PM)',
        5 => 'Late Fringe (11PM - 1AM)',
        6 => 'Overnight (1AM - 6AM)'
    );

    $obj            = get_query_result('__query_network_airings_graph', $params, 'FETCH_ASSOC');
   
    if($active_tab == 'dow') {
        for ($i=1; $i <= 7; $i++) { 
            $barArray['local'][$i] = 0;
            $barArray['national'][$i] = 0;
            $barArray['local_spend'][$i] = 0;
            $barArray['national_spend'][$i] = 0;
            $barArray['barXAxis'][$i] = $days[$i-1];
        }
    }  else if ($active_tab == 'hod') {
        for ($i=0; $i <= 23; $i++) { 
            $barArray['local'][$i] = 0;
            $barArray['national'][$i] = 0;
            $barArray['local_spend'][$i] = 0;
            $barArray['national_spend'][$i] = 0;
            $label = substr(date('g A', strtotime(date('Y-m-d') . ' + ' . $i . ' hours')), 0, -1);
            $barArray['barXAxis'][$i] = $label;
        }
    } else if($active_tab == 'dayparts') {
        foreach ($dayparts_array as $key => $value) {
            $barArray['local'][$key]      = 0;
            $barArray['national'][$key]   = 0;
            $barArray['local_spend'][$key] = 0;
            $barArray['national_spend'][$key] = 0;
            $barArray['barXAxis'][$key]   = $value;
        }
    }
    
   
    foreach ($obj as $key => $result) {
        $rows[]                 = $obj;
        $count                  = ($result['airings_count']);
        $national_count         = ($result['national_airings_count']);
        $local_count            = ($result['local_airings_count']);

        $total_spend            = ($result['total_spend']);
        $national_spend         = ($result['national_spend']);
        $local_spend            = ($result['local_spend']);
        $dpi                    = $result['dpi'];

        if($active_tab == 'dow') {
            $start_index = $result['start_weekday'];
        } else  if($active_tab == 'hod') {
            $start_index = $result['start_hour'];
        } else {
            $start_index = $result['gen_daypart_id'];
        }

        $breaktype              = $result['breaktype'];
        $breaktype = $result['breaktype'] == 'L' ? 'D' :  $result['breaktype'];

        if ($breaktype == 'D') {
            $barArray['local'][$start_index]        = intVal(number_format($local_count, 0 , ',',''));
            $barArray['local_spend'][$start_index]  = intVal(number_format($local_spend, 0 , ',',''));
        } elseif ($breaktype == 'N') {
            $barArray['national'][$start_index]         = intVal(number_format($national_count, 0 , ',',''));
            $barArray['national_spend'][$start_index]   = intVal(number_format($national_spend, 0 , ',',''));
        }

        $airings_count = $airings_count+ $count;
        $nat_count     = $nat_count + $national_count;
        $loc_count     = $loc_count + $local_count;

        $tot_spend     = $tot_spend + $total_spend;
        $nat_spend     = $nat_spend + $national_spend;
        $loc_spend     = $loc_spend + $local_spend;
    }
    
    $return['airings_count']    = number_format($airings_count);
    $return['national_count']   = number_format($nat_count);
    $return['local_count']      = number_format($loc_count);
    $return['national_spend']   = number_format($nat_spend);
    $return['local_spend']      = number_format($loc_spend);
    $return['total_spend']      = number_format($tot_spend);
    $return['barGraphData']     = $barArray;
    $return['dpi']              = $dpi;
    /****** End -- bar graph ****************/
  
    /******** Start -- Trend Graph **********/
    
    $return['trendGraphData'] = getNetworksAiringsTrendGraph($flag,$requestData,$_POST);
    /******End -- Trend Graph************/

    echo json_encode($return);
}


function getNetworksSpendIndexGraph() {
    $loc_spend      = $count = $nat_count = $loc_count = $nat_spend  = $tot_spend   = 0;
    $flag           = 1;
    $dpi            = 0;

    $db             = getConnection();
    $requestData    = $raw_data = array();

    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $params = createParamsForGraph($requestData);
    extract($params);

    $days           = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday',);
    $dayparts_array = array(
        1 => 'Early Morning (6AM - 10AM)',
        2 => 'Daytime (10AM - 4.30PM)',
        3 => 'Early Fringe (4.30PM - 8PM)',
        4 => 'Prime (8PM - 11PM)',
        5 => 'Late Fringe (11PM - 1AM)',
        6 => 'Overnight (1AM - 6AM)'
    );

    $obj  = get_query_result('__query_network_spend_index_graph', $params, 'FETCH_ASSOC');
   
    if($active_tab == 'dow') {
        for ($i=1; $i <= 7; $i++) { 
            $barArray['local'][$i] = 0;
            $barArray['national'][$i] = 0;
            $barArray['local_count'][$i] = 0;
            $barArray['national_count'][$i] = 0;

            $barArray['barXAxis'][$i] = $days[$i-1];
        } 
    }else if ($active_tab == 'hod') {
        for ($i=0; $i <= 23; $i++) { 
            $barArray['local'][$i] = 0;
            $barArray['national'][$i] = 0;
            $barArray['local_count'][$i] = 0;
            $barArray['national_count'][$i] = 0;
    
            $label = substr(date('g A', strtotime(date('Y-m-d') . ' + ' . $i . ' hours')), 0, -1);
            $barArray['barXAxis'][$i] = $label;
        }
     }else if ($active_tab == 'dayparts') {
        foreach ($dayparts_array as $key => $value) {
            $barArray['local'][$key]      = 0;
            $barArray['national'][$key]   = 0;
            $barArray['national_count'][$key] = 0;
            $barArray['local_count'][$key] = 0;
            $barArray['barXAxis'][$key]   = $value;
        }
     }
   
    foreach ($obj as $key => $result) {
        $rows[]         = $obj;
        $total_spend            = ($result['total_spend']);
        $national_spend         = ($result['national_spend']);
        $local_spend            = ($result['local_spend']);

        $airings_count          = ($result['airings_count']);
        $national_count         = ($result['national_airings_count']);
        $local_count            = ($result['local_airings_count']);
        $dpi                    = $result['dpi'];

        if($active_tab == 'dow') {
            $start_index = $result['start_weekday'];
        } else  if($active_tab == 'hod') {
            $start_index = $result['start_hour'];
        } else {
            $start_index = $result['gen_daypart_id'];
        }

        $breaktype              = $result['breaktype'];
        $breaktype = $result['breaktype'] == 'L' ? 'D' :  $result['breaktype'];
        
        if ($breaktype == 'D') {
            $barArray['local'][$start_index] = intVal(number_format($local_spend, 0 , ',',''));//replace $local_count with $count if only local graph is to be shown
            $barArray['local_count'][$start_index] = intVal(number_format($local_count, 0 , ',',''));
        } elseif ($breaktype == 'N') {
            $barArray['national'][$start_index] = intVal(number_format($national_spend, 0 , ',',''));//replace $national_count with $count if only local graph is to be shown
            $barArray['national_count'][$start_index] = intVal(number_format($national_count, 0 , ',',''));
        }

        $tot_spend     = $tot_spend + $total_spend;
        $nat_spend     = $nat_spend + $national_spend;
        $loc_spend     = $loc_spend + $local_spend;

        $count         = $count + $airings_count;
        $nat_count     = $nat_count + $national_count;
        $loc_count     = $loc_count + $local_count;

    }
    
    $return['total_spend']      = number_format($tot_spend, 0);
    $return['national_spend']   = number_format($nat_spend, 0);
    $return['local_spend']      = number_format($loc_spend, 0);

    $return['airings_count']    = number_format($count);
    $return['national_count']   = number_format($nat_count);
    $return['local_count']      = number_format($loc_count);
    $return['dpi']              = $dpi;
    $return['barGraphData']     = $barArray;
    /****** End -- bar graph ****************/
  
    /******** Start -- Trend Graph **********/
    
    $return['trendGraphData'] = getNetworksAiringsTrendGraph($flag,$requestData,$_POST);
    /******End -- Trend Graph************/

    echo json_encode($return); 
}




function getNetworksAiringsTrendGraph($flag = NULL, $requestData = NULL){
    $tot_spend      = 0;
    $nat_spend      = 0;
    $loc_spend      = 0;
   // $flag           = 1;

    $db             = getConnection();
    $requestData    = $raw_data = array();

    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $params_network_airings_dow = createParamsForGraph($requestData);
   extract($params_network_airings_dow);
   $prevDates      = getPreviousDates('week', 1, customDate(), 'current');
   
    /******Start -- Trend Graph **********/
    if($area == 'brand' || $area == 'adv'){
        $minDetectionDateCondition = ' brand_id = '.$requestData['id'];
        $groupBy                   = 'brand_id';
    }else{
        $minDetectionDateCondition = ' creative_id = '.$requestData['id'];
        $groupBy                   = 'creative_id';
    }

    $params['network_string']               = $network;
    $params['network_id']                   = $network_id;
    $params['minDetectionDateCondition']    = $minDetectionDateCondition;
    $params['groupBy']                      = $groupBy;
    $first_detection_result  = get_query_result('__queries_get_brand_first_detection', $params, 'FETCH_OBJ');
    
    
    if($val == 5 || (strpos($val, "4_") !== false)){
        $date_range_arr['min_date'] = $sd;
        $date_range_arr['max_date'] = $ed;
        $date_range_arr['str_date'] = isset($first_detection_result[0]->first_detection_date) ? substr($first_detection_result[0]->first_detection_date, 0, -9) : LIFETIME_START_DATE;
        
    }else {
        $date_week_start_end_date =  getDatesForTrendGraph($requestData['ed']);
        $date_range_arr = $date_week_start_end_date;
    }

  
    $params_network_airings_dow['max_end_date']             = customDate();
    $params_network_airings_dow['max_start_date']           = isset($first_detection_result[0]->first_detection_date) ? substr($first_detection_result[0]->first_detection_date, 0, -9) : LIFETIME_START_DATE;
   
    if($graph_page == 'airings') {
        $col = 'airings_count';
        $fun = 'intval';
        $obj  = get_query_result('__query_network_airings_trend_graph', $params_network_airings_dow, 'FETCH_ASSOC');
    }else {
        $col = 'total_spend';
        $fun = 'floatval';
        $obj  = get_query_result('__query_network_spend_trend_graph', $params_network_airings_dow, 'FETCH_ASSOC');
    }
  
    if($flag == 1){
        $prevWeeks = 2;
    } else {
        $prevWeeks = 1;
    }
    $calendarRows = getMediaCalendar($first_detection_result, $prevWeeks);
    $years = $calendarRows;
    foreach ($years as $year => $weeks) {
        foreach ($weeks as $weekNo => $weekStart) {
            $date = $calendarRows[$year][$weekNo];
            $formatedDate = '<i style="font-weight: normal;"><b>From</b> '. date("m/d/Y", strtotime('-6 days', $date)) . ' <b>thru</b> '. date('m/d/Y', $date) .'</i>';

            // $array[$date][$col] = 0;
            $array[$date]['airings_count'] = 0;
            $array[$date]['total_spend'] = 0;
            $array[$date]['week'] = $weekNo;
            $array[$date]['year'] = $year;
            $array[$date]['date'] = $formatedDate;
            $array[$date]['tooltip'] = "<b>Week #{$weekNo} </b><br/> {$formatedDate}";
            
            $records['local'] = $records['national'] = $array;
        }
    }
    
    foreach ($obj as $key => $result) {
        $year       = $result['start_year'];
        $week       = $result['start_week'];

        $breaktype          = $result['breaktype'];
        $breaktype = $result['breaktype'] == 'L' ? 'D' :  $result['breaktype'];
        
        $date = $calendarRows[$year][$week];
        
        $tooltip['local'] = isset($tooltip['local']) ? $tooltip['local'] : 0;
        $tooltip['national'] = isset($tooltip['national']) ? $tooltip['national'] : 0;

        $tooltip['local_spend'] = isset($tooltip['local_spend']) ? $tooltip['local_spend'] : 0;
        $tooltip['national_spend'] = isset($tooltip['national_spend']) ? $tooltip['national_spend'] : 0;
        
        if ($breaktype == 'D') {
            $records['local'][$date]['airings_count'] += $result['airings_count'];
            $tooltip['local'] = $result['airings_count'];   
            $records['local'][$date]['total_spend'] += $result['total_spend'];
        } else {
            $records['national'][$date]['airings_count'] += $result['airings_count'];
            $tooltip['national'] = $result['airings_count'];   
            $records['national'][$date]['total_spend'] += $result['total_spend'];
        }
       
        $tooltip['week_header'] = $records['local'][$date]['tooltip'];
        
        // if($graph_page == 'airings') {
        //     $tooltip['week_header'] .= '<br>'. '$'.number_format($records['national'][$date]['total_spend']) .'<br>'. '$'.number_format($records['local'][$date]['total_spend']);
        // } else {
        //     $tooltip['week_header'] .= '<br>'.number_format($records['national'][$date]['airings_count']) .'<br>'. number_format($records['local'][$date]['airings_count']);
        // }
      
      $tooltip['week_header'] .= '<div class="outer-tooltips" style=" position: relative; top: 4px; height: 65px;">
        <span class="inner-tooltips" style="position: relative; top: 19px;">
            <span class="tooltip-national"></span>
            <b>National:</b>
            <br>
            <span class="tooltip-local"></span>
            <b>DPI:</b>
        </span>
        <p class="inner-tooltips" style=" position: relative; top: -37px; left: 83px; bottom: 0; text-align: left; margin: 0; width: 100px; font-size: 12px;">
            <u>Airings</u>
            <br>'.number_format($records['national'][$date]['airings_count']).'
            <br>'.number_format($records['local'][$date]['airings_count']).'
        </p>
        <p class="inner-tooltips" style=" position: relative;  right: 0; top: -94px; left: 147px; bottom: 0; text-align: left; margin: 0; width: 100px; font-size: 12px;">
            <u>Spend</u>
            <br>$'.number_format($records['national'][$date]['total_spend']).'
            <br>$'.number_format($records['local'][$date]['total_spend']).'
        </p>
    </div>
    ';
        $records['national'][$date]['_tooltip_'] = $tooltip;

        // $records['national'][$date]['tooltip'] +=  $records['national'][$date]['tooltip'].'&nbsp;'.$result['national_spend'];
    } 
    foreach($records['national'] as $recK => $recT){
        if(!$recT['airings_count']){
            if(!$records['local'][$recK]['airings_count']){
                unset($records['national'][$recK]);
                unset($records['local'][$recK]);
            }else{
                break;
            }
        } else if(!$recT['total_spend']) {
            if(!$records['local'][$recK]['total_spend']){
                unset($records['national'][$recK]);
                unset($records['local'][$recK]);
            }else{
                break;
            }
        }else{
            break;
        }
    }

    foreach ($records as $natLocal => $rows) {
        foreach ($rows as $time => $airingsDetails) {
                if (!isset($airingsDetails['_tooltip_'])) {
                    $airingsDetails['_tooltip_'] = $airingsDetails['tooltip'];
                } else {
                    $_tooltip_ = $airingsDetails['_tooltip_'];
                    $airingsDetails['_tooltip_'] = $_tooltip_['week_header'];
                }

                $graph[$natLocal][] = array('x' => $time * 1000, 'y' => $fun($airingsDetails[$col]), 'tooltip' => $airingsDetails['_tooltip_']);
        }
    }
    $graph = (!empty($graph)) ? $graph : [];
    if($flag == 1){
        $graph['date'] = $date_range_arr;
        return $graph;
    } else {
        $return['trendGraphData']         = $graph;
        $return['trendGraphData']['date'] = $date_range_arr;
        echo json_encode($return);
    }
}

function getMediaCalendar($first_detection_result, $prevWeek = 1) {
    $db = getConnection();
    
    $first_detection_date = isset($first_detection_result[0]->first_detection_date) ? substr($first_detection_result[0]->first_detection_date, 0, -9) : LIFETIME_START_DATE;
    //, 'current'
    $prevDates = getPreviousDates('week', $prevWeek, customDate());
    $sql = 'SELECT `media_year`, `media_week`, `media_week_start`, media_week_end FROM `media_calendar` WHERE media_week_end >="'.$first_detection_date.'" AND media_week_start <= "'.$prevDates['max_date'].'" ORDER BY media_week_start';
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
    */
    
    foreach($result as $key => $value){
            $year   = $value['media_year'];
            $week   = $value['media_week'];
            $start  = $value['media_week_end'];

            $records[$year][$week] = strtotime($start);//getTimeStampVal($start);
    } 
    return $records;
}

function getTimeStampVal ($date) {
    $year = substr($date, 0, 4);
    $month= substr($date, 5, 2);
    $date = substr($date, -2, 2);

    $dateObj = new DateTime(NULL, new DateTimeZone('UTC'));
    $dateObj->setDate($year, $month, $date);
    return $dateObj->getTimestamp();
}

function createParamsForNetworkGraph($requestData) {
    $db = getConnection();

    $where_category = '';
    $val            = $requestData['val'];   
    $sd             = $requestData['sd'];       
    $ed             = $requestData['ed'];       
    $creativeId     = $requestData['creative_id'];
    $nw_code        = urldecode(addslashes($requestData['code']));
    $network_id     = $requestData['network_id'];
    $group_by       = ' GROUP BY rosTime,rosDay';
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $responseType   = urldecode($requestData['responseType']);
    $spanish        = urldecode($requestData['spanish']);
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $tab            = $requestData['tab'];
    $classification = urldecode($requestData['c']);
    
    $creative_durations         = urldecode($requestData['creative_duration']);
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';

    $brand_classification       = getBrandClassification($classification,$creative_durations);

    $params['spanish']                  = $spanish;
    $params['classification']           = $classification;
    $params['val']                      = $val;
    $params['creative_id']              = $requestData['creative_id'];
    $params['tab']                      = $tab;
    $params['start_date']               = $sd;
    $params['end_date']                 = $ed;
    $params['nw_code']                  = $nw_code;
    $params['nw_id']                    = $network_id;
    $params['brand_id']                 = $requestData['brand_id'];
    $params['creative_id']              = $requestData['creative_id'];
    $params['responseType']             = $responseType;
    $params['checked_network_graph_opt']= $requestData['checked_network_graph_opt'];
    $params['new_filter_opt']           = $new_filter_opt;
    $params['group_by']                 = $group_by;
    $params['brand_classification']     = $brand_classification['brand_classification'];
    $params['program_ids']              = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';


    if(!empty($cat)){
        $category       = categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 
     
    $params['where_category']        = $where_category;
  
    return $params;
    
    
}

function getGraphData(){
    ini_set('memory_limit','2048M');
    
    $data = $result = array();
    $nestedData=array();   
    $records = array();
    $national_array = $local_array = $national_spend_array = $local_spend_array = array();
    $x_axis_days = array();
    $x_axis_time = array();
    $x_axis = array();
    $requestData = $raw_data = array();
    
    $day = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday');
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $params = createParamsForNetworkGraph($requestData); 
   
    if($params['creative_id'] != ''){   
        $result                 = get_query_result('__query_get_creative_details', $params, 'FETCH_OBJ');
        foreach($result as $c1 => $c2){
            if($c2->length > LENGTH){
                $c2->duration = number_format(($c2->length/60),1).' m';
            }else{
                $c2->duration = $c2->length.' sec'; 
            }
        }
    }else{ 
        $result             = get_query_result('__query_get_network_details', $params, 'FETCH_OBJ');
    }
    
   $rosDayHiphen    = getRosDay();
    
    if(!empty($result)){
       if($params['creative_id'] != ''){
           $where_cond    = "d.creative_id = ".$params['creative_id'];
        }else{
           $where_cond    = "d.brand_id = ".$params['brand_id'];
        }
       
       $params['where_cond']            = $where_cond;
       $total_spend = $national_spend = $local_spend = $nat_airings = $loc_airings = $total_airings = 0;
       
        $rosTimeResult                 = $natLocResult =  get_query_result('__query_get_daypart_x_axis', $params, 'FETCH_OBJ');
        $header_national_spend_array = $header_local_spend_array =$header_national_array = $header_local_array = 0;
       //display x axis
        if(!empty($rosTimeResult)){
            foreach($rosTimeResult as $x => $y){
                   if( $y->length <= LENGTH){
                       $rosDay = $y->rosDay;
                        $arr = explode("-",$y->rosTime);

                        if($rosDay == 'S' || $rosDay == 'T' || $rosDay == 'M'){
                             $day = substr($y->dow,0,3); 
                             array_push($x_axis_days,$day);
                        }else{
                             array_push($x_axis_days,$rosDayHiphen[$rosDay]);
                        }

                        $start = date("g:i A",strtotime($arr[0]));
                        $end = date("g:i A",strtotime($arr[1]));
                        array_push($x_axis_time,$start.' - '.$end );
                    }
            }
            foreach($natLocResult as $r1 => $r2){
                $total_spend = $total_spend + $r2->total_spend ;
                $national_spend = $national_spend + $r2->national_spend ;
                $local_spend = $local_spend + $r2->local_spend ;

                $nat_airings =  $nat_airings + $r2->nat_airings ;
                $loc_airings = $loc_airings + $r2->loc_airings ;
                $total_airings = $nat_airings + $loc_airings ;

                // $total_spend = $total_spend + $r2->total_spend ;
                $header_national_spend_array = $header_national_spend_array + $r2->national_spend ;
                $header_local_spend_array = $header_local_spend_array + $r2->local_spend ;

                $header_national_array =  $header_national_array + $r2->nat_airings ;
                $header_local_array = $header_local_array + $r2->loc_airings ;

                foreach($rosDayHiphen as $h1 => $h2){
                    $national = $local = $national_spend = $local_spend = 0;
                    if($r2->length <= LENGTH && $h1 == $r2->rosDay ){
                        $time = explode("-",$r2->rosTime);
                        $start = date("g:i A",strtotime($time[0]));
                        $end = date("g:i A",strtotime($time[1]));

                        $time = $start.' - '.$end ;

                        $national_index        = 'nat_airings';
                        $local_index          = 'loc_airings';
                        $national_spend_index  = 'national_spend';
                        $local_spend_index    = 'local_spend';

                         if(isset($records['rosTime'][$time][$r2->rosDay]['national'])){
                             $national  = $r2->$national_index + $records['rosTime'][$time][$r2->rosDay]['national'];
                         }else{
                             $national = $r2->$national_index +$national;
                         }

                         if(isset($records['rosTime'][$time][$r2->rosDay]['nat_spend'])){
                            $national_spend  = $r2->$national_spend_index + $records['rosTime'][$time][$r2->rosDay]['nat_spend'];
                         } else {
                            $national_spend = $r2->$national_spend_index +$national_spend;
                         }

                         if(isset($records['rosTime'][$time][$r2->rosDay]['loc_spend'])){
                             $local_spend  = $r2->$local_spend_index + $records['rosTime'][$time][$r2->rosDay]['loc_spend'];
                         }else {
                             $local_spend = $r2->$local_spend_index +$local_spend;
                         }

                        if(isset($records['rosTime'][$time][$r2->rosDay]['local'])){
                            $local  = $r2->$local_index + $records['rosTime'][$time][$r2->rosDay]['local'];
                        }else{
                            $local = $r2->$local_index +$local;
                        }

                        $records['rosTime'][$time][$r2->rosDay]['national'] = $national;
                        $records['rosTime'][$time][$r2->rosDay]['local'] = $local;

                        $records['rosTime'][$time][$r2->rosDay]['nat_spend'] = $national_spend;
                        $records['rosTime'][$time][$r2->rosDay]['loc_spend'] = $local_spend;

                    }
                } 
            }
        }
        unset($rosTimeResult);
        
        $params['group_by']              = '';
        // $natLocResult                    = get_query_result('__query_get_daypart_x_axis', $params, 'FETCH_OBJ');
        // if(!empty($natLocResult)){
          
        // }
    
        unset($natLocResult);
        if(!empty($records)){
            foreach($records['rosTime'] as $k => $v){
            $national = $local = $national_spend = $local_spend =  0;
                foreach($v as $k1 => $v2){
                        $national       = $national+ intVal(number_format($v2['national'], 0 , ',',''));
                        $local          = $local+intVal(number_format($v2['local'], 0 , ',',''));

                        $national_spend = $national_spend+intVal(number_format($v2['nat_spend'],0 ,',' ,''));
                        $local_spend    = $local_spend+intVal(number_format($v2['loc_spend'],0 ,',' ,''));

                        $records['rosTime'][$k][$k1]['nat_total'] = intVal(number_format($national, 0, ',', ''));
                        $records['rosTime'][$k][$k1]['loc_total'] = intVal(number_format($local, 0, ',',''));

                        $records['rosTime'][$k][$k1]['nat_spend_total'] = intVal(number_format($national_spend, 0, ',', ''));
                        $records['rosTime'][$k][$k1]['loc_spend_total'] = intVal(number_format($local_spend, 0, ',',''));
                }
            }
            
            $i = 0;
            foreach($records['rosTime'] as $t1 => $t2){
                foreach($t2 as $day1 => $day2){
                        $n =  $records['rosTime'][$t1][$day1]['nat_total'] ?  $records['rosTime'][$t1][$day1]['nat_total'] : 0;
                        $l =  $records['rosTime'][$t1][$day1]['loc_total'] ?  $records['rosTime'][$t1][$day1]['loc_total'] : 0;

                        $n_spend =  $records['rosTime'][$t1][$day1]['nat_spend_total'] ?  $records['rosTime'][$t1][$day1]['nat_spend_total'] : 0;
                        $l_spend =  $records['rosTime'][$t1][$day1]['loc_spend_total'] ?  $records['rosTime'][$t1][$day1]['loc_spend_total'] : 0;
                        array_push($national_array, $n);
                        array_push($local_array, $l);

                        array_push($national_spend_array, $n_spend);
                        array_push($local_spend_array, $l_spend);
                }
            }
        }
    }
        $national_count = number_format($header_national_array, 0);
        $local_count    = number_format($header_local_array, 0);
        $total_count    = number_format($total_airings , 0);
        $national_spend = number_format($header_national_spend_array, 0);
        $local_spend    = number_format($header_local_spend_array, 0);
        $total_spend    = number_format($total_spend, 0);

    echo json_encode(array('status'=> 1,'result'=>$result,'spend_national' => $national_spend_array,'spend_local'=> $local_spend_array, 'national'=>$national_array,'national_count'=>$national_count,'local'=>$local_array,'local_count'=>$local_count,'total_count'=>$total_count,'x_axis_time'=>$x_axis_time,'x_axis_days'=>$x_axis_days, 'total_spend'=> $total_spend, 'national_spend' => $national_spend , 'local_spend' => $local_spend)); 
}

function getFilterConditions($tab,$c){
    $conditions = array();
    if($tab == 'brand'  && $c != '5' && $c!= '7'){ $conditions['rank_type'] = ' AND ranking_type = "brand"' ; }
    else if($tab == 'adv' && $c != '5' && $c!= '7'){$conditions['rank_type'] = ' AND ranking_type = "advertiser"' ;}
    else{$conditions['rank_type'] = ' AND ranking_type = "retail"' ;}
    
    if($tab == 'brand'){
        $conditions['join'] = 'r.brand_id = s.brand_id';
    }else{
        $conditions['join'] = 'r.adv_id = s.adv_id';
    }
   
     if($c == '3'){ // lead generation
      $conditions['type'] = " AND report_type = 'DR-Lead Gen' AND report_length = 'short' ";
      $conditions['c_type'] = " AND s.type = 'Lead Gen' AND  s.class = 'DR'";
      $conditions['cr_type'] = " AND c.type = 'Lead Gen' AND  c.class = 'DR' AND c.length <=".LENGTH;
      $conditions['order_by'] = ' r.rank';
      $conditions['cols'] = ' r.rank as current_week';
    }else if($c == '2'){ //Short-Form Products
      $conditions['type'] = " AND report_type = 'DR-Product' AND report_length = 'short'";
      $conditions['c_type'] = " AND s.type = 'Product' AND s.class='DR'";
      $conditions['cr_type'] = " AND c.type = 'Product' AND  c.class = 'DR' AND c.length <=".LENGTH;
      $conditions['order_by'] = ' r.rank';
      $conditions['cols'] = ' r.rank as current_week';
    }else if($c == '4'){ //Brand DR
      $conditions['type'] = " AND report_type IN ('Brand DR-Lead Gen', 'Brand DR-Product')  AND report_length = 'short'";  
      $conditions['c_type'] = " AND s.type IN ('Lead Gen', 'Product') AND s.class IN ('BRAND DR')";  
      $conditions['cr_type'] = " AND c.type IN ('Lead Gen', 'Product') AND c.class IN ('BRAND DR') AND c.length <=".LENGTH;
     // $type = " AND report_type = 'BRAND DR-Lead Gen' AND report_length = 'short'";
      $conditions['order_by'] = ' r.rank';
      $conditions['cols'] = ' r.rank as current_week';
    }else if($c == '5'){ //retail products short
      $conditions['type'] = " AND report_length = 'short'";
      $conditions['c_type'] = " AND c.class != 'BRAND' AND s.length <=".LENGTH;
      $conditions['cr_type'] = " AND c.length <=".LENGTH;
      $conditions['order_by'] = ' r.rank';
      $conditions['cols'] = ' r.rank as current_week';
    }else if($c == 6){ // 28.5 creative
       $conditions['type'] = " AND report_length = 'long'";
       $conditions['c_type'] = " AND c.class != 'BRAND' AND s.length >".LENGTH;
       $conditions['cr_type'] = " AND c.length >".LENGTH;
       $conditions['order_by'] = ' r.global_rank';
       $conditions['cols'] = ' r.global_rank as current_week';
    }else if($c == 7){ // long retail products
       $conditions['type'] = " AND report_length = 'long'";
       $conditions['c_type'] = " AND c.class != 'BRAND' AND s.length >".LENGTH;
       $conditions['cr_type'] = " AND c.length >".LENGTH;
       $conditions['order_by'] = ' r.rank';
       $conditions['cols'] = ' r.rank as current_week';
    }
    else{ // all short form
       $conditions['type'] = " AND report_type = 'ALL' AND report_length = 'short'";
       $conditions['c_type'] = "AND c.class != 'BRAND' AND s.length <=".LENGTH;
       $conditions['cr_type'] = " AND c.length <=".LENGTH;
       $conditions['order_by'] = ' r.global_rank';
       $conditions['cols'] = ' r.global_rank as current_week';
    }
    
    return $conditions;
}
function brandNetworks($export = 0, $request_arr = NULL){
    $data = $result = $session_data =$exportData = array();
    $network_arr    = array();
    $nestedData     =array();  
    $json_data      = array();
    $requestData = $raw_data = array();
    $where_category = '';
    $db = getConnection();

    if($export == 1){
        $requestData = $request_arr;
    }else{
        $request = Slim::getInstance()->request();
        $query_string = $request->getBody();    
        parse_str($query_string, $output);
        $requestData = (array)json_decode($query_string, TRUE);
        $page           = $requestData['page'];
        $limit          = $requestData['rows'];
    }   
        $sidx       = 'spend_index';
        $sord       = 'desc';
        $page       = 1;
        $limit      = 10;
    $sidx           = $requestData['sidx'];
    $sord           = $requestData['sord'];
    $c              = urldecode($requestData['c']);
    $tab            = $requestData['tab'];  
    $val            = $requestData['val'];
    $sd             = $requestData['sd'];
    $brand_id       = $requestData['brand_id'];
    $ed             = $requestData['ed'];
    $id             = $tab == 'brand' ? $requestData['brand_id'] : $requestData['creative_id'];
    
    $responseType   = "(".urldecode($requestData['responseType']).")";
    $spanish        = urldecode($requestData['spanish']);
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $networks       = isset($requestData['network_code%5B%5D'])? $requestData['network_code%5B%5D'] : $requestData['network_code'] ;
    $network_id     =  isset($_POST['network_id']) ? $_POST['network_id'] : array();
    $program_ids            = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $hours                  = isset($_POST['hour']) ? $_POST['hour']   : '';
    $dayparts               = isset($_POST['dayparts']) ? $_POST['dayparts'] :  '';
    $days                   = isset($_POST['day']) ? $_POST['day'] : '';
    if($export == 1){
        $hours                  = isset($requestData['hour']) ? $requestData['hour']   : '';
        $dayparts               = isset($requestData['daypart']) ? $requestData['daypart'] :  '';
        $days                   = isset($requestData['day']) ? $requestData['day'] : '';
        $network_id             = isset($requestData['network_id']) ? $requestData['network_id'] : '';
    }
    $day_string             = is_array($days) ? implode_call($days)     : $days;
    $hours_string           = is_array($hours) ? implode_call($hours)    : $hours;
    $dayparts_string        = is_array($dayparts) ? implode_call($dayparts)    : $dayparts;
    if($networks == 'all_networks'){
        $network_string = $networks;
    }else{
        $network_string = is_array($networks) ? implode_call($networks, true) : "'".$networks."'";
    }    
    $new_filter_opt = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $join_category  = 'INNER JOIN categories cat ON (b.main_sub_category_id = cat.sub_category_id OR b.alt_sub_category_id = cat.sub_category_id)';
    $creative_durations         = urldecode($requestData['creative_duration']);

    if(!empty($cat)){
        $category= categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 
  
    $columns = array( 
        'network_code' => 'n.network_alias',
        'network_alias' => 'n.network_alias',
        'dpi' => 'n.dpi',
        'duration' => 'total_duration',
        'airings' => 'airings',
        'hidden_airings' => 'airings',
        'national_count' => 'nat',
        'local_count' => 'loc',
        'hidden_network_code' =>'n.network_alias',
        'duration' => 'asd',
        'national' => 'nationalP',
        'local' => 'localP',
        'creatives'=>'creatives_count',
        'total_spend'=>'total_spend',
        'nat_spend'=>'nat_spend',
        'loc_spend'=>'loc_spend',
        'hidden_total_spend' => 'total_spend',
        'hidden_national_spend' => 'nat_spend',
        'hidden_local_spend' => 'local_spend',
        'hidden_program_count' => 'program_count'
    );
    
//    $conditions      = getFilterConditions($tab,$c);
    $brand_classification  = getBrandClassification($c,$creative_durations);
    $_order_by       =   $columns[$sidx] ." ".$sord ;
    
    $params_brand_networks['responseType']            = $responseType;
    $params_brand_networks['spanish']                 = $spanish;
    $params_brand_networks['join_category']           = $join_category;
    $params_brand_networks['where_category']          = $where_category;
//    $params_brand_networks['cr_type']                 = $conditions['cr_type'];
    $params_brand_networks['spanish']                 = $spanish;
    $params_brand_networks['order_by']                = $_order_by;
    $params_brand_networks['start_date']              = $sd;
    $params_brand_networks['end_date']                = $ed;
    $params_brand_networks['id']                      = $id;
    $params_brand_networks['tab']                     = $tab;
    $params_brand_networks['network']                 = $network_string;
    $params_brand_networks['network_id']              = $network_id;
    $params_brand_networks['new_filter_opt']          = $new_filter_opt;
    $params_brand_networks['brand_classification']    = $brand_classification['brand_classification'];
    $params_brand_networks['breaktype']               = $requestData['breaktype'];
    $params_brand_networks['program_ids']             = $program_ids;
    $params_brand_networks['hours']                   = $hours_string;
    $params_brand_networks['dayparts']                = $dayparts_string;
    $params_brand_networks['days']                    = $day_string;


    $result  = get_query_result('__queries_display_brand_networks', $params_brand_networks, 'FETCH_OBJ');
    // $result = reorderResultForRanking ($result);

    $totalData = count($result);
    $count = $totalData;

      //Calculate paging related values $total_pages, $page
    if(!$export){
        if ($count > 0) {
            $total_pages = ceil($count / $limit);
        } else {
            $total_pages = 0;
        }

        if ($page > $total_pages) {
            $page = $total_pages;
        }

        $offset = $limit * $page - $limit;

        if ($offset < 0) {
            $offset = 0;       
        }
    }

    if(!empty($result)){
        foreach($result as $k => $v){
            if(!in_array($v->network_code,$network_arr)){
                array_push($network_arr,$v->network_code);
            }
        }
        $nw = "'" . implode("','",$network_arr) ."'";
    }
    $network_array = array();
    if(!empty($result)){
       foreach($result as $resultK => $resultV){
           if($c > 5){
               $duration = round(($resultV->asd/60)).' m';
           }else{
               $duration = round($resultV->asd).' sec'; 
           }
                
           $nestedData['id'] = $resultV->network_id;
           array_push($network_array, $resultV->network_id);
          // $airings_count = $resultV->airings;
           $nestedData['network_code'] = $resultV->network_alias ? $resultV->network_alias : '-';
           $nestedData['network_alias'] = $resultV->network_alias;
           $exportData['network_alias'] = $resultV->network_alias;
           $exportData['network_id'] = $resultV->network_id;
           $exportData['brand_id'] = $brand_id;
           $nestedData['creatives'] = isset($resultV->creatives_count) ? number_format($resultV->creatives_count) : '0';
           $exportData['creatives'] = $nestedData['creatives'];
           if($tab == 'brand'){
                $exportData['program'] = $resultV->program_count;
                $nestedData['airings'] = $resultV->airings  ? number_format($resultV->airings) : 0;
                $exportData['airings'] = $resultV->airings;
                $nestedData['total_spend'] = number_format($resultV->total_spend, 0);
                $nestedData['program_count'] =  number_format($resultV->program_count);
           }
           if($tab == 'creative'){
                $exportData['program'] = $resultV->program_count;
                $nestedData['program_count'] =  '<a href="#" onClick="getProgramsByNetwork('.$resultV->network_id.',\'creative\','.$id.',\''.addslashes($resultV->network_alias).'\','. $resultV->program_count.');">'.$resultV->program_count.'</a>';
               $nestedData['airings'] = $resultV->airings  ? '<a href="#" onclick="showAiringSpendGraph(\'airings\','.$brand_id.','.$id.', \''.addslashes($resultV->network_alias).'\', \''.number_format($resultV->airings).'\','.$resultV->dpi.', '.$resultV->network_id.')">'.number_format($resultV->airings).'</a>': '0' ;
                $exportData['airings'] = $resultV->airings  ? $resultV->airings : '0';
                $nestedData['total_spend'] = '<a href="#" onclick="showAiringSpendGraph(\'spend\','.$brand_id.', '.$id.', \''.addslashes($resultV->network_alias).'\', \''.number_format($resultV->total_spend).'\','.$resultV->dpi.', '.$resultV->network_id.')">'.number_format($resultV->total_spend).'</a>';

                $get_networks_data_param['creative_id']           = $id;
                $get_networks_data_param['network_id'] = $resultV->network_id;
                $networks_data  = get_query_result('__query_get_network_first_last_aired_date', $get_networks_data_param, 'FETCH_OBJ');
                $nestedData['first_aired'] = $exportData['first_aired'] = isset($networks_data[0]->first_airing)? $networks_data[0]->first_airing : '';
                $nestedData['last_aired']  = $exportData['last_aired']  = isset($networks_data[0]->last_airing)? $networks_data[0]->last_airing : '';
           }
           
           if(!$resultV->thumbnail){
               $nestedData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
               $exportData['video'] = $nestedData['video'];
            }else{
               $nestedData['video'] = '<a href="#basicModalCamp"><i class="fa fa-play-circle-o fa-2x" onclick="playvideo('.$resultV->thumbnail.',\''.$sd.'\',\''.$ed.'\',\''.$resultV->network_code.'\',\'network_detail\')"></i></a>';
                 $exportData['video'] = base64_encode("creative_id=".$resultV->thumbnail."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($resultV->network_code));
            }
            $nestedData['dpi'] =  $resultV->dpi ? '<span class="dpi-symbol" style="width:30px;"><img src="assets/img/dpi_symbol.png"/></span>' : '-';
            $exportData['dpi'] =  $resultV->dpi ? 'Yes' : 'No';
            $nestedData['national'] = $resultV->nationalP;//round($resultV->nat/$resultV->total_airings * 100, 2);
            $exportData['national'] = $nestedData['national'];
            $nestedData['local'] = $exportData['local'] = $resultV->localP;//round($resultV->loc/$resultV->total_airings * 100, 2);
            $nestedData['national_count'] = number_format($resultV->nat);
            $exportData['national_count'] = $resultV->nat;
         
            $nestedData['hidden_total_spend'] = $resultV->total_spend;
            $exportData['total_spend'] = $resultV->total_spend;
            $nestedData['local_count'] = number_format($resultV->loc);
            $exportData['local_count'] = $resultV->loc;
            $nestedData['nat_spend'] = number_format( $resultV->nat_spend , 0);
            $exportData['nat_spend'] = $resultV->nat_spend ;
            $nestedData['hidden_national_spend'] = $resultV->nat_spend;
            $nestedData['hidden_local_spend'] = $resultV->loc_spend;
            $nestedData['local_spend'] = number_format($resultV->loc_spend, 0);
            $exportData['local_spend'] = $resultV->loc_spend;
            $nestedData['duration'] = $duration ? $duration : '-' ;
            $exportData['duration'] = $nestedData['duration'];
            $nestedData['hidden_network_code'] = $resultV->network_alias;
            $nestedData['hidden_airings'] = $resultV->airings ;
            $nestedData['hidden_program_count']  = $resultV->program_count;
            $exportData['program_count'] = $resultV->program_count;
            $data[] = $nestedData;
            $session_data[]  = $exportData;
        }
    }
    
    if($export == 1){
        return $session_data;
    }else{
        $json_data['rows']            = $data;
        $json_data['page']            = $page;
        $json_data['total']           = $total_pages;
        $json_data['records']         = $count; 
        $json_data['networks']        = $network_array;
        //$_SESSION['ad_network_list']  = $session_data;
        echo json_encode($json_data);
        exit;
    }
    
}

function dateFilterConditions($val,$sd,$ed){
    $date_filter_array = array();
     if($val == 1){
        //$date_range                                 = Slim_App_Lib_Common::getLastMediaWeek();
        $date_filter_array['where_date']            = " media_week_start = '$sd' AND media_week_end = '$ed'";
        $date_filter_array['calendar_type']         =  " AND calendar_type = 'W'";
        $date_filter_array['summary_calendar_type'] =  " AND s.calendar_type = 'W'";
        $date_filter_array['media_col']             = 'media_week';
        $date_filter_array['media_opt']             = 'media_week';
    }
    if($val == 2){
        //$date_range                                 = Slim_App_Lib_Common::getLastMediaMonth();
        $date_filter_array['where_date']            = " media_month_start >= '$sd' AND media_month_end <= '$ed'";
        $date_filter_array['calendar_type']         =  " AND calendar_type = 'M'";
        $date_filter_array['summary_calendar_type'] =  " AND s.calendar_type = 'M'";
        $date_filter_array['media_col']             = 'media_month';
        $date_filter_array['media_opt']             = 'media_month';
    }
    if($val == 5){
        $date_filter_array['where_date']            = " 1 = 1";
        $date_filter_array['calendar_type']         =  " AND calendar_type = 'W'";
        $date_filter_array['summary_calendar_type'] =  " AND s.calendar_type = 'W'";
        $date_filter_array['media_col']             = 'media_week';
    }
    if(strpos($val, '3_') !== false ){
        $date_range['sd']                           = $sd;
        $date_range['ed']                           = $ed;
        
        $date_filter_array['summary_calendar_type'] =  " AND calendar_type = 'W'";
        $valArr = explode('_', $val);
        $year = substr($valArr[2], 0, 4);
        
        $date_filter_array['calendar_type']         =  " AND calendar_type = 'W'";
        $date_filter_array['where_date']            = " media_qtr = {$valArr[1]} and media_year = {$year}";
        $date_filter_array['media_col']             = 'media_week';
        $date_filter_array['media_opt']             = 'media_qtr';
    }
    if(strpos($val, '4_') !== false ){
        $date_range['sd']                           = $sd;
        $date_range['ed']                           = $ed;
        
        $date_filter_array['summary_calendar_type'] =  " AND calendar_type = 'W'";
        $valArr = explode('_', $val);
        $year = substr($valArr[2], 0, 4);
        
        $date_filter_array['calendar_type']         =  " AND calendar_type = 'W'";
        $date_filter_array['where_date']            = " media_year = {$year}";
        $date_filter_array['media_col']             = 'media_week';
        $date_filter_array['media_opt']             = 'media_year';
    }
    return $date_filter_array;
}

function advBrandsList($export = 0,$request_data = null){
    $data = array();
    $nestedData=array();   
    $requestData = $raw_data = array();
    $nestedData=array();
    
    $db = getConnection();
    
    if($export){
        $requestData = $request_data;
    }else{        
        $request = Slim::getInstance()->request();
        $requestData = (array)(json_decode($request->getBody()));
        $sidx       = 'spend_index';
        $sord       = 'desc';
        $page       = 1;
        $limit      = 10;
    }

    $c                  = urldecode($requestData['c']);
    $tab                = $requestData['tab'];  
    $val                = $requestData['val'];
    $sd                 = $requestData['sd'];
    $ed                 = $requestData['ed'];
    $_resp_type         = urldecode($requestData['responseType']);
    $responseType       = "(".$_resp_type.")";
    $spanish            = urldecode($requestData['spanish']);
    $cat                = rtrim(urldecode($requestData['cat']),",");
    $cat                = rtrim($cat,"all,");
    $catIn              = '('.$cat.')';
    $brand_classification = '';
    $adv_id             = $requestData['adv_id'];
    $creative_durations = isset($requestData['creative_duration']) ? urldecode($requestData['creative_duration']) : '';
    $network_code       = isset($requestData['network_code']) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $network_id         = isset($requestData['network_id']) ? $requestData['network_id'] : '';
    $program_ids        = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $uncheckedCatIn     = isset($requestData['unchecked_cat']) ? urldecode($requestData['unchecked_cat']) : '';

    $unchecked_categoryArray = explode(',',$uncheckedCatIn);
    //  $categories         = !$cat || $cat == 'all' ? '' : ' AND cat.sub_category_id IN '.$catIn;
    
    $categories                 = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';
 
    $brand_classification       = '';
    
    $new_filter_opt         = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';

    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');

    $columns = array( 
        'id' => 'b.brand_id',
        'brand_name' =>  'b.brand_name', 
        'category_name' =>  'cat.category', 
        'creatives_count' => 'creative_count',
        'price' => 's.price',
        'airings' => 'airings',
        'spend_index' => 'spend_index',
        'hidden_spend_index' => 'spend_index',
        'national' => 'national',
        'local' => 'DPI',
        'asd' => 'asd',
        'networks' =>  'networks',
        'hidden_category'=>'category',
        'hidden_creatives'=>'creative_count',
        'hidden_airings' => 'airings',
        'tracking' => 'tracking'
        );
   
   
    if($c > 5){
        $cols = 'b.long_active is_brand_active,';
        $c_dir = 6;
    }else{
        $c_dir = 1;
        if(empty($network_code)) {
            $cols = 'b.short_active is_brand_active,';
        } else {
            $cols = 'b.short_active is_brand_active, round(100 * sum(if(d.breaktype="N", 1, 0)) / count(*)) national, round(100 * sum(if(d.breaktype="L", 1, 0)) / count(*)) local ,';
        }
    }
    
   $brand_classification  = getBrandClassification($c,$creative_durations);
   
   $_order_by                  = "spend_index desc";
     
    $params_brands['cols']                  = $cols;
    $params_brands['responseType']          = $responseType;
    $params_brands['spanish']               = $spanish;
    $params_brands['brand_classification']  = $brand_classification['brand_classification'];
    $params_brands['adv_id']                = $adv_id;
    $params_brands['sd']                    = $sd;
    $params_brands['ed']                    = $ed;
    $params_brands['categories']            = $categories;
    $params_brands['network_code']          = $network_code;
    $params_brands['network_id']            = $network_id;
    $params_brands['order_by']              = $_order_by;
    $params_brands['new_filter_opt']        = $new_filter_opt;
    $params_brands['program_ids']           = $program_ids;
    $params_brands['list_id_condition'] = "";

    
    if(!$export){
        $result = get_query_result('__queries_summary_display_advertiser_brands', $params_brands, 'FETCH_OBJ');
        
        $totalData = count($result);
        $count = $totalData;

        //Calculate paging related values $total_pages, $page
        if ($count > 0) {
            $total_pages = ceil($count / $limit);
        } else {
            $total_pages = 0;
        }

        if ($page > $total_pages) {
            $page = $total_pages;
        }

        //Calculate offset for dataQuery
        $offset = $limit * $page - $limit;

        if ($offset < 0) {
            $offset = 0;       
        }
    }else{
        $result = get_query_result('__queries_summary_display_advertiser_brands', $params_brands, 'FETCH_OBJ');
    }
   
    $user_access_type = userAccessInfo("filter");
    $result = reorderResultForRanking ($result);
    foreach($result as $resultK => $resultV){
        /*$excel_access = '<a id="export_loader_'.$resultV->brand_id.'" class="export-anchor" onclick=exportResults('.$resultV->brand_id.','.$c.',1,"'.$val.'","'.$sd.'","'.$ed.'","network"); custom-onlick=exportResults('.$resultV->brand_id.','.$c.',1,"'.$val.'","'.$sd.'","'.$ed.'","network");><img class="export-icon" src="/drmetrix/assets/img/export.png"></a>';

        if($user_access_type[0]['access_type'] == 'P' 
            && ($date_filters['media_opt'] == 'media_month' || $date_filters['media_opt'] == 'media_qtr' || $date_filters['media_opt'] == 'media_year' )){
            $excel_access = '<a id="export_loader_'.$resultV->brand_id.'" class="export-anchor"  ezmodal-target="#nobuttonsModal"><img class="export-icon" src="/drmetrix/assets/img/export.png"></a>';
        }*/
        $active_class = ($resultV->is_brand_active == 1) ? 'active_btn' : 'inactive_btn';
        
        $nestedData['id'] = $resultV->brand_id;
        $spendIndexCalculate['classification']  = $c;
        $is_adv_page = 0;
        // if($tab == 'adv') {
        //         $is_adv_page = 0;
        // } 
         $max_spend = setSessionForMaxSpend($is_adv_page);
     
    //    if(empty($network_code) && $export){
            // if( !isset($_SESSION['max_spend']) || $_SESSION['max_spend'] <= 0) {
            //     $max_spend = 1;
            // } else {
            //     $max_spend = $_SESSION['max_spend'];
            // }
        //    $nestedData['spend_index'] = round(($resultV->spend_index * 100 / $max_spend), 2);
            $spendIndexCalculate['projected_score'] = $resultV->spend_index;
            $spendIndexCalculate['sum']             = $max_spend;
            $resultV->spend_index                   = findSpendIndex($spendIndexCalculate);
            
    //    }else{
    //         $nestedData['spend_index'] = $resultV->spend_index;    
    //     //$nestedData['spend_index']               = findSpendIndex($spendIndexCalculate);
    //     }

        $nestedData['hidden_spend_index'] =findSpendIndex($spendIndexCalculate, 0);                  
        $nestedData['export_spend_index'] =  $resultV->spend_index ;          
       
        $nestedData['spend_index'] = $resultV->spend_index;
       
      
        $nestedData['national'] = isset($resultV->national) ? $resultV->national : '';
        $nestedData['local'] = isset($resultV->local) ? $resultV->local : '';
        $nestedData['asd'] = ($c == '6') ? ($resultV->asd/60).' m' :$resultV->asd.' sec';        
        $nestedData['networks'] = $resultV->networks ? $resultV->networks : '-' ;
        $nestedData['total_weeks'] = $resultV->total_weeks ? $resultV->total_weeks : 0 ;

        if($export){
           $nestedData['brand_name'] = $resultV->brand_name ? $resultV->brand_name : '-' ; 
           $nestedData['creatives_count'] = $resultV->creative_count ? $resultV->creative_count : 0;
           if(!in_array($resultV->main_sub_category_id , $unchecked_categoryArray)) {
                $nestedData['category_name'] = get_category_names_by_ids($resultV->main_sub_category_id, $resultV->alt_sub_category_id);
           } else {
                $nestedData['category_name'] = get_category_names_by_ids($resultV->alt_sub_category_id, $resultV->main_sub_category_id);
           }
           //$nestedData['category_name'] = isset($resultV->category) ? $resultV->category :  '-' ;
           $nestedData['airings'] = $resultV->airings ? $resultV->airings : 0 ;
           $nestedData['price'] = $resultV->price ?  $resultV->price : '0.00' ;
           $nestedData['is_brand_active'] = $resultV->is_brand_active;
        }else{
            //$nestedData['brand_name'] = $resultV->brand_name ? '<i class="fa fa-circle" id="'.$active_class.'"></i><span>'.$resultV->brand_name.'</span>' : '-' ;
            $nestedData['brand_name'] = $resultV->brand_name;
            $nestedData['creatives_count'] = $resultV->creative_count;
            if(!in_array($resultV->main_sub_category_id , $unchecked_categoryArray)) {
                $resultV->category = get_category_names_by_ids($resultV->main_sub_category_id, $resultV->alt_sub_category_id);
            } else {
                $resultV->category = get_category_names_by_ids($resultV->alt_sub_category_id, $resultV->main_sub_category_id);
            }
            $string = $resultV->category;
            if(strlen($resultV->category) > STRING_LENGTH){
                $string = substr($resultV->category, 0, 23).'...';
            }
         
            $nestedData['category_name'] = $resultV->category;
            $nestedData['airings'] = $resultV->airings;
            
            $nestedData['hidden_creatives'] = $resultV->creative_count;
            $nestedData['hidden_brand_name'] = $resultV->brand_name;
            $nestedData['hidden_category'] = $resultV->category;
            $nestedData['hidden_airings'] = $resultV->airings ;
            if(isTrackingPresent('brand', $resultV->brand_id)) {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->brand_id.',\''.addslashes($resultV->brand_name).'\');"><i class="fa fa-eye blue-eye" title="Track"></i></a>';
            } else {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->brand_id.',\''.addslashes($resultV->brand_name).'\');"><i class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
            }
        }
        $data[] = $nestedData;
    }

    if($export){
        return $data;
    }

   
    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count; 

    echo json_encode($json_data);

    exit;
}

function brandCreatives($export = 0,$request_data = null){
    $data           = array();
    $nestedData     =array();   
    $requestData = $raw_data = array();
    $data           = array();
    $nestedData     =array();           
    
    $db = getConnection();
    
    if($export){
        $requestData = $request_data;
    }else{  
        $request = Slim::getInstance()->request();
        $requestData = (array)(json_decode($request->getBody()));
        $sidx       = 'spend_index';
        $sord       = 'desc';
        $page       = 1;
        $limit      = 10;
    }

    $c                          = urldecode($requestData['c']);
    $tab                        = $requestData['tab'];  
    $val                        = $requestData['val'];
    $sd                         = $requestData['sd'];
    $ed                         = $requestData['ed'];
    $_resp_type                 = urldecode($requestData['responseType']);
    $responseType               = "(".$_resp_type.")";
    $spanish                    = urldecode($requestData['spanish']);
    $brand_id                   = $requestData['brand_id'];
    $network_id                 = isset($requestData['network_id']) ? $requestData['network_id'] : '';
    $creative_durations         = isset($requestData['creative_duration']) ? urldecode($requestData['creative_duration']) : '';
    $network_code               = isset($requestData['network_code']) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';

    if($c > 5){
        $c_dir = 6;
    }else{
        $c_dir = 1;
    }


    $max_spend = 0 ;
    //$order_by                   = ' airings desc';
    $brand_classification       = '';
    $new_filter_opt         = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
   
    $cols                       = $c > 5 ? ', ' : ', SUM(d.'.RATE_COLUMN.') as spend_index, ROUND(SUM(d.'.RATE_COLUMN.'), 0) AS total_spend, round(100 * sum(if(d.breaktype="N", 1, 0)) / count(*), 0) national, round(100 * sum(if(d.breaktype="L", 1, 0)) / count(*), 0) local,';
    
    $_order_by                  = "spend_index desc";
    $brand_classification  = getBrandClassification($c,$creative_durations);

    $params_brand_creatives['spanish']              = $spanish;
    $params_brand_creatives['network_code']         = $network_code;
    $params_brand_creatives['network_id']           = $network_id;
    $params_brand_creatives['responseType']         = $responseType;
    $params_brand_creatives['sd']                   = $sd;
    $params_brand_creatives['ed']                   = $ed;
    $params_brand_creatives['brand_classification'] = $brand_classification['brand_classification'];
    $params_brand_creatives['cols']                 = $cols;
    $params_brand_creatives['brand_id']             = $brand_id;
    $params_brand_creatives['order_by']             = $_order_by;
    $params_brand_creatives['new_filter_opt']       = $new_filter_opt;
    $params_brand_creatives['program_ids']          = $program_ids;
  
   $result = get_query_result('__queries_display_brand_creatives', $params_brand_creatives, 'FETCH_OBJ');
    if(!$export){
        $totalData = count($result);
        $count = $totalData;

        //Calculate paging related values $total_pages, $page
        if ($count > 0) {
          $total_pages = ceil($count / $limit);
        } else {
          $total_pages = 0;
        }

        if ($page > $total_pages) {
          $page = $total_pages;
        }

        //Calculate offset for dataQuery
        $offset = $limit * $page - $limit;

        if ($offset < 0) {
          $offset = 0;       
        }
    }
    $network_code_grid = 0;
    $result = reorderResultForRanking ($result); 
    if(!empty($result)) {
        foreach($result as $resultK => $resultV){
            //  if($rank==0) { $spend_index = $resultV->spend_index; $_SESSION['max_spend'] = $resultV->total_spend; }
      
              $creative_ids[] = $resultV->creative_id;
              $ResTypeImg = '<span class="response_img">';
                   if($resultV->response_url == 1){
                   $ResTypeImg .= '<a href="#" title="URL"><img src="/drmetrix_angular_clean/assets/images/url-icon.svg" alt="URL" /></a>';
                   $nestedData['response_url'] = $resultV->response_url;
               }
                   if($resultV->response_sms == 1){
                   $ResTypeImg .= '<a href="#" title="SMS"><img src="/drmetrix_angular_clean/assets/images/sms-icon.svg" alt="SMS" /></a>';
                   $nestedData['response_sms'] = $resultV->response_sms;
               }
                   if($resultV->response_tfn == 1){
                   $ResTypeImg .= '<a href="#" title="Telephone"><img src="/drmetrix_angular_clean/assets/images/telephone-icon.svg" alt="Telephone" /></a>';
                   $nestedData['response_tfn'] = $resultV->response_tfn;
               }
                   if($resultV->response_mar == 1){
                   $ResTypeImg .= '<a href="#" title="Mobile"><img src="/drmetrix_angular_clean/assets/images/mobile-icon.svg" alt="Mobile" /></a>';
                   $nestedData['response_mar'] = $resultV->response_mar;
               }
                  $ResTypeImg .= '</span>';
                  
            $active_class = ($resultV->is_active == 1) ? 'active_btn' : 'inactive_btn';
            
            $u = $resultV->length <= LENGTH ? 'short' : 'long';
            
            if($resultV->length <= LENGTH ){
               $u = 'short'; 
               $national = $resultV->national;
               $local = $resultV->local;
               $airings = $resultV->airings;
               $duration = $resultV->length.' sec';
            }else{
               $u = 'long'; 
               $national = 'NA';
               $local = 'NA';
               $airings = $resultV->airings;
               $duration = ($resultV->length/60).' m';
            }
            $price = getCreativePrice($resultV->price, $resultV->payments);
            $url_creative = "/drmetrix/creativeDetail/".$resultV->creative_id."/".$u."/browse/";
            $creative_type = $resultV->type  ;
            $creative_cls =   $creative_type  ?   $creative_type . ' - ' . $resultV->class  :   $resultV->class ;
            $nestedData['id'] = $resultV->creative_id;
            
            $spendIndexCalculate['classification']  = $c;  
         
          $max_spend = setSessionForMaxSpend($requestData['is_adv_page']);
       
          $spendIndexCalculate['projected_score'] = $resultV->total_spend;
          $spendIndexCalculate['sum']             = $max_spend;
          $nestedData['spend_index']              = $spend_index = $resultV->spend_index = findSpendIndex($spendIndexCalculate);
          $resultV->hidden_spend_index            = findSpendIndex($spendIndexCalculate , 0);
          
            if($tab == 'adv_brand'){
                $nestedData['brand_name'] =  $resultV->brand_name;
            }
              $nestedData['classification'] = $creative_cls ? $creative_cls : '-' ;
              $nestedData['duration'] = $duration ? $duration: '-' ;
              $nestedData['price'] = $price;
              $nestedData['national'] = $national;
              $nestedData['local'] = $local ;
              $nestedData['response_type'] = $ResTypeImg ;
              $nestedData['first_detection'] = $resultV->first_aired_date ? $resultV->first_aired_date : '-' ;
              if(!empty($nestedData['first_detection']))
                $nestedData['first_detection'] = date('m-d-Y h:i A', strtotime($nestedData['first_detection']));
              $nestedData['last_aired'] = $resultV->last_aired_date ? $resultV->last_aired_date : '-' ;
                if(!empty($nestedData['last_aired']))
                $nestedData['last_aired'] = date('m-d-Y h:i A', strtotime($nestedData['last_aired']));
              if($resultV->spanish_creative_count == $resultV->total_creative_count) {
                  $nestedData['language'] = 'ES';
              } else {
                  $nestedData['language'] = 'EN';
              }
      
            if($export){
              $nestedData['creative_name'] = $resultV->creative_name;
              $nestedData['airings'] = $airings  ? $resultV->airings : '-' ; //number_format($resultV->airings)
              $nestedData['spend_index'] = $resultV->spend_index  ? $resultV->spend_index : '-' ; //number_format($resultV->airings)
              $nestedData['hidden_spend_index']  =  $resultV->hidden_spend_index != '' ? $resultV->hidden_spend_index : '-' ;
              $nestedData['video'] = base64_encode("creative_id=".$resultV->creative_id."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($network_code));
            }else{
              if($requestData['is_adv_page'] == 1) {
                  $nestedData['status']        = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
                  $nestedData['creative_name'] = $resultV->creative_name;
              } else {
                  $nestedData['creative_name'] = $resultV->creative_name;
              }
              $nestedData['hidden_creative_name'] = $resultV->creative_name;
              $creative_name = "'".addslashes(htmlspecialchars($resultV->creative_name.' - '.$nestedData['duration']))."'";
              $brand_name = "'".addslashes($resultV->brand_name)."'";
              $adv_name = "'".addslashes($resultV->display_name)."'";
              $nestedData['airings'] = $resultV->airings;
              $nestedData['hidden_spend_index']  =    $resultV->hidden_spend_index != '' ? $resultV->hidden_spend_index : 0 ;
      
              // if($c > 5) {
              //     $nestedData['spend_index'] = $resultV->spend_index ? : 0;
              // }else {
                  $nestedData['spend_index'] = $resultV->spend_index;
              //}
              $nestedData['thumbnail'] = $resultV->thumbnail;
              if(!$resultV->thumbnail){
                 $nestedData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
              }else{
                 $nestedData['video'] = '<a href="#basicModalCamp"><i class="fa fa-play-circle-o fa-2x" onclick="playvideo('.$resultV->thumbnail.',\''.$sd.'\',\''.$ed.'\',\''.$network_code_grid.'\',\'none\')"></i></a>';
              }
            }
            $nestedData['hidden_airings']     = $resultV->airings;
            $nestedData['total_spend']        = $resultV->total_spend;
            $data[] = $nestedData;
          }
    }
 
    if (!empty($network_code)) {
        $creative_ids = implode(',', $creative_ids);
        $params['creative_ids'] = $creative_ids;
        $params['network_code'] = $network_code;
        $params['network_id']   = $network_id;
        $result = get_query_result('__queries_get_last_aired_date', $params);

        $creative_ids = array();
        foreach ($result as $value) {
            $creative_id = $value['creative_id'];
            $creative_ids[$creative_id] = $value['last_aired_date'];
        }
        
        foreach ($data as $key => $value) {
            $creative_id = $value['id'];
            
            if (empty($creative_ids[$creative_id])) {
                $creative_ids[$creative_id] = '';
            }

            $data[$key]['last_aired'] = $creative_ids[$creative_id];
        }
    }

    if($export){
        return $data;
    }

    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count; 

    echo json_encode($json_data); 
}

function networkBrandCreatives($requestData = null){

    //$requestData                        = array();
    $requestData['unchecked_category']  = 0;
    $requestData['length_unchecked']    = 0;
    $requestData['skip_category_clause']= 1;
    $requestData['type']                = 3;
    $requestData['creative_ids']        = $requestData['brandOrCrId']; 
    $brand_array                        = getArrayForNetworkTab($requestData, '__query_get_airings_for_creative_brands_networks');

    $network_array                      = $requestData['network_array'];
    $sd                                 = $requestData['sd'];
    $ed                                 = $requestData['ed'];
    $val                                = $requestData['val'];
    $c                                  = urldecode($requestData['c']);
    $type                               = $requestData['type'];
    $tab                                = $requestData['tab'];
    $count                              = count($brand_array);
   
    $sum = 0;
   
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
             $sum += $nw_arr[ 'projected_score' ];
        }
       
    }
    
    $sum = $requestData['total_spend'];
    $spendIndexCalculate['classification']  = $c;
    if ($tab == "brand") {

        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = $value['_creatives_']['Spend Index'];
            $nestedData['Airings'.'_airings']  = $value['_creatives_']['Airings'];
            foreach($value as $nw => $nw_arr){
                $nestedData['Creative']                 = $nw_arr['name'];
                $nestedData['language']                 = $nw_arr['spanish'] == 0 ? 'EN' : 'ES';
                $nestedData['thumbnail']                = $nw_arr['thumbnail'];
                //$projected_score                        = round($nw_arr['projected_score']*100/$sum,2);

                $spendIndexCalculate['projected_score'] = $nw_arr['projected_score'];
                $spendIndexCalculate['sum']             = $sum;
                $projected_score                        = findSpendIndex($spendIndexCalculate);
                //$projected_score                        = custom_round($nw_arr['projected_score']*100/$sum);
                $nestedData[$nw.'_spend_index']         =  findSpendIndex($spendIndexCalculate, 0);
                $nestedData[$nw.'_airings']             = $nw_arr['airings'] ? $nw_arr['airings'] : '0' ;
                $nestedData['Video']                    = $nw_arr['thumbnail'] ? base64_encode("creative_id=".$nw_arr['thumbnail']."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode(implode(',', $network_array))) : '';  
            }

            $data[]                     = $nestedData;
        }
    }else{
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = $value['_creatives_']['Spend Index'];
            $nestedData['Airings'.'_airings']  = $value['_creatives_']['Airings'];
            foreach($value as $nw => $nw_arr){
                $nestedData['Creative']                 = $nw_arr['name'];
                $nestedData['language']                 = $nw_arr['spanish'] == 0 ? 'EN' : 'ES';
                $nestedData['thumbnail']                = $nw_arr['thumbnail'];
                //$projected_score                        = round($nw_arr['projected_score']*100/$sum,2);
               // $projected_score                        = custom_round($nw_arr['projected_score']*100/$sum);
               $spendIndexCalculate['projected_score']  = $nw_arr['projected_score'];
               $spendIndexCalculate['sum']              = $sum;
               $projected_score                         = findSpendIndex($spendIndexCalculate);
                $nestedData[$nw.'_spend_index']         =  findSpendIndex($spendIndexCalculate, 0);
                $nestedData[$nw.'_airings']             = $nw_arr['airings'] ? $nw_arr['airings'] : '0' ;
                $nestedData['Video']                    = $nw_arr['thumbnail'] ? base64_encode("creative_id=".$nw_arr['thumbnail']."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode(implode(',', $network_array))) : '';  
            }

            $data[]                     = $nestedData;
        }
    }
    $json_data['rows']      = $data;
    
    return $json_data; 
}

function getAdvAiringsBrandsWithNetworks($export = 0,$requestData){
    //$requestData = array();
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    $requestData['skip_category_clause'] = 0;    
//    print_r($requestData); exit;
//    if (isset($requestData['brandOrCrId'])) {
    $requestData['brands_ids']  =   $requestData['brandOrCrId'];
        $brand_array = getArrayForNetworkTab($requestData, '__query_get_brands_for_creative_advertiser_networks');
//    }
//    else {
//        $brand_array = getArrayForNetworkTab($requestData, '__query_get_airings_brands_networks');
//    }


    $network_array = $requestData['network_array'];
    $sd     = $requestData['sd'];
    $ed     = $requestData['ed'];
    $val    = $requestData['val'];
    $c      = urldecode($requestData['c']);
    $tab    = $requestData['type'];
   
    
    $sum = 0;
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
            $sum += $nw_arr[ 'projected_score' ];
        }
       
    }
    
    $sum = $requestData['total_spend'];

    if($tab == 1){
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = $value['_creatives_']['Spend Index'];
            $nestedData['Airings'.'_airings']  = $value['_creatives_']['Airings'];
            $nestedData['advertiser_name']  = $value['_creatives_']['name'];
            $nestedData['Brand']            = $value['_creatives_']['name'];
            $nestedData['Creative_ids']     = $brand_array[$key]['_creatives_']['creative_ids'];

            foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);
                    $projected_score = round($nw_arr['projected_score']*100/$sum,2);
                    $nestedData[$nw.'_spend_index']     = $projected_score ? $projected_score : '0' ;
                    $nestedData[$nw.'_airings']     = $nw_arr['airings'] ? number_format($nw_arr['airings']) : '0' ;
                    //$nestedData[$nw.'_spend_index_hidden'] = $projected_score;
                    //$nestedData[$nw.'_airings_hidden']     = intval(strip_tags($nestedData[$nw.'_airings']));
                }
            }

            $_creatives_                = $brand_array[$key]['_creatives_'];
            $nestedData['Creatives']    = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            $nestedData['Brands']       = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            //$nestedData['id']           = $_creatives_['id'];
            //$nestedData['_creative_count_hidden']     = intval(strip_tags($nestedData['Creatives']));
            //$nestedData['Hidden_creatives_count'] = $_creatives_['creative_count'];

            $data[]                     = $nestedData;
        }
    }
    else{
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = $value['_creatives_']['Spend Index'];
            $nestedData['Airings'.'_airings']  = $value['_creatives_']['Airings'];
            $nestedData['advertiser_name']  = $value['_creatives_']['name'];
            $nestedData['Brand']            = $value['_creatives_']['name'];
            $nestedData['Brands_ids']     = $brand_array[$key]['_creatives_']['creative_ids'];

            foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);
                    $projected_score = round($nw_arr['projected_score']*100/$sum,2);
                    $nestedData[$nw.'_spend_index']         = $projected_score;
                    $nestedData[$nw.'_airings']             = number_format($nw_arr['airings']);
                    $nestedData[$nw.'_spend_index_hidden']  = $projected_score;
                    $nestedData[$nw.'_airings_hidden']      = $nw_arr['airings'];
                }
            }

            $_creatives_                = $brand_array[$key]['_creatives_'];
            $nestedData['Creatives']    = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            $nestedData['Brands']       = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            $nestedData['id']           = $_creatives_['id'];
//            $nestedData['_creative_count_hidden']     = intval(strip_tags($nestedData['Creatives']));
//            $nestedData['Hidden_creatives_count'] = $_creatives_['creative_count'];
            $data[]                     = $nestedData;
        }
    }
    $json_data['rows']      = $data;
//    $json_data['page']      = $page;
//    $json_data['records']   = $count;
    return $json_data;
   
}

function getCreativePrice($price, $payments){
    if($price == NULL || $price == ''){
            $price = 'Lead Generation';
    }
    else if($payments == 'Infinite'){
        $price  = $price;
    }else{
        $price = $payments.' of $'. $price;
    }
    
    return $price;
}

function creativesNetworks($export = NULL, $request = NULL){
    $data = $result = $forExport= array();
    $nestedData=array();  
    $network_arr = array(); 
    $requestData = $raw_data = array();
    
    $db = getConnection();
    if($export == 1){
        $requestData = $request;
    }else{
        $request = Slim::getInstance()->request();
        $query_string = $request->getBody();
        parse_str($query_string, $output);
        $requestData = (array)json_decode($query_string, TRUE);
    }

    if(isset($requestData['sidx']) && isset($requestData['sord'])){
        $sidx           = $requestData['sidx'];
        $sord           = $requestData['sord'];
    }

    if(is_null($export)){
        $page           = $requestData['page'];
        $limit          = $requestData['rows'];
    }
    
    $classification = urldecode($requestData['c']);
    $tab            = $requestData['tab'];  
    $val            = $requestData['val'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $responseType   = "(".urldecode($requestData['responseType']).")";
    $spanish        = urldecode($requestData['spanish']);
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $where_category = $tab_condition = '';
    // $order_by       = ' airings DESC ';
    $tab_condition  = " d.brand_id = ".$requestData['brand_id'];
    $creative_durations         = urldecode($requestData['creative_duration']);
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $hours                  = isset($_POST['hour']) ? $_POST['hour'] : '';
    $dayparts               = isset($_POST['dayparts']) ? $_POST['dayparts'] : '' ;
    $days                   = isset($_POST['day']) ? $_POST['day'] : '' ;
    if($export == 1){
        $hours                  = isset($requestData['hour']) ? $requestData['hour'] : '';
        $dayparts               = isset($requestData['daypart']) ? $requestData['daypart'] : '' ;
        $days                   = isset($requestData['day']) ? $requestData['day'] : '' ;
    }
    $day_string             = is_array($days) ? implode_call($days)     : $days;
    $hours_string           = is_array($hours)    ? implode_call($hours)    : $hours;
    $dayparts_string        = is_array($dayparts)    ? implode_call($dayparts)    : $dayparts;
     
    if(!empty($cat)){
        $category= categorySqlCallForCreative($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 

    if($tab == 'adv'){
        $columns = array( 
            'creative_name' => 'c.creative_name',
            'brand_name'  => 'b.brand_name',
            'first_aired' => 'c.first_detection',
            'last_aired' => 'c.last_aired',
            'duration' => 'c.length',
            'airings' => 'airings',
            'category_name' => 'cat.category',
            'hidden_airings' => 'airings',
            'total_spend' => 'total_spend',
            'hidden_total_spend' => 'total_spend',
            'hidden_program_count' => 'program_count'
        );
    }else{
        $columns = array( 
            'creative_name' => 'c.creative_name',
            'first_aired' => 'c.first_detection',
            'last_aired' => 's.last_aired',
            'duration' => 'c.length',
            'airings' => 'airings',
            'total_spend' => 'total_spend',
            'hidden_airings' => 'airings',
            'hidden_total_spend' => 'total_spend',
            'hidden_program_count' => 'program_count'
        ); 
    }
    $order_by       =   $columns[$sidx] ." ".$sord ;
    
//    $conditions     = getFilterConditions($tab,$classification);
    $brand_classification  = getBrandClassification($classification,$creative_durations);
    $network_info = getNetworkCodeById($requestData['network_id']);
    $params_network_creatives['start_date']           = $sd;
    $params_network_creatives['end_date']             = $ed;
    $params_network_creatives['responseType']         = $responseType;
    $params_network_creatives['spanish']              = $spanish;
    $params_network_creatives['network_id']           = $requestData['network_id'];
    $params_network_creatives['network_code']         = (!empty($network_info)) ? $network_info[0]->network_code : $requestData['network_code'];
    $params_network_creatives['classification']       = $classification;
//    $params_network_creatives['cr_type']              = $conditions['cr_type'];
    $params_network_creatives['tab_condition']        = $tab_condition;
    $params_network_creatives['where_category']       = $where_category;
    $params_network_creatives['order_by']             = $order_by;
    $params_network_creatives['brand_classification']  = $brand_classification['brand_classification'];
    $params_network_creatives['new_filter_opt']        = $new_filter_opt;
    $params_network_creatives['breaktype']             = $requestData['breaktype'];
    $params_network_creatives['network_id']            = $requestData['network_id'];
    $params_network_creatives['program_ids']           = $program_ids;
    $params_network_creatives['hours']                 = $hours_string;
    $params_network_creatives['dayparts']              = $dayparts_string;
    $params_network_creatives['days']                  = $day_string;

    $result     = get_query_result('__queries_display_network_creatives_sql',$params_network_creatives, 'FETCH_OBJ');
    // $result     = reorderResultForRanking ($result);
    if(is_null($export)){
        $totalData  = count($result);
        $count      = $totalData;
        if ($count > 0) {
            $total_pages = ceil($count / $limit);
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages) {
            $page = $total_pages;
        }
        //Calculate offset for dataQuery
        $offset = $limit * $page - $limit;
        if ($offset < 0) {
            $offset = 0;       
        }
    }

    if(!empty($result)){
        foreach($result as $k => $v){
            if(!in_array($v->network_code,$network_arr)){
                array_push($network_arr,$v->network_code);
            }
        }
        $nw = "'" . implode("','",$network_arr);

        //find national aggregate and local aggregate
        if(!empty($result)){
            foreach($result as $r1 => $r2){
                $national = ($r2->nat*100)/$r2->total_airings;
                $local = ($r2->loc*100)/$r2->total_airings;
                $r2->national_percent = number_format($national,0);
                $r2->local_percent = number_format($local,0);
            }
        }
    }
    
    if(!empty($result)){
        foreach($result as $resultK => $resultV){
            $creative_ids[] = $resultV->creative_id;
           $ResTypeImg = '<span class="response_img">';
            if($resultV->response_url == 1){
                $ResTypeImg .= '<a href="#" title="URL"><img src="/drmetrix_angular_clean/assets/images/url-icon.svg" alt="URL" /></a>';
                $nestedData['response_url'] = $resultV->response_url;
            }
            if($resultV->response_sms == 1){
                $ResTypeImg .= '<a href="#" title="SMS"><img src="/drmetrix_angular_clean/assets/images/sms-icon.svg" alt="SMS" /></a>';
                $nestedData['response_sms'] = $resultV->response_sms;
            }
            if($resultV->response_tfn == 1){
                $ResTypeImg .= '<a href="#" title="Telephone"><img src="/drmetrix_angular_clean/assets/images/telephone-icon.svg" alt="Telephone" /></a>';
                $nestedData['response_tfn'] = $resultV->response_tfn;
            }
            if($resultV->response_mar == 1){
                $ResTypeImg .= '<a href="#" title="Mobile"><img src="/drmetrix_angular_clean/assets/images/mobile-icon.svg" alt="Mobile" /></a>';
                $nestedData['response_mar'] = $resultV->response_mar;
            }
               $ResTypeImg .= '</span>';
           $airings = $resultV->airings;
           $t = ($resultV->length <= LENGTH ) ? 'short' : 'long';
           $nestedData = $exportData = array();           
           $nestedData['id'] = $exportData['id'] =  $resultV->creative_id;
           if($tab == 'adv'){
                $nestedData['brand_name'] = $exportData['brand_name'] =  $resultV->brand_name;
           }
            //  $nestedData['response_type'] =  $ResTypeImg ;
           $nestedData['creative_name'] = $exportData['creative_name'] =  $resultV->creative_name;
           $exportData['program'] =  $resultV->program_count;
           $nestedData['hidden_airings'] = $exportData['hidden_airings'] =  $resultV->airings;
           $nestedData['total_spend'] = number_format($resultV->total_spend, 0);
           $nestedData['hidden_total_spend'] = $resultV->total_spend;
           $nestedData['hidden_national_spend'] = $resultV->national_spend;
           $nestedData['hidden_local_spend'] = $resultV->local_spend;
           $nestedData['national_spend'] = number_format($resultV->national_spend, 0);
           $nestedData['local_spend']    = number_format($resultV->local_spend , 0);
           $nestedData['language']       = $exportData['language'] =  ($resultV->spanish == 0) ? 'EN' : 'ES';
           $nestedData['dpi']       = $resultV->dpi;
           
           $creative_type = $resultV->type  ;
           $creative_cls =   $creative_type  ?   $creative_type . ' - ' . $resultV->class  :   $resultV->class ;
           $nestedData['classification'] = $exportData['classification'] =  $creative_cls;
           $exportData['program']  = $resultV->program_count;
           if($t == 'long'){
               $nestedData['duration'] = $exportData['duration'] = $resultV->length ? ($resultV->length/60).' m' : '-';
           }else{
                $nestedData['duration'] = $exportData['duration'] = $resultV->length ? $resultV->length.' sec' : '-';
           }  
           
           $nestedData['program_count'] =  $resultV->program_count;
           $nestedData['hidden_program_count']  = $resultV->program_count;
           $dpi = 0;
           if($export == 0) {
                if($requestData['dpi'] != '' && $requestData['dpi'] != '-') {
                    $dpi = 1;
                }
                $nestedData['airings'] = number_format($airings);
           }

           $exportData['airings'] = $airings ? $airings : '-';
           $exportData['total_spend'] = $resultV->total_spend ? $resultV->total_spend : '-';
           $exportData['national_spend'] = $resultV->national_spend ;
           $exportData['local_spend'] = $resultV->local_spend;
           $nestedData['national'] = $exportData['national'] = isset($resultV->national_percent) ? $resultV->national_percent : '-';
           $nestedData['local'] = $exportData['local'] = isset($resultV->local_percent) ? $resultV->local_percent : '-';
           $nestedData['first_aired'] = $exportData['first_aired'] = $resultV->first_aired_date ? $resultV->first_aired_date : '-' ;
           $nestedData['last_aired'] = $exportData['last_aired'] = $resultV->last_aired_date ? $resultV->last_aired_date : '-' ;
           $nestedData['national_count'] = $exportData['national_count'] = isset($resultV->nat) ? $resultV->nat : '-';
           $nestedData['local_count'] = $exportData['local_count'] = isset($resultV->loc) ? $resultV->loc : '-';
            if(!$resultV->thumbnail){
                $nestedData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
                $exportData['video'] = $nestedData['video'];
           }else{
                $nestedData['video'] = '<a href="#basicModalCamp"><i class="fa fa-play-circle-o fa-2x" onclick="playvideo('.$resultV->thumbnail.', \''.$sd.'\', \''.$ed.'\',\''.$network_info[0]->network_code.'\',\'network_detail\')"></i></a>';
                 $exportData['video'] = base64_encode("creative_id=".$resultV->thumbnail."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($resultV->network_code));
           }
           $data[] = $nestedData;
           $forExport[] = $exportData;
        }

        //if(is_null($export)){
            $creative_ids = implode(',', $creative_ids);
            $params['creative_ids'] = $creative_ids;
            $params['network_code'] = $network_info[0]->network_code;
            $params['breaktype'] = $requestData['breaktype'];
            $params['network_id']           = $requestData['network_id'];
            $result = get_query_result('__queries_get_last_aired_date_with_breaktype', $params);
            $creative_ids = array();
            foreach ($result as $value) {
                $creative_id = $value['creative_id'];
                $creative_ids[$creative_id] = $value['last_aired_date'];
            }
            foreach ($data as $key => $value) {
                $creative_id = $value['id'];
                
                if (empty($creative_ids[$creative_id])) {
                    $creative_ids[$creative_id] = '';
                }

                $data[$key]['last_aired'] = $forExport[$key]['last_aired'] = $creative_ids[$creative_id];
            }
        //}
        
    }    

    if($export == 1){
        return $forExport;
    }else{
        $json_data              = array();
        $json_data['rows']      = $data;
        $json_data['page']      = $page;
        $json_data['total']     = $total_pages;
        $json_data['records']   = $count; 
        echo json_encode($json_data);
        exit;
    }
    
}

function getSpendGraph2(){
    $data = $result = array();
    $records = array();
    $nestedData=array(); 
    $requestData = $raw_data = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    

    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $responseType   = urldecode($requestData['responseType']);
    $new_filter_opt = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $spanish        = urldecode($requestData['spanish']);
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $val            = $requestData['val'];
    $tab            = $requestData['tab'];   
    $nw_code        = urldecode(addslashes($requestData['code']));
    $network_id     = $requestData['network_id'];
    $classification = urldecode($requestData['c']);
    $creative_id    = $requestData['creative_id'];
    $graph_color    = trim(urldecode($requestData['dp_color']));
    $dp_color       = $graph_color == '#3064a0' ? 'loc_airings' : 'nat_airings';
    $day_short      = $requestData['day_short'];
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $where_category = '';
    $creative_durations         = urldecode($requestData['creative_duration']);
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $append_sign = '';
    
    if(!empty($cat)){
        $category= categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    } 

    if($graph_color == '#3064a0'){
        $type = 'DPI';
    }else{
        $type = 'National';
    }
    
    
    if($creative_id != '') { 
        $groupBy                    = 'creative_id';
        $where_condition            = 'd.creative_id = '.$requestData['creative_id'];
        $minDetectionDateCondition  = 'creative_id = '.$requestData['creative_id'];
        
    } else {
        $where_condition            = 'c.brand_id = '.$requestData['brand_id'];
        $minDetectionDateCondition  = 'brand_id = '.$requestData['brand_id'];
        $groupBy                    = 'brand_id';
    }
    
  
    if($tab == 'brand'){
        $tab = 1;
    }else{
        $tab = 0;
    }
    
    $time_arr = explode("-",$requestData['time']);
    $d0 = str_replace("%3A",":",$time_arr[0]);
    $d01 = str_replace("+"," ",$d0);
 
    $d1 = str_replace("%3A",":",$time_arr[1]);
    $d11 = str_replace("+"," ",$d1);

    $start_24 = date("H:i:s", strtotime($d01));
    $end_24 = date("H:i:s", strtotime($d11));
  
    $rosTime = $start_24.'-'.$end_24;
    
//    $conditions = getFilterConditions($tab,$classification);
    $brand_classification  = getBrandClassification($classification,$creative_durations);
   
    $params['network_string']               = "'".$nw_code."'";
    $params['network_id']                   = $network_id;
    $params['minDetectionDateCondition']    = $minDetectionDateCondition;
    $params['groupBy']                      = $groupBy;
    
    $first_detection_result   = get_query_result('__queries_get_brand_first_detection', $params, 'FETCH_OBJ');
    
    $first_detection_date           = isset($first_detection_result[0]->first_detection_date) ? date('Y-m-d',strtotime($first_detection_result[0]->first_detection_date)) : LIFETIME_START_DATE;
     
    if($val == 5 || (strpos($val, "4_") !== false)){
            $date_range_arr['min_date'] = $sd;
            $date_range_arr['max_date'] = $ed;
            $date_range_arr['str_date'] = isset($first_detection_result[0]->first_detection_date) ? substr($first_detection_result[0]->first_detection_date, 0, -9) : LIFETIME_START_DATE;
            
        }else {
            $date_week_start_end_date =  getDatesForTrendGraph($requestData['ed']);
            $date_range_arr = $date_week_start_end_date;

        }
    $prevDates                                  = getPreviousDates('week', 1, customDate(), '');
    $params_airings['classification']           = $classification;
    $params_airings['sd']                       = $sd;
    $params_airings['ed']                       = $ed;
    $params_airings['responseType']             = "(" .$responseType .")";
    $params_airings['where_category']           = $where_category;
    $params_airings['spanish']                  = $spanish;
    $params_airings['where_condition']          = $where_condition;
    $params_airings['nw_code']                  = $nw_code;
    $params_airings['network_id']               = $network_id;
    $params_airings['day_short']                = $day_short;
    $params_airings['rosTime']                  = $rosTime;
//    $params_airings['cr_type']                  = $conditions['cr_type'];
    $params_airings['max_date']                 = $prevDates['max_date'];
    $params_airings['first_detection_date']     = $first_detection_date;
    $params_airings['brand_classification']     = $brand_classification['brand_classification'];
    $params_airings['new_filter_opt']           = $new_filter_opt;
    $params_airings['checked_network_graph_opt'] = $requestData['checked_trend'];
    $params_airings['program_ids']               = $program_ids;

    $append_sign = '';
    if( $requestData['checked_trend'] == 'spend_index') {
        $append_sign = '$';
    }
    
    $creative_result  = get_query_result('__queries_airings_trend_sql', $params_airings, 'FETCH_OBJ'); 
    
    $records['name'] = $type;
    $records['color'] = ($type == 'National') ? '#cd3b36' : '#3064a0';
   
    
    if(!empty($creative_result)){
        foreach($creative_result as $k => $v){
            $color = ($graph_color == '#3064a0') ? 'sum_loc' : 'sum_nat';
            if(!$v->$color){
                unset($creative_result[$k]);
            }else{
                break;
            }
        }
        //</br><span><u>Airings</u></span>&nbsp;&nbsp;<span><u>Spend</u></span></br><span class=".$style."></span><b>$type :</b><i style='font-weight: normal;'>" .number_format($v->$color , 0).' &nbsp;&nbsp;' .'$'.number_format($v->$spend_color , 0).'</i>
        $color = ($graph_color == '#3064a0') ? 'sum_loc' : 'sum_nat';
        $spend_color = ($graph_color == '#3064a0') ? 'sum_loc_spend' : 'sum_nat_spend';
        foreach($creative_result as $k => $v){
            $style = ($color == 'sum_nat') ? 'tooltip-national' : 'tooltip-local';
            $tooltip = "<b>Week #".$v->media_week."</b></br><i style='font-weight: normal;'><b>From</b> ". getFormattedDate($v->media_week_start, "m/d/Y").' <b>thru</b> '. getFormattedDate($v->media_week_end, "m/d/Y") . "</i>";

             $week_header = '<div class="outer-tooltips" style=" position: relative; top: 24px; height: 55px;">
                    <span class="inner-tooltips" style=" position: relative; right: 0; top: 4px; text-align: center;font-size: 12px;">
                        <span class="'.$style.'"></span>
                        <b>'.$type.'</b>:
                    </span>
                    <p style="position: relative; left: 55px; top: -35px; text-align: center; margin: 0; font-size: 12px; width: 100px;">
                        <u>Airings</u>
                        <br>'.number_format($v->$color , 0).'
                    </p>
                    <p class="inner-tooltips" style=" position: relative; left: 125px; top: -73px; text-align: center; margin: 0; font-size: 12px; width: 100px;">
                        <u>Spend</u>
                        <br>$'.number_format($v->$spend_color , 0).'
                    </p>
                </div>
                ';
             $tooltip = $tooltip . $week_header;
             if( $requestData['checked_trend'] == 'spend_index') {
                $records['data'][] = array('x' => $v->date_end, 'y' => $v->$spend_color, 'tooltip' => $tooltip);
             } else {
                $records['data'][] = array('x' => $v->date_end, 'y' => $v->$color, 'tooltip' => $tooltip);
             }
        }
    }
    
    $result = array();
    $result['data'][] = $records;
    $result['date'] = $date_range_arr;
   
    echo json_encode($result,JSON_NUMERIC_CHECK);  
}
function getLastWeek () {
    $db = getConnection();
    
    $date = customDate('Y-m-d');
    
    $media_type_count   = "SELECT media_week, media_week_start, media_week_end FROM `media_calendar` WHERE  `media_week_start` <= '$date' AND `media_week_end` >= '$date'";
    $media_count_result = execute_query_get_result($media_type_count, 'FETCH_OBJ');
    /*
    $stmt = $db->prepare($media_type_count);
    $stmt->execute();
    $media_count_result = $stmt->fetchAll(PDO::FETCH_OBJ);
    */
    
    return $media_count_result[0];
}

 function getMediaMonthEndDate() {
    $db = getConnection();
    //current month - 1
    $selectMonth = "SELECT media_week,media_month,media_year  FROM `media_calendar` WHERE CURRENT_DATE BETWEEN `media_week_start` and `media_week_end` ";
    $media_month_end = execute_query_get_result($selectMonth, 'FETCH_OBJ');
    /*
    $stmt = $db->prepare($selectMonth);
    $stmt->execute();
    $media_month_end = $stmt->fetchAll(PDO::FETCH_OBJ);
    */

    $prev_month = (($media_month_end[0]->media_month)-1);
    $year = ($media_month_end[0]->media_year);
    //$media_week = ($media_month_end[0]->media_week);
            
    $media_type_count = "SELECT media_month_end FROM media_calendar WHERE media_month = $prev_month AND media_year = $year";
    $media_count_result = execute_query_get_result($media_type_count, 'FETCH_OBJ');
    /*
    $stmt = $db->prepare($media_type_count);
    $stmt->execute();
    $media_count_result = $stmt->fetchAll(PDO::FETCH_OBJ);
    */
    $result = ($media_count_result[0]->media_month_end);
    $date_range = getPreviousDates('week', 12, $result,'month');
    return $date_range;
 }
 
function getCreativesDaytime(){
    $data = $result = array();
    $nestedData=array(); 
    $records_national = $records_local = $records_media_week = array();
    $requestData = $raw_data = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $params = createParamsForNetworkGraph($requestData); 
    
    if($params['tab'] == 'brand'){
        $params['tab'] = 1;
    }else{
        $params['tab'] = 0;
    }
        $params['network_string']   = "'".$params['nw_code']."'";
    
    if($params['creative_id'] != '') { 
        $where_condition            = 'd.creative_id = '.$params['creative_id'];
        $minDetectionDateCondition  = 'creative_id = '.$params['creative_id'];
        $groupBy                    = 'creative_id';
    }else{
        $where_condition            = 'c.brand_id = '.$params['brand_id'];
        $minDetectionDateCondition  = 'brand_id = '.$params['brand_id'];
        $groupBy                    = 'brand_id';
    }
    
    $params['network_id']                       = $params['nw_id'];
    $params['minDetectionDateCondition']        = $minDetectionDateCondition;
    $params['where_condition']                  = $where_condition;
    $params['groupBy']                          = $groupBy;
   
    $first_detection_result                     = get_query_result('__queries_get_brand_first_detection', $params, 'FETCH_OBJ');
   
    $first_detection_date           = isset($first_detection_result[0]->first_detection_date) ? date('Y-m-d',strtotime($first_detection_result[0]->first_detection_date)) : LIFETIME_START_DATE;
    
    if($params['val'] == 5 || (strpos($params['val'], "4_") !== false)){
        $date_range_arr['min_date'] = $params['start_date'];
        $date_range_arr['max_date'] = $params['end_date'];
        $date_range_arr['str_date'] = isset($first_detection_result[0]->first_detection_date) ? substr($first_detection_result[0]->first_detection_date, 0, -9) : LIFETIME_START_DATE;
    }else {
        $date_week_start_end_date =  getDatesForTrendGraph($requestData['ed']);
        $date_range_arr = $date_week_start_end_date;
    }
        
    $prevDates                                  = getPreviousDates('week', 1, customDate(), '');
  
    $params['max_date']             = $prevDates['max_date'];
    $params['first_detection_date'] = $first_detection_date;
    $creative_result  = get_query_result('__query_rosday_trend_graph', $params, 'FETCH_OBJ');
  
        if($params['classification'] > 5){
            $records['name'] = 'National';
            $records['color'] = '#cd3b36';
            if(!empty($creative_result)){
                foreach($creative_result as $k => $v){
                    if(!$v->sum_nat){
                        unset($creative_result[$k]);
                    }else{
                        break;
                    }
                }
                foreach($creative_result as $k => $v){
                     $tooltip = "<b>Week #".$v->media_week."</b></br><i style='font-weight: normal;'><b>From </b>". getFormattedDate($v->media_week_start, "m/d/Y").' <b>thru</b> '. getFormattedDate($v->media_week_end, "m/d/Y") . "</i>";
                     $tooltip .= '<div class="outer-tooltips" style=" position: relative; top: 24px; height: 55px;">
                            <span class="inner-tooltips" style=" position: relative; right: 0; top: 0px; text-align: center;">
                                <span class="tooltip-national"></span>
                                <b>National:</b>:
                            </span>
                            <p style="position: relative; left: 68px; top: -38px; text-align: center; margin: 0; font-size: 12px; width: 100px;">
                                <u>Airings</u>
                                <br>'.number_format($v->sum_nat).'
                            </p>
                            <p class="inner-tooltips" style=" position: relative; left: 130px; top: -77px; text-align: center; margin: 0; font-size: 12px; width: 100px;">
                                <u>Spend</u>
                                <br>$'.number_format($v->sum_nat_spend).'
                            </p>
                        </div>
                        ';
                        if($requestData['checked_network_graph_opt'] == 'airings') {
                            $records['data'][] = array('x' => $v->date_end, 'y' => $v->sum_nat, 'tooltip' => $tooltip);
                        } else {
                            $records['data'][] = array('x' => $v->date_end, 'y' => $v->sum_nat_spend, 'tooltip' => $tooltip);
                        }
                }
            }
            $result['data'][] = $records;
        }else{
            $records_national['name']   = 'National';
            $records_local['name']      = 'DPI';
            $records_national['color']  = '#cd3b36';
            $records_local['color']     = '#3064a0';
            if(!empty($creative_result)){
                foreach($creative_result as $k => $v){
                    if(!$v->sum_nat &&  !$v->sum_loc){
                        unset($creative_result[$k]);
                    }else{
                        break;
                    }
                }
                foreach($creative_result as $k => $v){
                    $tooltip = "<b>Week #".$v->media_week."</b></br><i><b>From</b> ". getFormattedDate($v->media_week_start, "m/d/Y").' <b>thru</b> '. getFormattedDate($v->media_week_end, "m/d/Y") . "</i>";
                    $tooltip .= '<div class="outer-tooltips" style=" position: relative; top: 4px; height: 65px;">
                        <span class="inner-tooltips" style="position: relative; top: 19px;">
                            <span class="tooltip-national"></span>
                            <b>National:</b>
                            <br>
                            <span class="tooltip-local"></span>
                            <b>DPI:</b>
                        </span>
                        <p class="inner-tooltips" style=" position: relative; top: -37px; left: 88px; bottom: 0; text-align: left; margin: 0; width: 100px; font-size: 12px;">
                            <u>Airings</u>
                            <br>'.number_format($v->sum_nat).'
                            <br>'.number_format($v->sum_loc).'
                        </p>
                        <p class="inner-tooltips" style=" position: relative;  right: 0; top: -94px; left: 153px; bottom: 0; text-align: left; margin: 0; width: 100px; font-size: 12px;">
                            <u>Spend</u>
                            <br>$'.number_format($v->sum_nat_spend).'
                            <br>$'.number_format($v->sum_loc_spend).'
                        </p>
                    </div>';
                    if($requestData['checked_network_graph_opt'] == 'airings') {
                        $records_national['data'][] = array('x' => $v->date_end, 'y' => $v->sum_nat, 'tooltip' => $tooltip);
                        $records_local['data'][] = array('x' => $v->date_end, 'y' => $v->sum_loc, 'tooltip' => $tooltip);
                    } else {
                        $records_national['data'][] = array('x' => $v->date_end, 'y' => $v->sum_nat_spend, 'tooltip' => $tooltip);
                        $records_local['data'][] = array('x' => $v->date_end, 'y' => $v->sum_loc_spend, 'tooltip' => $tooltip);
                    }
                }
            }

            $result['data'][] = $records_national;
            $result['data'][] = $records_local;
        }
   
    
    $result['date'] = $date_range_arr;
    echo json_encode($result,JSON_NUMERIC_CHECK);  
}

function getFormattedDate ($date, $format) {
    $date = strtotime($date);
    return date($format, $date);
}

function findBrandsList($adv_id, $network_code){
    $db = getConnection();
  //  $sql = "SELECT group_id FROM summary_short s INNER JOIN summary_network n ON s.parent_id = n.adv_id WHERE n.network_code = '".$network_code."' AND s.parent_id = ".$adv_id." AND s.parent_type = 'adv' GROUP BY parent_id";
    $sql = "SELECT brand_id FROM summary_network s INNER JOIN network n ON n.network_code = s.network_code AND adv_id ='".$adv_id."' AND network_alias = '".$network_code."' GROUP by brand_id";

    $brand_result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $brand_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/

    $brand_array = array();
    foreach($brand_result as $c1 => $c2){
        array_push($brand_array,$c2->brand_id);
    }
   
    if(!empty($brand_array)){
        $brandList = implode(",",$brand_array);
    }
    
    return $brandList;
}

function findCreativeList($brand_id, $network_code,$c = NULL,$calendar_result=NULL,$calendar_type = NULL ){
    $creativeList = '';
    $where = ' AND length <= '.LENGTH ;
    if($c == '3'){ // lead generation
      $cr_type = " AND c.type = 'Lead Gen' AND  c.class = 'DR'";
    }else if($c == '2'){ //Short-Form Products
      $cr_type = " AND c.type = 'Product' AND  c.class = 'DR'";
    }else if($c == '4'){ //Brand DR
      $cr_type = " AND c.type IN ('Lead Gen', 'Product') AND c.class IN ('BRAND DR')";  
    }else if($c == '5'){ //retail products short
      $cr_type = " AND c.class != 'BRAND' ";
    }else if($c == '6'){ // 28.5 creative
       $cr_type = " AND c.class != 'BRAND' ";
       $where = ' AND c.class != "BRAND" AND s.length > '.LENGTH;
    }else if($c == '7'){ // long retail products
      $cr_type = " AND c.class != 'BRAND' ";
      $where = ' AND s.length > '.LENGTH;
    }
    else{ // all short form
      $cr_type = " AND c.class != 'BRAND' ";
    }
    
    if(is_array($brand_id)){
    $brands = implode(",",$brand_id);
    }else{
        $brands = $brand_id;
    }
   
    $db = getConnection();
    if(!empty($calendar_result)){
         $sql = "SELECT s.creative_id FROM summary_network s INNER JOIN network n ON n.network_code = s.network_code INNER JOIN creative c ON c.creative_id=s.creative_id AND s.brand_id = c.brand_id "
                 . "WHERE s.brand_id IN (".$brands.") ".$cr_type." AND media_year='".$calendar_result[0]->media_year."'  AND calendar_id = '".$calendar_result[0]->calendar_id."' ".$calendar_type." AND network_alias = '".$network_code."' ".$where." GROUP by s.creative_id";
    }else{
         $sql = "SELECT s.creative_id FROM summary_network s INNER JOIN network n ON n.network_code = s.network_code INNER JOIN  creative c ON c.creative_id=s.creative_id AND s.brand_id = c.brand_id  WHERE s.brand_id IN (".$brands.") ".$cr_type." AND network_alias = '".$network_code."' GROUP by s.creative_id";
    }
   
    $creative_result = execute_query_get_result($sql, 'FETCH_OBJ');

    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $creative_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/

    $creative_array = array();
    foreach($creative_result as $c1 => $c2){
        array_push($creative_array,$c2->creative_id);
    }
    
    if(!empty($creative_array)){
        $creativeList = implode(",",$creative_array);
    }
   
    return $creativeList;
}

function addThumb() {
    $cronJob = new Slim_App_Crons_AddThumb();
    echo json_encode($cronJob->updateThumb());
}

function updateThumbDb() {
    $cronJob = new Slim_App_Crons_UpdateThumbDb();
    echo json_encode($cronJob->UpdateThumbDb());
}

function deleteTracking(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $sql = "DELETE FROM tracking WHERE tracking_id = ".$user->tracking_id;
     try{
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->execute();
        echo json_encode(array('status'=> 1));  
     }catch (phpmailerException $e) {
        echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }
}


function contactUs(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $sql = "SELECT c.company_name, u.email ,concat(u.first_name,' ',u.last_name) as name FROM company c INNER JOIN user u ON u.company_id = c.id WHERE u.user_id = '".$user->admin_id."'";
     try{
        $db = getConnection();
        $result = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        //'Company '.$result[0]->company_name.' has reached the maximum allowed user limit in the tier '.$user->tier.'<br/><br/>';
        $subject = 'Maximum user limit has been reached';
        $message = 'To DRMetrix,<br/><br/>';
        $message .= 'Company '.$result[0]->company_name.' has reached the maximum allowed user limit. <br/><br/>';
        $message .= 'Thanks,<br/>';
        $message .= 'DRMetrix';

        $headers = 'From: '.$result[0]->email . "\r\n" .
                                'MIME-Version: 1.0' . "\r\n" .
                                'Content-type: text/html; charset=iso-8859-1' . "\r\n";

        require 'PHPMailer/class.phpmailer.php';

   
        $mail = new PHPMailer(); //New instance, with exceptions enabled

        $mail->IsSendmail();

        $body = $message;
       
        $to = 'info@drmetrix.com';

        $mail->AddAddress($to);

        $mail->Subject  = $subject;

        $mail->SetFrom($result[0]->email, $result[0]->name);

        $mail->AltBody    = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
        $mail->WordWrap   = 80; // set word wrap

        $mail->MsgHTML($body);

        $mail->IsHTML(true); // send as HTML

        $mail->Send();
        echo json_encode(array('status'=>1));
    } catch (phpmailerException $e) {
            echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }
}

function getBrandsForAdv($id){
      $db = getConnection();
      $sql = "SELECT brand_id as id FROM brand where adv_id IN  (".$id.")";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
      /*$stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
      return $result;
}


 function getSubcategoriesForCategory($name){
      $subCategoryArray = array();
      $db = getConnection();
      $sql = "SELECT category_id as id FROM category WHERE main_category = '".$name."'";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
      /*$stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/

      return $result;
  }

function delete_tracking(){
   $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $tracking_id = isset($user->tracking_id) ? $user->tracking_id : '';
    $where = !empty($tracking_id) ? " AND tracking_id = '".$tracking_id."'" : '';
    $sql = "DELETE FROM tracking WHERE status = 'inactive' AND  user_id = '".$user->id."' AND type='".$user->type."'" . $where;
    $db = getConnection();
    $stmt = $db->prepare($sql);
    $stmt->execute();
    echo json_encode(array('status'=> 1));  
}

function tracking($type,$id,$name){
      $trackingResults = array();
      $trackingAlertsRecords = array();
      $db = getConnection();
      if($type == 'category'){
           $tracking = array($id);
           $trackingAlertsRecords = getTrackingAlert($tracking,$type);
            }
        if($type == 'subcategory'){
           $tracking = array($id);
           $trackingAlertsRecords = getTrackingAlert($tracking,$type);
            if(empty($trackingAlertsRecords)){
                $category = getCategoryForSubCategory($name,$id);
                if(!empty($category)){
                    $trackingAlertsRecords = recurringArray($category,'category');
                    if(empty($trackingAlertsRecords)){
                        $brands = getBrands($type,$id,$name);
                        if(!empty($brands)){
                           $trackingAlertsRecords = recurringArray($brands,'brand');
                           if(empty($trackingAlertsRecords)){
                               $advertisers = getAdvertisers($brands);
                               if(!empty($advertisers)){
                                   $trackingAlertsRecords = recurringArray($advertisers,'advertiser');
                               }
                           }
                       }
                    }
                }
            }
      }

      if($type == 'brand'){
            $tracking = array($id);
            $trackingAlertsRecords = getTrackingAlert($tracking,'brand');
             if(empty($trackingAlertsRecords)){
                $trackingAlertsRecords = retrieveCategory($id);
            }
      }

      if($type == 'advertiser'){
            $tracking = array($id);
            $trackingAlertsRecords = getTrackingAlert($tracking,$type);
            if(empty($trackingAlertsRecords)){
                $brands = getBrandsForAdv($id);

                if(!empty($brands)){
                    $trackingAlertsRecords = recurringArray($brands,'brand');
                    if(empty($trackingAlertsRecords)){
                        foreach($brands as $k => $v){
                             $trackingAlertsRecords = retrieveCategory($v['id']);
                        }
                    }
                }
            }
      }
    
    return $trackingAlertsRecords; 
  }
  
  //to retrieve category,subcategory andadvertiser for brand in tracking table.
  function retrieveCategory($id){
       $tracking = array();
       $db = getConnection();
       $sql = "SELECT * FROM category WHERE brand_id = '".$id."'";
       $subcategory_result = execute_query_get_result($sql, 'FETCH_ASSOC');
       /*$stmt = $db->prepare($sql);
       $stmt->execute();
       $subcategory_result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
       if(!empty($subcategory_result)){array_push($tracking,$subcategory_result[0]['category_id']);}
       $trackingAlertsRecords = getTrackingAlert($tracking,'subcategory');
       
        if(empty($trackingAlertsRecords)){
            if(!empty($subcategory_result)){
              $sql = "SELECT * FROM category WHERE main_category = '".$subcategory_result[0]['main_category']."' LIMIT 1";
              $category_result = execute_query_get_result($sql, 'FETCH_ASSOC');
              /*$stmt = $db->prepare($sql);
              $stmt->execute();
              $category_result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
                 if(isset($category_result[0])) { array_push($tracking,$category_result[0]['category_id']); }
          }

            $trackingAlertsRecords = getTrackingAlert($tracking,'category');

            if(empty($trackingAlertsRecords)){
                $tracking = array();
                $sql = "SELECT adv_id as id FROM brand WHERE brand_id = '".$id."'";
                $advertiser_result = execute_query_get_result($sql, 'FETCH_ASSOC');
                /*$stmt = $db->prepare($sql);
                $stmt->execute();
                $advertiser_result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
                if(!empty($advertiser_result)) { 
                    array_push($tracking,$advertiser_result[0]['id']); 
                    $trackingAlertsRecords = getTrackingAlert($tracking,'advertiser');
                }
            }
        }
      
       
        return $trackingAlertsRecords;
  }
  
  function getBrandsForAdvertiser($brands){
      $brandArray = array();
      $db = getConnection();
     
      foreach($brands as $k => $v){
          array_push($brandArray,$v['id']);
      }
      $brandIds = implode(",",$brandArray);
      $sql = "SELECT adv_id as id FROM brand where brand_id IN  (".$brandIds.")";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
      /*$stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
      return $result;
  }
  
  function getTrackingAlert($tracking,$t){
     $result = array();
      $trackingIds = implode(",",$tracking);
      $db = getConnection();

      if($trackingIds != ''){
          $sql = "SELECT * FROM tracking where type='".$t."' AND id IN (".$trackingIds.") AND user_id='".$_SESSION['user_id']."' AND status='active'";
          $result = execute_query_get_result($sql, 'FETCH_ASSOC');
          /*$stmt = $db->prepare($sql);
          $stmt->execute();
          $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
      }
      return $result;
  }

  function getBrands($type,$id,$name){
      $brandArray = array();
      $db = getConnection();
      if($type == 'category'){$where = 'c.main_category';}else{$where = 'c.main_sub_category';}
      $sql = "SELECT b.brand_id as id,b.brand_name as name FROM category c INNER JOIN brand b where c.brand_id = b.brand_id AND ".$where."= '".$name."'";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
      /*$stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
      
      return $result;
  }

  
  function getCategoryForSubCategory($name,$id){
      $categoryArray = array();
      $db = getConnection();
      $sql = "SELECT category_id as id,main_category as name FROM category  WHERE main_sub_category = '".$name."' AND category_id ='".$id."'";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
     /* $stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
     
      
      $sql = "SELECT category_id as id,main_category as name FROM category  WHERE main_category = '".$result[0]['name']."' LIMIT 1";
      $result = execute_query_get_result($sql, 'FETCH_ASSOC');
      /*$stmt = $db->prepare($sql);
      $stmt->execute();
      $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
     
      return $result;
  }
  

 function getAdvertisers($brand){
    $brands = array();
    foreach($brand as $k => $v){
        array_push($brands,$v['id']);
    }
    $brandIds = implode(",",$brands);
    $db = getConnection();
    $advArray = array();
    $sql = "SELECT adv_id as id FROM brand WHERE brand_id IN (".$brandIds.")";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
    return $result;
  }


  function recurringArray($array,$t){
      $tracking = array();
   
      foreach($array as $key => $value){
          $id = $value['id'];
          array_push($tracking,$id);
      }
      $trackingResults = getTrackingAlert($tracking,$t);
     return $trackingResults;
  }


function isLoginSessionExpired() {
    $login_session_duration = 10; 
    $current_time = time(); 
    if(isset($_SESSION['loggedin_time']) and isset($_SESSION["user_id"])){  
        if(((time() - $_SESSION['loggedin_time']) > $login_session_duration)){ 
            return true; 
        } else{
                    $_SESSION['loggedin_time']= time();
                    return false;
                }
    }else{
            return true;
        }
   // return false;
}


function showTiers(){
    $sql = "SELECT p.id, p.tier FROM pricing p  WHERE  p.user_id = " .$_SESSION['user_id'];
    $db = getConnection();
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    echo json_encode(array('status'=> 1, 'result' => $result));
}

function checkMobile(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $mobile = isset($user->mobile) ? $user->mobile : '';
    if(!isset($user->user_id)) $user->user_id = $_SESSION['user_id'];
    $hidden_mobile_no = isset($user->hidden_mobile_no) ? $user->hidden_mobile_no : '';

    $admin_id = isset($user->admin_id) ? $user->admin_id : $_SESSION['user_id'];
    $sql= "SELECT phone_number  FROM `user` u INNER JOIN admin_user a ON a.user_id = u.user_id WHERE replace(phone_number, '-', '') = '".$mobile."' and a.admin_id = '".$admin_id."' AND u.user_id <> '".$user->user_id."' /*AND u.status != 'deleted'*/";
    //$sql="SELECT phone_number FROM user WHERE phone_number ='".$mobile."'";
    
     try{
        $db = getConnection();
        $result = execute_query_get_result($sql, 'FETCH_OBJ');
        /*if(empty($result) && ($mobile != $hidden_mobile_no)){
            $sql= "SELECT phone_number  FROM `user` u WHERE phone_number = '".$mobile."' AND u.user_id <> '".$user->user_id."' AND u.status != 'deleted'";
            $result = execute_query_get_result($sql, 'FETCH_OBJ');
        }*/
       /* $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        if(!empty($result)){
            echo json_encode(array('status'=> 1,'valid' => 1));
        }else{
            echo json_encode(array('status'=> 1, 'valid' => 0));
        }
     } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }
}


function checkEmail(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $email = isset($user->email) ? $user->email : '';
    $userId = isset($user->user_id) ? $user->user_id : '';

    $db = getConnection();
    if(!empty($userId)){ 
        // $user_email = "SELECT email FROM user WHERE user_id ='".$userId."'";

        $user_email = "SELECT email,admin_id,u.user_id,u.status  FROM user u  LEFT JOIN admin_user a ON a.user_id = u.user_id  WHERE u.user_id ='".$userId."'";
        $stmt = $db->prepare($user_email);
        $stmt->execute();
        $emailResult = $stmt->fetchAll(PDO::FETCH_OBJ);
    }
  
    try{
        // $sql="SELECT email FROM user WHERE email ='".addslashes($email)."'";
  
        $sql = "SELECT email,admin_id,u.user_id,u.status FROM user u  LEFT JOIN admin_user a ON a.user_id = u.user_id WHERE email ='".addslashes($email)."'";
        $result = execute_query_get_result($sql, 'FETCH_OBJ');

        if(!empty($emailResult) && $emailResult[0]->status == 'deleted'  ) {
            if(!isset($emailResult[0]->admin_id)) {
                $userid = $emailResult[0]->user_id;
            }else{
                $userid = $emailResult[0]->admin_id;
            }
            $sql = "SELECT company_id FROM user u WHERE u.user_id = ".$userid;
        }

        if(!empty($result) && $result[0]->status == 'deleted') {
            if(!isset($result[0]->admin_id)) {
                $userid = $result[0]->user_id;
            }else{
                $userid = $result[0]->admin_id;
            }
            $sql = "SELECT company_id FROM user u WHERE u.user_id = ".$userid;
        }
        
        $company_result = execute_query_get_result($sql, 'FETCH_OBJ');
        
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
       
        if(!empty($result) && (!empty($emailResult) && $emailResult[0]->email !=  $result[0]->email)){
            echo json_encode(array('status'=> 1,'valid' => 1, 'result' => $company_result, 'user_result' => $result));
        }else if(!empty($result) && (!empty($emailResult) &&  $emailResult[0]->email ==  $result[0]->email)){
            echo json_encode(array('status'=> 1,'valid' => 0,  'result' => $company_result,'user_result' => $emailResult));
        }else if(!empty($result)){
            echo json_encode(array('status'=> 1,'valid' => 1,  'result' => $company_result, 'user_result' => $result));
        }else{
            echo json_encode(array('status'=> 1, 'valid' => 0 ,'result' => $company_result));
        }
     } catch (Exception $ex) {
         echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
     }
}

function getCompany(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $sql = "SELECT * FROM user u INNER JOIN company c ON c.id = u.company_id  WHERE u.user_id='".$user->user_id."'";
    try{
        $db = getConnection();
        $result = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        
        $sql = "SELECT * FROM pricing p WHERE p.user_id='".$user->user_id."'";
        $pricing = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $pricing = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        
        echo json_encode(array('status'=> 1, 'result' => $result,'pricing' => $pricing,'count' => count($result)));
    } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
}
function getUserEdit(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
        
   $sql = "SELECT * FROM user u  WHERE u.user_id='".$user->user_id."'";
    try {
        $db = getConnection();
        $result = execute_query_get_result($sql, 'FETCH_OBJ');
       /* $stmt = $db->prepare($sql);
        $stmt->execute();       
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
       
        echo json_encode(array('status'=> 1, 'result' => $result));
        $db = null;
    } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function getUser(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
   
     foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        if(isset($raw_data[1]))
            $requestData[$raw_data[0]] = $raw_data[1];
    }
    $sql = "SELECT * FROM user u  WHERE u.user_id='".$_SESSION['user_id']."';";
     try{
        $db = getConnection();
        $user2 = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $roles_array[] = $user2[0]->role;
        /*if ($user2[0]->network_tab == 1) {
            $roles_array[] = 'network';
        }*/
        //echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
        echo json_encode(array('status'=> 1, 'result' => array(array('excel_download_popup'=> $user2[0]->excel_download_popup)), 'count' => 1, 'first_name'=>$user2[0]->first_name, 'last_name'=>$user2[0]->last_name, 'name'=>$user2[0]->first_name.' '.$user2[0]->last_name,'role'=>$user2[0]->role, /*'roles' => $roles_array,*/ 
                                'user_id' => $user2[0]->user_id,'status'=>1,
                                /*'company_name' => $user2[0]->company_name, 'new_user'=>$new_user,'last_login'=>$last_login,*/'session_login' => $_SESSION['lastLoginTime'],
                                /*'eulaFlag'=>$checkEulaFlag,'user_company'=>$user_company,*/'contactemail'=>$user2[0]->username,'company_id' =>$user2[0]->company_id,'admin_id' =>$_SESSION['admin_id'],'assistant_admin'=>$user2[0]->assistant_admin,
                                'adsphere_blog_url'=>$user2[0]->adsphere_blog_url,'system_status_url'=>$user2[0]->system_status_url,'notification_build_url'=>$user2[0]->notification_build_url,'notification_new_count'=>$user2[0]->notification_new_count,'notification_new_clicked'=>$user2[0]->notification_new_clicked, 'theme' => $user2[0]->theme));
    } catch (Exception $ex) {
        echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}';
    }
}

function userAuthyChange($user_id,$phone_number,$username,$country_code){
    $get_user = "SELECT phone_number from user WHERE user_id = '".$user_id."'";
    $db = getConnection();
    $stmt = $db->prepare($get_user);
    $stmt->execute();
    $get_user_pnum = $stmt->fetchAll(PDO::FETCH_OBJ);
    $get_authy_detail = array();
    if($phone_number != $get_user_pnum[0]->phone_number){
        $get_authy_detail = ConnectToAuthy($phone_number,$username,$country_code);    
        if(!empty($get_authy_detail) && isset($get_authy_detail['authy_id'])){
            return $get_authy_detail; //$get_authy_detail['authy_id'];
        }else{
             return $get_authy_detail; //"authy_error"
        }
    }else{
        $get_authy_detail['same_number'] = 'same_number';
        return $get_authy_detail;
    }

}
function editCompany(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());        
    $type = isset($user->company_type) ? $user->company_type : '';
    $company_size = isset($user->company_size) ? $user->company_size : '';
    $revenue = isset($user->revenue) ? $user->revenue : ''; 
    $amount = str_replace("$","",$revenue);
    $r =  str_replace(",","",$amount);
    if($revenue != 'Unspecified') {
        $r1 = intval(($r*100))/100;
        $r1_array = explode(".",$r1);
        $amt_array =  explode(".",$amount);
    } else {
        $r1 = 0;
        $r1_array = array($r1);
        $amt_array =  array($revenue);
    }
    $access_type = $user->access_type;
    $video_download_limit = $user->download_limit;
    $monthly_cap = "NULL";
    $account_owner = isset($user->account_owner) ? $user->account_owner : ''; 
    $account_owner_zoho_id = isset($user->account_owner_zoho_id) ? $user->account_owner_zoho_id : ''; 
    if(!empty($user->monthly_cap))
        $monthly_cap = $user->monthly_cap;

    $field_monthly_cap = ", monthly_cap = ".$monthly_cap." ";
    $domain_override   = (isset($user->domain_override) && $user->domain_override ) ? '1' : '0';
    $old_account_name   = $user->old_company_name;
    $firstname         = $user->first_name;
    $lastname         = $user->last_name;
    $old_firstname     = $user->old_firstname;
    $old_lastname     = $user->old_lastname;
    $company_name       = $user->company_name;
    $username           =  $user->username;
    $old_username       =  $user->old_email_address;
    $condition_email_check  = $condition_zoho_domain_check = $condition_ads_domain_check = $condition_contact_inactive_check =  $condition_contact_name_found = $condition_contact_ads_found = 0;
    $update_to_adsphere     = $company_check =  0;
    $company_details    = createCompanyData($user);
    if($user->user_id == 0 && $user->company_id == 0) {
        saveUserCall($company_details , $user);
    } 
    

    $params['last_name']                = $user->last_name;
    $params['first_name']               = $user->first_name;
    $params['email']                    = $user->username;
    $params['company_name']             = $user->company_name;
    $params['admin_domain']             = explode('@', $user->username);
    $params['admin_email']              = $user->username;
    $params['company_id']               = $user->company_id;  

    if($user->update == '') {
        if($company_name != $old_account_name) {
            //Check company in ADS
                $check_company_exist_sql    = "SELECT COUNT(*) as count FROM company WHERE company_name = '".$user->company_name."'";
                $company_count              = execute_query_get_result($check_company_exist_sql);
                    
                if($company_count[0]['count'] > 0) {
                    echo json_encode(array('status'=>1,'warning' => 3, 'error_msg'=>'Company Already Exists in Adsphere'));
                    exit;
                }

                $params['company_name']   = $company_name;
                $companyInfo              = checkAccountNameInZoho($params);
            
                if($username != $old_username) {
                    $params['company_name'] = $company_name;
        
                    $userInfo               = checkEmailInZohoDifferentCompany($params);
                    if($userInfo->email_found_flag == 1) {
                        $condition_email_check  = 1;
                        echo json_encode(array('status'=> 1,'warning'=> 3, 'error_msg'=>'Admin record is found on different account. Please fix admin record in ZOHO.', 'userInfo' => $userInfo));
                        exit;
                    } 
                    
                    // if($condition_email_check == 0){
                    //     $userInfo  = checkDomainOnDifferentAccountADS($params);
                    //     if(!empty($userInfo)) {
                    //         if( $userInfo['domain_found_flag'] == 1) {
                    //             $condition_ads_domain_check = 1 ;
                    //             echo json_encode(array('status'=> 1, 'warning' => 3 ,'error_msg'=>'We found a different contact in ADS that uses this domain. Please contact administrator', 'userInfo' => $userInfo));
                    //             exit;
                    //         }     
                    //     }
                    // }

                    // if($condition_ads_domain_check == 0) {
                    //     $userInfo  = checkDomainOnDifferentAccountZOHO($params);
                    //     if(!empty($userInfo) ) {
                    //         if( $userInfo->zoho_domain_found_flag == 1) {
                    //             $condition_zoho_domain_check = 1 ;
                    //             echo json_encode(array('status'=> 1, 'warning' => 3, 'error_msg'=>'We found a different contact in ZOHO that uses this domain. Please contact administrator', 'userInfo' => $userInfo));
                    //             exit;
                    //         } 
                    //     }
                    // }

                    if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0 && ($firstname != $old_firstname &&  $lastname != $old_lastname)){
                        $userInfo                        = checkContactNameInSameCompanyInAds($userdata);
                        $condition_contact_ads_found     = $userInfo['contact_found'];
                        if($condition_contact_ads_found != 0) {
                            $_SESSION['zoho_contact_id']     =  $userInfo['zoho_contact_id']  ; 
                            $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                            $_SESSION['inactive_user_id']    = $userInfo['user_id'];
                            $_SESSION['userRole']            = $userInfo['role'];
                            $_SESSION['condition_contact_inactive_zoho'] = 0;
                            $_SESSION['condition_contact_active_zoho'] = 0;
                        } 
                    } 

                    if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0 && $condition_contact_ads_found == 0 && ($firstname != $old_firstname &&  $lastname != $old_lastname)) {
                        $userInfo  = checkContactNameEditInSameCompanyInZoho($params);
                        if(!empty($userInfo) ) {
                            if( $userInfo->contact_found_flag == 1) {
                                $condition_zoho_contact_check = 1 ;
                                echo json_encode(array('status'=> 1, 'warning' => 4, 'userInfo' => $userInfo->data[0]));
                                exit;
                            } 
                        }
                    }
                
                    // if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0) {
                    //     $userInfo  = checkContactNameInSameCompanyInZoho($params);
                    //     if(!empty($userInfo) ) {
                    //         if( $userInfo->contact_found_flag == 1) {
                    //             $condition_contact_name_found = 1;
                                
                    //                 // put primary into secondary and secondary to primary
                    //             $user_details['username']               = $user_details['username']; // primary
                    //             $user_details['secondary_email']        = $user_details['secondary_email'] ; // secondary
                    //         }else {
                    //             $company_check                = 1;    
                    //         } 
                    //     }
                    // }
                } 
        } else if($username != $old_username) {
                $params['company_name'] = $company_name;
    
                $userInfo               = checkEmailInZohoDifferentCompany($params);
                if($userInfo->email_found_flag == 1) {
                    $condition_email_check  = 1;
                    echo json_encode(array('status'=> 1,'warning'=> 3, 'error_msg'=>'Admin record is found on different account. Please fix admin in ZOHO.', 'userInfo' => $userInfo));
                    exit;
                } 

                // if($condition_email_check == 0){
                //     $userInfo  = checkDomainOnDifferentAccountADS($params);
                //     if(!empty($userInfo)) {
                //         if( $userInfo['domain_found_flag'] == 1) {
                //             $condition_ads_domain_check = 1 ;
                //             echo json_encode(array('status'=> 1, 'warning' => 3 ,'error_msg'=>'We found a different contact in ADS that uses this domain. Please contact administrator', 'userInfo' => $userInfo));
                //             exit;
                //         }     
                //     }
                // }

                // if($condition_ads_domain_check == 0) {
                //     $userInfo  = checkDomainOnDifferentAccountZOHO($params);
                //     if(!empty($userInfo) ) {
                //         if( $userInfo->zoho_domain_found_flag == 1) {
                //             $condition_zoho_domain_check = 1 ;
                //             echo json_encode(array('status'=> 1, 'warning' => 3, 'error_msg'=>'We found a different contact in ZOHO that uses this domain. Please contact administrator', 'userInfo' => $userInfo));
                //             exit;
                //         } 
                //     }
                // }
                if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0 && ( $firstname != $old_firstname &&  $lastname != $old_lastname)) {
                    $userInfo                        = checkContactNameInSameCompanyInAds($params);
                    $condition_contact_ads_found     = $userInfo['contact_found'];
                    $condition_contact_active_ads    = $userInfo['contact_found_active_check'];
                    $condition_contact_inactive_ads  = $userInfo['contact_found_inactive_check'];

                    if($condition_contact_ads_found != 0) {
                        $_SESSION['zoho_contact_id']     =  $userInfo['zoho_contact_id']  ; 
                        $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                        $_SESSION['inactive_user_id']    = $userInfo['user_id'];
                        $_SESSION['userRole']            = $userInfo['role'];
                        $_SESSION['condition_contact_inactive_zoho'] = 0;
                        $_SESSION['condition_contact_active_zoho'] = 0;
                    } 
                  
                    if($condition_contact_ads_found == 1  ) {
                        echo json_encode(array('status'=> 1, 'warning' => 4, 'userInfo' => $userInfo));    
                        exit;
                    }  
                }

                if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0 && $condition_contact_ads_found == 0 && ($firstname != $old_firstname &&  $lastname != $old_lastname)) {
                    $userInfo  = checkContactNameEditInSameCompanyInZoho($params);
                    if(!empty($userInfo) ) {
                        if( $userInfo->contact_found_flag == 1) {
                            $condition_zoho_contact_check = 1 ;
                            echo json_encode(array('status'=> 1, 'warning' => 4, 'userInfo' => $userInfo->data[0]));
                            exit;
                        } 
                    }
                }
            } else if( $firstname != $old_firstname &&  $lastname != $old_lastname) {
                    $userInfo                        = checkContactNameInSameCompanyInAds($params);
                    $condition_contact_ads_found     = $userInfo['contact_found'];
                    $condition_contact_active_ads    = $userInfo['contact_found_active_check'];
                    $condition_contact_inactive_ads  = $userInfo['contact_found_inactive_check'];

                    if($condition_contact_ads_found != 0) {
                        $_SESSION['zoho_contact_id']     =  $userInfo['zoho_contact_id']  ; 
                        $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                        $_SESSION['inactive_user_id']    = $userInfo['user_id'];
                        $_SESSION['userRole']            = $userInfo['role'];
                        $_SESSION['condition_contact_inactive_zoho'] = 0;
                        $_SESSION['condition_contact_active_zoho'] = 0;
                    } 
                  
                    if($condition_contact_ads_found == 1  ) {
                        echo json_encode(array('status'=> 1, 'warning' => 4, 'userInfo' => $userInfo));    
                        exit;
                    }  

                    if($condition_email_check == 0 && $condition_ads_domain_check == 0 && $condition_zoho_domain_check == 0 && $condition_contact_ads_found == 0) {
                        $userInfo  = checkContactNameEditInSameCompanyInZoho($params);
                        if(!empty($userInfo) ) {
                            if( $userInfo->contact_found_flag == 1) {
                                $condition_zoho_contact_check = 1 ;
                                echo json_encode(array('status'=> 1, 'warning' => 4, 'userInfo' => $userInfo->data[0]));
                                exit;
                            } 
                        }
                    }
                
                    // if(!empty($userInfo) ) {
                    //     if( $userInfo->contact_found_flag == 1) {
                    //         $condition_contact_name_found = 1;
                            
                    //             // put primary into secondary and secondary to primary
                    //         $user_details['username']               = $user_details['username']; // primary
                    //         $user_details['secondary_email']        = $user_details['secondary_email'] ; // secondary
                    //     }else {
                    //         $company_check                = 1;    
                    //     } 
                    // }
            } 
            
            
    }
    $company_name         = urlencode($user->company_name);
    $companyInfo          = searchUserInZoho('Accounts/search', 'criteria=(Account_Name:equals:'.$company_name.')');

    if($user->company_name != $old_account_name) {
        if(isset($companyInfo->data)) {
            // matching account name found
            if(($user->company_zoho_id != $companyInfo->data[0]->id)) {
                $zoho_id    = $companyInfo->data[0]->id;
                $admin_id   = isset($companyInfo->data[0]->ADS_Admin->id) ? $companyInfo->data[0]->ADS_Admin->id : '';
                if($zoho_id != $user->company_zoho_id) {
                    echo json_encode(array('status'=> 1,'warning' => '1', 'zoho_account_id' => $zoho_id, 'companyInfo' => $companyInfo , 'admin_id' => $admin_id));
                    exit;
                }
            } 
          
        } else {
            // no matching account name found
            echo json_encode(array('status'=> 1,'warning' => '2'));
            exit;
        }
    }
    

    //   show($condition_contact_ads_found , 1);
     
    $getUpdatedAuthyId = userAuthyChange($user->user_id,$user->mobile,$user->username,$user->country_code);
     
    if(!isset($getUpdatedAuthyId['error'])){ //$getUpdatedAuthyId != "authy_error"  
        $company_details['company_name'] = addslashes($user->company_name);
        $company_details['company_type'] = $type;
        $company_details['company_size'] = $company_size;
        $company_details['company_revenue'] = $revenue;
        $company_details['account_owner']   = $account_owner;
        $company_details['account_owner_zoho_id'] = $account_owner_zoho_id;
        $zoho_account_id = getCompanyInfo($user->company_id); 
        $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
        $company_details['ads_record_id'] = $user->company_id;
        $company_details['client'] = ($user->client == 'Yes') ? true : false;      
        
      
        $sql = "UPDATE company SET company_name='".addslashes($user->company_name)."',company_type='".$type."',company_size='".$company_size."',revenue='".$revenue."', video_download_limit='".$video_download_limit."',modified_date='".date("Y-m-d h:i:s")."' WHERE id = '".$user->company_id."'";

        $valid = 'yes';
        try{
            $db = getConnection();
            $stmt = $db->prepare($sql);
            $stmt->execute();

            $update_authy = "";
            if(!isset($getUpdatedAuthyId['same_number'])){ //$getUpdatedAuthyId != "same_number"
                $update_authy = ", authy_id='".$getUpdatedAuthyId['authy_id']."'";
            }

            $update_account_owner ='';
            if(!empty($account_owner)){
                $update_account_owner = ", account_owner='".$account_owner."'";
            }

            $sql = "UPDATE user SET client='".$user->client."',first_name = '".addslashes($user->first_name)."',last_name = '".addslashes($user->last_name)."',phone_number = '".$user->mobile."',username = '".addslashes($user->username)."',email = '".addslashes($user->username)."', country_code='".$user->country_code."', access_type = '".$access_type."', domain_override='".$domain_override."' ".$field_monthly_cap." ".$update_authy." ".$update_account_owner." WHERE user_id = '".$user->user_id."'";  
            $stmt = $db->prepare($sql);
            $stmt->execute();

            $user_details['first_name']      = $user->first_name;
            $user_details['last_name']       = $user->last_name;
            $user_details['username']        = $user->username;
            $user_details['mobile']          = ($user->country_code != 1) ? $user->country_code.'-'.$user->mobile : $user->mobile;
            $user_info                       = getUserInfoById($user->user_id);
            $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
            $user_details['ads_record_id']   = $user->user_id;
            $user_details['role']            = 'Admin';
            $user_details['company_name']    = $company_details['company_name'];
            $user_details['zoho_company_id']  = $company_details['zoho_account_id'];
            $company_details['status']       = ucwords($user_info[0]->status);
            $user_details['status']          = $company_details['status'];
            $user_details['client']          = ($user->client == 'Yes') ? true : false;      
            $user_details['company_type']    = $company_details['company_type'];
            $user_details['contact_owner']   = $account_owner_zoho_id;
            $user_details['secondary_email'] = $user->old_email_address;
            $user_details['assistant_admin'] = false;

            userListAccessTypeUpdate($user->user_id, $access_type, $user->monthly_cap);

            //delete pricing
            $pricing_sql = "SELECT * FROM pricing WHERE company_id ='".$user->company_id."'";
            $stmt = $db->prepare($pricing_sql);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);
           
            //add and update pricing.
           foreach($user->price as $k => $v){
                $company_details['users_limit'] = $v->users_limit;
                
                if($valid == 'yes'){
                    $update_price = "UPDATE pricing SET frequency = '".$v->billing."',tier = '".$v->tier."',users_limit = '".$v->users_limit."',amount = '".$v->amount."',modified_date='".date("Y-m-d h:i:s")."' WHERE id='".$v->price_id."'";
                    $stmt = $db->prepare($update_price);
                    $stmt->execute();
                }
           }
            // updateUserDetails($user_details); //Edit user and update assistant admin check as updateUserDetails not needed.
            
            // $company_details['asd_admin'] = $user->first_name.' '.$user->last_name;
            $company_details['asd_admin']   =  $user_details['zoho_contact_id'] ;
            if($username != $old_username) {
                $user_details['company_name'] = $company_details['company_name'];   
                $updateContactResponse        = APIManageZOHOContact('update_account_name',$user_details);
            } else {
                if( isset($user->company_zoho_id) ) {
                    $company_details['id']      = $user->company_zoho_id;
                }
                $updateAccoutResponse           = APIManageZOHOAccount('update',$company_details);
                if(!empty($updateAccoutResponse)){
                    $updateContactResponse      = APIManageZOHOContact('update',$user_details);
                }
            }
          
            $company_details['zoho_account_id']     = $company_details['zoho_account_id'] ;
            $company_details['asd_admin']           = $user_details['zoho_contact_id'];
            $updateResponse = APIManageZOHOAccount('updateAdsAdmin',$company_details);
            
            echo json_encode(array('status'=> 1,'valid'=>$valid));
        } catch (Exception $ex) {
                echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
        } 
    }else{
        $error = '';
        if(isset($getUpdatedAuthyId['error'])){
            $error = $getUpdatedAuthyId['error'];
        }
        echo json_encode(array('status'=> 0,'error'=>$error)); //'Auhty unable to create new user. Please try after some time'
    }
}
function is_val_exists($needle, $array) {
    $flag = 0;
    foreach($array as $key => $value){
        if($needle == $value->price_id){
            return true;
        }else{
            $flag = 1;
        }
    }
   if($flag == 1){return false;}
}
function editUser(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $condition_email_check = 0;
   
    $getUpdatedAuthyId = userAuthyChange($user->user_id,$user->mobile,$user->username,$user->country_code);
    if(!isset($getUpdatedAuthyId['error'])){ //$getUpdatedAuthyId != "authy_error"
         //check maximum user limit for a company
        $db = getConnection();

        if($_SESSION['role'] != 'superadmin') {
            $admin_id = getAdminOfUser();
        }else{
            $admin_id = isset($user->admin_id) ? $user->admin_id : $_SESSION['user_id'];
        }
      
        $get_company_name = "SELECT c.company_name,c.company_type,u.client, u.account_owner, u.domain_override,u.username, c.zoho_account_id, ao.zoho_contact_id as account_owner_id FROM company AS c INNER JOIN user u ON u.company_id = c.id INNER JOIN account_owner ao ON ao.email = u.account_owner WHERE u.user_id = '".$admin_id."' ";

        $stmt = $db->prepare($get_company_name);
        $stmt->execute();
        $get_cname = $stmt->fetchAll(PDO::FETCH_OBJ);

        $user_info              = getUserInfoById($user->user_id);
        $user->zoho_contact_id  = $user_info[0]->zoho_contact_id;
        if($user_info[0]->username != $user->username){
            checkDomain($get_cname[0]->domain_override,$get_cname[0]->username,$user->username);
        }

        try{
           if($user->hidden_email != $user->username) {
                $userdata['email']                 = $user->username;
                $userdata['company_name']          = $get_cname[0]->company_name;
                $userInfo                          = checkEmailInZohoSameCompany($userdata);
           }
           
            if(isset($userInfo) && $userInfo->email_found_flag == 1 ) {
                    // update user in zoho.
                    $condition_email_check = 1 ;
                    $user->zoho_user_id   = $userInfo->data[0]->id;
                }else {
                    $user->zoho_user_id   = $user_info[0]->zoho_contact_id;
                 }

               
            $update_authy = "";
            if(!isset($getUpdatedAuthyId['same_number'])){ //$getUpdatedAuthyId != "same_number"
                $update_authy = ", authy_id='".$getUpdatedAuthyId['authy_id']."'";
            }

            $user->update_authy              = $update_authy;
            $company_details['company_name'] = $get_cname[0]->company_name;
            $company_details['company_type'] = $get_cname[0]->company_type;
            $company_details['client']       = $get_cname[0]->client == 'Yes' ? true  : false;
           
            $company_details['account_owner'] = $get_cname[0]->account_owner;
         
            updateUserCall($company_details, $user);
         
            $user_details['first_name']      = $user->first_name;
            $user_details['last_name']       = $user->last_name;
            $user_details['username']        = $user->username;
            $user_details['mobile']          = ($user->country_code != 1) ? $user->country_code.'-'.$user->mobile : $user->mobile;
            $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
            $user_details['role']            = 'User';    
            $user_details['ads_record_id']   = $user->user_id; 
            $user_details['status']          = ucwords($user_info[0]->status); 
            $user_details['company_name']    = $get_cname[0]->company_name;
            $user_details['zoho_company_id'] = $get_cname[0]->zoho_account_id;
            $user_details['company_type']    = $get_cname[0]->company_type;
            $user_details['contact_owner']   = $get_cname[0]->account_owner_id;
            $user_details['client']          = $get_cname[0]->client == 'Yes' ? true : false;
            $user_details['assistant_admin'] = ($user->assistant_admin == 1) ? true : false;

            if($user->username != $user->hidden_email) {
                $user_details['username']          = $user->username;
                $user_details['secondary_email']   = $user->hidden_email;
                
                $updateResponse = APIManageZOHOContact('update_account_name',$user_details);
            } else {
                $updateResponse = APIManageZOHOContact('update',$user_details);
            }
            
            echo json_encode(array('status'=> 1,'max_limit'=>'no'));
        
     } catch (Exception $ex) {

                echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
        }  
    }else{
        $error = '';
        if(isset($getUpdatedAuthyId['error'])){
            $error = $getUpdatedAuthyId['error'];
        }
        echo json_encode(array('status'=> 0,'error'=>$error)); //'Auhty unable to create new user. Please try after some time'
    }
}

function getUsersOfCompany() {
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $params['company_id'] = urlDecode($user->company_id);

    try {
        $result = get_query_result('__query_get_user_of_company', $params, 'FETCH_OBJ');

        echo json_encode(array('status' => 1, 'result' => $result, 'count' => count($result)));
    } catch (Exception $e) {
        echo '{"status"=>0,"error":{"text":' . $e->getMessage() . '}}';
    }
}

function deleteCompany() {
    $request        = Slim::getInstance()->request();
    $user           = json_decode($request->getBody());
    $user_id_array  = array();
    
    $params['user_id']    = $params['admin_id'] = urlDecode($user->user_id);
    $params['company_id'] = $company_id = urlDecode($user->company_id);
    $params['type']       = 'company';
    
    try {
        $user_info                  = getUserInfoById($user->user_id);
        
        $params['role']             = $user_info[0]->role;
        $params['email_id']         = $user_info[0]->username;
        $params['zoho_contact_id']  = $user_info[0]->zoho_contact_id;

        $get_company_info           = getCompanyInfoById($company_id);
        $params['zoho_account_id']  = $get_company_info[0]->zoho_account_id; 
      
        $company_details['company_type']            = '';
        $company_details['company_size']            = '';
        $company_details['company_revenue']         = '';
        $company_details['ADS_Record_ID']           = '';
        $company_details['Company_Status']          = '';
        $company_details['EULA_Overriden']          = false;
        $company_details['Max_Users_Allowed']       = '';
        $company_details['Client']                  = false;
        $company_details['Adsphere_Acct_ID']        = '';
        $company_details['Authy_Authenticated']     = false;
        $company_details['ADS_Authenticated']       = false;
        $company_details['ADS_Admin']               = '';
        $company_details['Network_Tab']             = false;
        $company_details['ads_verified_date']       = '';
        $company_details['zoho_account_id']         = $params['zoho_account_id'];
        
         $updateAccountResponse                      = APIManageZOHOAccount('delete',$company_details);
     
        $users = selectUserFromAdminUser($params);
        array_push($user_id_array,$params['zoho_contact_id']);
        deleteUser($params);
        if (!empty($users)) {
            $user_id_user = implode($users, ",");
            $params['id'] = $user_id_user;
            
            for($i = 0; $i < count($users); $i++) {
                $user_info                  = getUserInfoById($users[$i]);
                $params['role']             = $user_info[0]->role;
                $params['email_id']         = $user_info[0]->username;
                $params['zoho_contact_id']  = $user_info[0]->zoho_contact_id;
                $params['user_id']          = $users[$i];
                deleteFromExcelExport($params);
                deleteFromResultLog($params);
                deleteFromTrackingAlerts($params);
                deleteFromUserFilters($params);
                deleteFromUserLogs($params);
                deleteFromSearchLogs($params);
                deleteUserFromUser($params);
                array_push($user_id_array,$user_info[0]->zoho_contact_id );
            }
        }
     
        $updateUserResponse = APIManageZOHOContact('deleteUser', $user_id_array, true);
        deleteCompanyFromAds($params);
       
        $json_data['status'] = 'true';

        echo json_encode($json_data);
    } catch (Exception $e) {
        echo '{"status"=>0,"error":{"text":' . $e->getMessage() . '}}';
    }
}

function deleteCompanyFromAds($params) {
    extract($params);
    $db = getConnection();
    $sql = "DELETE FROM company WHERE id = '".$company_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();

    $sql = "DELETE FROM pricing WHERE company_id = '".$company_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function deleteUserFromCompany() {
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $params['user_id']    = urlDecode($user->user_id);
    $params['company_id'] = $company_id = urlDecode($user->company_id);
    
    try {
        $user_info                  = getUserInfoById($user->user_id);
        $params['role']             = $user_info[0]->role;
        $params['email_id']         = $user_info[0]->username;
        $params['zoho_contact_id']  = $user_info[0]->zoho_contact_id;

        $get_company_info           = getCompanyInfoById($company_id);
        $params['zoho_account_id']  = $get_company_info[0]->zoho_account_id;
       
        deleteUser($params);
        APIManageZOHOContact('deleteUser', $params);
       
        $json_data['status'] = 'true';

        echo json_encode($json_data);
    } catch (Exception $e) {
        echo '{"status"=>0,"error":{"text":' . $e->getMessage() . '}}';
    }
}

function deactivateUserFromCompany() {
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $params['user_id'] = urlDecode($user->user_id);
    $params['company_admin_id'] = urlDecode($user->company_admin_id);
    
    try {
        $user_info          = getUserInfoById($user->user_id);
        $params['role']     = $user_info[0]->role;
        $params['email_id'] = $user_info[0]->username;
        $params['status']   = $user_info[0]->status;
        deactivateUser($params);
        exit();
    } catch (Exception $e) {
        echo '{"status"=>0,"error":{"text":' . $e->getMessage() . '}}';
    }
}

function changeAdmin()
{
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $params['company_id']           = $company_id = urlDecode($user->company_id);
    $params['admin_id']             = $admin_id = urlDecode($user->admin_id);
    $params['user_id']              = $user_id = urlDecode($user->user_id);

   // $params['old_admin']            = $admin_id;
   // $params['old_admin_zoho_id']    = getUserInfoById($user->admin_id);

    
  //  $params['new_admin']            = $user_id;
    //$params['new_admin_zoho_id']    = getUserInfoById($user->user_id);

    
    $json_data['status'] = 'false';
    try {
        updateUserIdPricing($params);
        updateUserInUsers($params);
        swapAdminUser($params);
        updateAdminIdAdminUser($params);

        $user_info                              = getUserInfoById($admin_id);
        $user_details['zoho_contact_id']        = $user_info[0]->zoho_contact_id; 
        APIManageZOHOContact('changeAdminRoleUser', $user_details);

        $user_info                              = getUserInfoById($user_id);
        $user_details['zoho_contact_id']        = $user_info[0]->zoho_contact_id; 
        APIManageZOHOContact('changeAdminRoleAdmin', $user_details);

        $get_company_info                       = getCompanyInfoById($company_id);
        $company_details['zoho_account_id']     = $get_company_info[0]->zoho_account_id; 
        $company_details['asd_admin']           = $user_info[0]->zoho_contact_id;
        APIManageZOHOAccount('updateAdsAdmin',$company_details);
     
        $json_data['status'] = 'true';
   
        echo json_encode($json_data);
    } catch (Exception $e) {
        echo '{"status"=>0,"error":{"text":' . $e->getMessage() . '}}';
    }
}


function deactivateUser($user_info = NULL){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $user_of_company = $inactive_user_of_company = array();
    if(isset($user_info)) {
        $status        = ($user_info['status'] == 'active') ? 'inactive' : 'active';
    }else{
        $status         = ($user->status == 'active') ? 'inactive' : 'active';
    }
    
    //$client         = ($user->status == 'active') ? 'false' : 'true';
    //$client_check   = ($user->status == 'active') ? 'No' : 'Yes';

    //$client         = 'false';
    //$client_check   = 'No';
    //, client='".$client_check."'

    if($status =='active' && ($_SESSION['role'] == 'admin'))
        checkUserLimit($user_info);

    $sql = "UPDATE user SET status='".$status."',  modified_date='".date("Y-m-d h:i:s")."'  WHERE user_id='".$user->user_id."'";   
    try{
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->execute();    

        $userInfo                        = [];
        $user_info                       = getUserInfoById($user->user_id);
        $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id; 
        $user_details['status']          = ucfirst($status);
       
        //$user_details['client'] = $client;
        $updateStatus = APIManageZOHOContact("userStatusUpdate",$user_details);
        if($_SESSION['role'] == 'superadmin' && (isset($user->status) || ($user_info[0]->role == 'admin'))){
            $get_company_id                     = getUserCompany($user->user_id);
            $get_company_info                   = getCompanyInfoById($get_company_id);
            $company_details['zoho_account_id'] = $get_company_info[0]->zoho_account_id; 
            $company_details['status']          = ucfirst($status);
            APIManageZOHOAccount("accountStatusUpdate",$company_details);
            $user_details['ads_record_id'] = $user->user_id;
            $params['company_id'] = $get_company_id;
            if($status == 'inactive') {
                $result = get_query_result('__query_get_inactive_user_of_company', $params, 'FETCH_OBJ'); // user not in company limit.
                foreach($result as $key => $value) {
                    array_push($inactive_user_of_company, $value->user_id);
                }
                $inactive_user_ids = implode("','",$inactive_user_of_company);
                if(!empty($inactive_user_of_company)) {
                    $update_sql = "UPDATE user SET  modified_date='".date("Y-m-d h:i:s")."', status='pre_inactive'  WHERE user_id IN ( $inactive_user_ids)";
                    $stmt = $db->prepare($update_sql);
                    $stmt->execute();
                }
            }
            $result = get_query_result('__query_get_active_user_of_company', $params, 'FETCH_OBJ'); // user within company limit.
            foreach($result as $key => $value) {
                array_push($user_of_company, $value->user_id);
                $zoho_user_details[$key]['user_id'] =  $value->zoho_contact_id;
                $zoho_user_details[$key]['status']  =  ucfirst($status);
            }
            $user_ids = implode("','",$user_of_company);
            $sql = "UPDATE user SET status='".$status."',  modified_date='".date("Y-m-d h:i:s")."'  WHERE user_id IN ( '".$user_ids."')";
            $stmt = $db->prepare($sql);
            $stmt->execute();
            if(!empty($result)) {

                $updateStatus = APIManageZOHOContact("userStatusUpdate",$zoho_user_details, true);
            }
            // updateAdminUserStatus($user_details);
        }
        if(isset($user->reactivate)){
            $user_info = getUserInfoById($user->user_id);

            $user_info = $user_info[0];
            $userInfo['user_id'] = $user_info->user_id;
            $userInfo['username'] = $user_info->username;
            $userInfo['phone_number'] = $user_info->phone_number;
            $mobile = explode("-", $userInfo['phone_number']);
            if(!isset($mobile[2])){$mobile[2] = '';}
            if(!isset($mobile[1])){$mobile[1] = '';}
            $userInfo['phone_number'] = "(".$mobile[0].") ".$mobile[1].'-'.$mobile[2];

            $userInfo['status'] = $user_info->status;
            $userInfo['name'] = $user_info->first_name . ' ' . $user_info->last_name;
            $userInfo['position'] = $user_info->position;
            $userInfo['role'] = $user_info->role;
            $userInfo['last_login'] = $user_info->last_login;
            $userInfo['email'] = $user_info->email;
            $userInfo['passphrase'] = $user_info->passphrase;
            $userInfo['assistant_admin'] = $user_info->assistant_admin;
            $userInfo['authy_cookie'] = $user_info->authy_cookie;
            $userInfo['vdate'] = $user_info->verify_date;
            $userInfo['country_code'] = $user_info->country_code;
            $userInfo['login_count'] = $user_info->login_count;
            $userInfo['last_30_days_count'] = $user_info->last_30_days_count;
            $userInfo['tracking_alert_subscribed'] = $user_info->tracking_alert_subscribed;
            $userInfo['skip_authy'] = $user_info->skip_authy;
            $userInfo['ads_authenticated'] = $user_info->password == '' && $user_info->passphrase != '' ? 1: 0;
            $userInfo['user_id'] = $user_info->user_id;

        }
        $return = array('status'=> 1,'max_limit'=>'no','user_status'=>$status);
        if(isset($user->reactivate)) {
            $return['rowEntity'] = $userInfo;
        }
        echo json_encode($return);
        exit();   
     } catch (Exception $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}';
    }
    
}

function getAuthyContries(){
    $db = getConnection();
    $sql="SELECT * FROM authy_countries ";
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}

function showUsers(){
    $search = '';
    $result = getUserDetails($search);
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}

function showAdmins(){
    $search = '';
    $result = getCompanyDetails($search);
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}

function companyExport(){ 
    $result = getUserLoginDetials(); 
    //echo "<pre>";print_r($result); exit;
//    $status = $_SESSION['status'];
    $objPHPExcel = new PHPExcel();
    $countExcelCols = 0;
    /*foreach ($result as $i => $product) {
        unset($product->user_id, $product->company_id);
    }*/
      
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Company Name');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B1','Role');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C1','Client');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('D1','Account Owner');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('E1','Username');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('F1','Name');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('G1','EULA Overridden');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('H1','IP Address');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('I1','Date/Time');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('J1','Login Count');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('K1','Last Login');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('L1','Mobile #');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('M1','Adsphere Authenticated');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('N1','Authy Authenticated');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('O1','Assistant Admin');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('P1','Status');
    $j = 'A';
    $rowCount = 2;
  
    foreach($result as $i => $product){
        if($rowCount == 9){$j++;}
        $col =  $j.$rowCount;
        $account_owner = '-';
        if(!empty($product['account_owner'])){
            $account_owner = explode('@',$product['account_owner']);
            $account_owner = ucwords(str_replace('.', ' ',$account_owner[0]));
        }
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$rowCount, !empty($product['company_name']) ? $product['company_name'] : '-');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$rowCount, $product['role']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$rowCount, $product['client']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('D'.$rowCount, $account_owner);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('E'.$rowCount, $product['username']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('F'.$rowCount, !empty($product['name']) ? $product['name'] : '-');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('G'.$rowCount, $product['company_eula_flag']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('H'.$rowCount, !empty($product['eula_ip']) ? $product['eula_ip'] : '-');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('I'.$rowCount, !empty($product['eula_datetime']) ? $product['eula_datetime'] : '-');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('J'.$rowCount, $product['login_count']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('K'.$rowCount, !empty($product['last_login']) ? $product['last_login'] : '-');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('L'.$rowCount, '+'.$product['country_code'].' '.$product['phone_number']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('M'.$rowCount, $product['Adshphere_Authicated']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('N'.$rowCount, $product['Authy_Authicated']);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('O'.$rowCount, ($product['assistant_admin'] == 1) ? 'Yes' : 'No');
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('P'.$rowCount, $product['status']);
        $rowCount++; 
    }
   
    if(empty($result)){$objPHPExcel->setActiveSheetIndex(0)
    ->setCellValue('A2','No Records Found.');}
    
    $title = 'Company_Details'.date('m-d-Y');
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Company_Details'.date('m-d-Y'));

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);

    // Redirect output to a clientÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢s web browser (Excel5)
    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
    ob_end_clean();
    header('Content-Type: application/vnd.ms-excel');
    header('Content-Disposition: attachment;filename="'.$title.'.xls"');
    header('Cache-Control: max-age=0');
    // If you're serving to IE 9, then the following may be needed
    header('Cache-Control: max-age=1');

    $objWriter->save('php://output');
    $flag = 1;
    if($flag){echo 'Exported successfully.';}
}

function check_session_redirect(){
    if(empty($_SESSION['user_id'])){
        header('HTTP/1.1 403 Unauthorized');
        exit;           
    }
}

function userExport(){
    check_session_redirect();
    //$status = $_SESSION['status'];
    $search = $_REQUEST['search'];
    $result = getUserDetails($search); 
    $objPHPExcel = new PHPExcel();
    $countExcelCols = 0;
    
    if(!empty($result)){
        foreach ($result as $i => $product) {
            unset($product->user_id);
        }
    }
    
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Name');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B1','Username');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C1','Mobile #');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('D1','Position');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('E1','Role');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('F1','Adsphere Authenticated');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('G1','Authy Authenticated');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('H1','Verified Date');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('I1','Assistant Admin');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('J1','Status');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('K1','Last Login');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('L1','Total Logins');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('M1','Last 30 Days Logins');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('N1','Tracking & Alerts');

    $j = 'A';
    $rowCount = 2;
    if(!empty($result)){
        foreach($result as $i => $product){
             if($rowCount == 8){$j++;}
             $col =  $j.$rowCount;

             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$rowCount, $name = $product->name == ''  ? '-' : $product->name);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$rowCount, $product->username);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$rowCount, '+'.$product->country_code.' '.$product->phone_number);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('D'.$rowCount, $product->position = $product->position == '' ? '-' : $product->position);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('E'.$rowCount, ucfirst($product->role));
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('F'.$rowCount, $product->passphrase ? 'No' : 'Yes');
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('G'.$rowCount, $product->authy_cookie ? 'Yes' : 'No');
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('H'.$rowCount, !empty($product->vdate) ? $product->vdate : '-');
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('I'.$rowCount, $product->assistant_admin == 1 ? 'Yes' : 'No');
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('J'.$rowCount, $product->status);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('K'.$rowCount, $product->last_login == '0000-00-00 00:00:00' ? '-' :$product->last_login);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('L'.$rowCount, $product->login_count);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('M'.$rowCount, $product->last_30_days_count);
             $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('N'.$rowCount, $product->tracking_alert_subscribed == 1 ? 'Yes' : 'No');
             $rowCount++; 
         }
    }
   
    if(empty($result)){
        $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue('A2','No Records Found.');
            
            $objPHPExcel->getActiveSheet()->mergeCells('A2:N2');
            $style = array(
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                )
            );
                    
            $sheet = $objPHPExcel->getActiveSheet();
            $sheet->getStyle("A2:N2")->applyFromArray($style);
        }
           
    
    $title = 'User_Details'.date('m-d-Y');
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('User_Details'.date('m-d-Y'));

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);

    // Redirect output to a clientÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢s web browser (Excel5)
    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
    ob_end_clean();
    header('Content-Type: application/vnd.ms-excel');
    header('Content-Disposition: attachment;filename="'.$title.'.xls"');
    header('Cache-Control: max-age=0');
    // If you're serving to IE 9, then the following may be needed
    header('Cache-Control: max-age=1');

    $objWriter->save('php://output');
    $flag = 1;
    if($flag){echo 'Exported successfully.';}
    
}

function getCompanyDetails($search){
    $where = '';
    $mobile = array();
    if (!empty($search)){  $where = ' WHERE u.username LIKE "%'.$search.'%" OR u.phone_number LIKE "%'.$search.'%" OR u.status LIKE "%'.$search.'%" OR c.company_name LIKE "%'.$search.'%" OR c.company_type LIKE "%'.$search.'%" OR c.company_size LIKE "%'.$search.'%" OR c.revenue LIKE "%'.$search.'%" ';}

    $sql="SELECT u.user_id,u.company_id,u.username,u.role,u.phone_number,u.status,c.company_name,c.company_type,c.company_size,c.revenue,u.passphrase,u.authy_cookie,concat(u.first_name,' ',u.last_name) as name, DATE_FORMAT(u.verify_date,'%m/%d/%Y') as vdate, country_code, c.eula_flag,u.adsphere_authenticate, u.client,c.network_tab, c.staging_access,u.account_owner
            FROM user u INNER JOIN company c ON c.id = u.company_id ".$where." ORDER BY c.company_name ASC ";
    $db = getConnection();
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/

    foreach($result as $k => $v){
        $v->uname = !empty($v->name) ? $v->name : '-';
       if(!empty($v->phone_number)){ 
            $mobile = explode("-",$v->phone_number); 
            if(!isset($mobile[2])){$mobile[2] = '';}
            if(!isset($mobile[1])){$mobile[1] = '';}
            $v->phone_number = "(".$mobile[0].") ".$mobile[1].'-'.$mobile[2];
            if(!empty($v->account_owner)){
                $account_owner = explode('@',$v->account_owner);
                $v->account_owner = ucwords(str_replace('.', ' ',$account_owner[0]));
            }
       }

    }
    return $result;
}

function showActiveSharedUsers() {
    $request            = Slim::getInstance()->request();
    $user               = json_decode($request->getBody());      
    $page               = $user->page ;
    if($page == 'reports') {
        $join_condition = ' INNER JOIN excel_exports e ON u.user_id = e.shared_by ';
    } else if($page == '"filters"') {
        $join_condition = ' INNER JOIN user_filters e ON u.user_id = e.shared_by ';
    } else {
        $join_condition = ' INNER JOIN users_list e ON u.user_id = e.shared_by ';
    }   
    $admin_id = $_SESSION['user_id'];
    if($_SESSION['role'] == 'user') {
        $admin_id = $_SESSION['admin_id'];
    }
    $sql="SELECT u.user_id,u.status,concat(u.first_name,' ',u.last_name) as name,u.email "
    . "FROM user u "
    . "INNER JOIN admin_user a ON u.user_id = a.user_id  OR u.user_id = a.admin_id ".$join_condition
    . "WHERE u.status = 'active' AND a.admin_id= " .$admin_id ." group by u.user_id ORDER BY u.first_name ASC, u.last_name ASC";
    $db = getConnection();
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}

function getUserDetails($search){
    $where = '';
    $admin_id = "2056";
    // $admin_id = $_SESSION['user_id'];
    // if($_SESSION['role'] == 'user') {
    //     $admin_id = $_SESSION['admin_id'];
    // }

    if (!empty($search)){  $where = ' AND (u.username LIKE "%'.$search.'%" OR u.phone_number LIKE "%'.$search.'%" OR u.status LIKE "%'.$search.'%" OR u.first_name LIKE "%'.$search.'%" OR u.last_name LIKE "%'.$search.'%" OR u.position LIKE "%'.$search.'%"  OR u.last_login LIKE "%'.$search.'%" )';}
    $sql="(SELECT u.user_id,u.username,u.phone_number,u.password,u.status,concat(u.first_name,' ',u.last_name) as name,u.position,u.role,u.last_login,u.email,u.passphrase,u.assistant_admin,u.authy_cookie, DATE_FORMAT(u.verify_date,'%m/%d/%Y') as vdate , country_code , COUNT(user_logs.user_id) as login_count, SUM(CASE WHEN user_logs.created_at >= '".date('Y-m-d', strtotime('-30 days'))."' THEN 1 ELSE 0 END) as last_30_days_count, u.tracking_alert_subscribed , if(u.authy_bypass_until > '0000-00-00' and u.authy_bypass_until > (NOW() - INTERVAL 24 HOUR), 1, 0) skip_authy "
           . "FROM user u "
           . "INNER JOIN admin_user a ON u.user_id = a.user_id LEFT JOIN user_logs ON u.user_id = user_logs.user_id "
           . "WHERE u.status != 'deleted' and a.admin_id= " .$admin_id . $where." group by u.user_id)";
    $sql.=" union all ";
    $sql.="(SELECT u.user_id,u.username,u.phone_number,u.password,u.status,concat(u.first_name,' ',u.last_name) as name,u.position,u.role,u.last_login,u.email,u.passphrase,u.assistant_admin,u.authy_cookie, DATE_FORMAT(u.verify_date,'%m/%d/%Y') as vdate , country_code , COUNT(user_logs.user_id) as login_count, SUM(CASE WHEN user_logs.created_at >= '".date('Y-m-d', strtotime('-30 days'))."' THEN 1 ELSE 0 END) as last_30_days_count, u.tracking_alert_subscribed , if(u.authy_bypass_until > '0000-00-00' and u.authy_bypass_until > (NOW() - INTERVAL 24 HOUR), 1, 0) skip_authy "
           . "FROM user u "
           . "LEFT JOIN user_logs ON u.user_id = user_logs.user_id "
           . "WHERE u.status != 'deleted' and u.user_id= " .$admin_id . $where." group by u.user_id)";
    $sql.="ORDER BY name ASC";
    $db = getConnection();
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    
    foreach($result as $k => $v){
        $v->ads_authenticated = 0;
        if($v->password == '' && $v->passphrase != '') {
            $v->ads_authenticated = 1;
        }
       if(!empty($v->phone_number)){ 
            $mobile = explode("-",$v->phone_number); 
            if(!isset($mobile[2])){$mobile[2] = '';}
            if(!isset($mobile[1])){$mobile[1] = '';}
            $v->phone_number = "(".$mobile[0].") ".$mobile[1].'-'.$mobile[2];
       }
    }
    return $result;
}

function updateAccount() {
    $db = getConnection();
    $request            = Slim::getInstance()->request();
    $user               = json_decode($request->getBody());      
    $type               = isset($user->company_type) ? $user->company_type : '';
    $company_name       = isset($user->company_name) ? $user->company_name : '';
    $company_size       = isset($user->company_size) ? $user->company_size : '';
    $revenue            = isset($user->revenue) ? $user->revenue : ''; 
    $amount             = str_replace("$","",$revenue);
    $r                  =  str_replace(",","",$amount);
    $r1                 = intval(($r*100))/100;
    $r1_array           = explode(".",$r1);
    $amt_array          =  explode(".",$amount);
    $company_id         = $user->company_id;
    
    $access_type        = $user->access_type;
    $video_download_limit = $user->download_limit;
    $monthly_cap        = "NULL";
    $account_owner      = isset($user->account_owner) ? $user->account_owner : ''; 
    $account_owner_zoho_id = isset($user->account_owner_zoho_id) ? $user->account_owner_zoho_id : ''; 
    $country_code       = $user->country_code;
    $old_account_name   = $user->old_company_name;
    if(!empty($user->monthly_cap))
        $monthly_cap = $user->monthly_cap;

    $field_monthly_cap = ", monthly_cap = ".$monthly_cap." ";
    $domain_override   = (isset($user->domain_override) && $user->domain_override ) ? '1' : '0';

    $update_authy = "";


    if( isset($companyInfo->data[0]->ADS_Admin->id)  && ($user->zoho_contact_id  != $companyInfo->data[0]->ADS_Admin->id)) {
        echo json_encode(array('status'=> 1,'warning' => '5'));
        exit;
    }

    $getUpdatedAuthyId = userAuthyChange($user->user_id,$user->mobile,$user->username,$user->country_code);
    if(!isset($getUpdatedAuthyId['same_number'])){ //$getUpdatedAuthyId != "same_number"
        $update_authy = ", authy_id='".$getUpdatedAuthyId['authy_id']."'";
    }

    $user->update_authy = $update_authy;
    $update_account_owner ='';
    if(!empty($account_owner)){
        $update_account_owner = ", account_owner='".$account_owner."'";
    }

    $company_details                    = createCompanyData($user);
  
    $user->edit_comp = 1;

    $user_details                       = createUserData($company_details , $user);

    $user_details['assistant_admin']   = false;
    
    updateCompanyCall($user);
    updateUserCall($company_details , $user);
    
              // move all users from old account to new  in zoho
              $account_info                    = getRecordByIdInZoho('Accounts' , $user->old_account_id);
              $old_account_name                = urlencode($old_account_name);
              $usersInfoFromOldAccount         = searchUserInZoho('Contacts/search', 'criteria=(Account_Name:equals:'.$old_account_name.')');
       
            
            $company_details['network_tab']                 = $account_info->data[0]->Network_Tab;
            $company_details['eula_overriden']              = $account_info->data[0]->EULA_Overriden;
            $company_details['ads_acct_id']                 = $account_info->data[0]->Adsphere_Acct_ID;
            $company_details['ads_authenticated']           = $account_info->data[0]->ADS_Authenticated;
            $company_details['authy_authenticated']         = $account_info->data[0]->Authy_Authenticated;
            $company_details['ads_verified_date']           = $account_info->data[0]->ADS_Verified_Date;
            $company_details['client']                      = $account_info->data[0]->Client;
           
            $companyInfoFromZoho                            = APIManageZOHOAccount('update',$company_details);
         
            if(!empty($companyInfoFromZoho)) {
                $sql = "UPDATE company SET zoho_account_id='".$companyInfoFromZoho['zoho_account_id']."' WHERE id = '".$company_id."'";
                $stmt    = $db->prepare($sql);
                $stmt->execute();

                
                if(!empty($account_info)){
                    $company_details['Company_Status']          = '';
                    $company_details['ADS_Record_ID']           = '';
                    $company_details['EULA_Overriden']          = '';
                    $company_details['Max_Users_Allowed']       = '';
                    $company_details['Client']                  = '';
                    $company_details['Adsphere_Acct_ID']        = '';
                    $company_details['Authy_Authenticated']     = '';
                    $company_details['ADS_Authenticated']       = '';
                    $company_details['Network_Tab']             = '';
                    $company_details['ADS_Admin']               = '';
                    $company_details['company_type']            = '';
                    $company_details['company_size']            = '';
                    $company_details['company_revenue']         = '';
                    $company_details['ads_verified_date']       = '';
                    $company_details['zoho_account_id']         = $account_info->data[0]->id;
                    
                }
                $account_info                                   =  APIManageZOHOAccount('delete' , $company_details);
                if(!empty($usersInfoFromOldAccount)) {
                    $usersInfoFromOldAccount->data[0]->company_name = $company_details['company_name'];
                    $account_info                                   =  APIManageZOHOContact('move_old_to_new' , $usersInfoFromOldAccount->data , true);
                }
            
                $company_details['asd_admin']       = $user->zoho_contact_id;
                $company_details['zoho_account_id'] = $companyInfoFromZoho['zoho_account_id']; 
                APIManageZOHOAccount('updateAdsAdmin',$company_details);
        
            }
    echo json_encode(array('status'=> 1));
    $db = null;                   

}

function createSyncNewAccount() {
    $request            = Slim::getInstance()->request();
    $user               = json_decode($request->getBody());        
    $type               = isset($user->company_type) ? $user->company_type : '';
    $company_name       = isset($user->company_name) ? $user->company_name : '';
    $company_size       = isset($user->company_size) ? $user->company_size : '';
    $revenue            = isset($user->revenue) ? $user->revenue : ''; 
    $amount             = str_replace("$","",$revenue);
    $r                  =  str_replace(",","",$amount);
    $r1                 = intval(($r*100))/100;
    $r1_array           = explode(".",$r1);
    $amt_array          =  explode(".",$amount);
    
    $access_type        = $user->access_type;
    $video_download_limit = $user->download_limit;
    $monthly_cap        = "NULL";
    $account_owner      = isset($user->account_owner) ? $user->account_owner : ''; 
    $account_owner_zoho_id = isset($user->account_owner_zoho_id) ? $user->account_owner_zoho_id : ''; 
    $country_code       = $user->country_code;
    $old_account_name   = $user->old_company_name;
    if(!empty($user->monthly_cap))
        $monthly_cap = $user->monthly_cap;

    $field_monthly_cap = ", monthly_cap = ".$monthly_cap." ";
    $domain_override   = (isset($user->domain_override) && $user->domain_override ) ? '1' : '0';
    $company_id        = $user->company_id;
    // $validate_result = validateUserInZoho($user['username'],$user['company_name'],'super_admin'); 
    
    // if(!is_array($validate_result)){
    //     echo json_encode(array('status'=>3, 'err_zoho_user_msg'=>USER_EXISTS_ZOHO_MSG));
    //     exit;
    // }

    $check_company_exist_sql    = "SELECT COUNT(*) as count FROM company WHERE company_name = '".$user->company_name."'";
    $company_count              = execute_query_get_result($check_company_exist_sql);
        
    if($company_count[0]['count'] > 0) {
        echo json_encode(array('status'=>2, 'error_msg'=>'Company Already Exists in Adsphere'));
        exit;
    }

    if(isset($user->user_id)){
        $getUpdatedAuthyId = userAuthyChange($user->user_id,$user->mobile,$user->username,$user->country_code);
    } else {
        $getUpdatedAuthyId = ConnectToAuthy($user->mobile,$user->username, $country_code);
    }
    
    if(!isset($getUpdatedAuthyId['error'])){
        $company_details['company_name']    = $company_name;
        $company_details['company_type']    = $type;
        $company_details['company_size']    = $company_size;
        $company_details['company_revenue'] = $revenue;
        $company_details['account_owner']   = $account_owner;
        $company_details['account_owner_zoho_id'] = $account_owner_zoho_id;
        $company_details['status']          = 'Active';
        $company_details['download_limit']   = $user->download_limit;
        $company_details['client']          = ($user->client == 'Yes') ? true : false;

        
        // $save_sql= "INSERT INTO company (company_name,company_type,company_size,video_download_limit,revenue,created_date,modified_date) VALUES ('".addslashes($user->company_name)."','".$type."','".$company_size."','".$video_download_limit."','".$revenue."','".date("Y-m-d h:i:s")."','".date("Y-m-d h:i:s")."')";  
        $sql = "UPDATE company SET company_name='".addslashes($company_details['company_name'])."',company_type='".$company_details['company_type']."',company_size='".$company_details['company_size']."',revenue='".$company_details['company_revenue']."', video_download_limit='".$company_details['download_limit']."',modified_date='".date("Y-m-d h:i:s")."' WHERE id = '".$company_id."'";
        
        try{
            $db = getConnection();
            $stmt    = $db->prepare($sql);
            $stmt->execute();
                // $company_id = $db->lastInsertId();
            // $company_id = 390;
            $company_details['ads_record_id'] = $company_id;
         
            if(!empty($company_id)){
                $passphrase = date('Y-m-d-H:i:s'); //2015-06-30 12:40:27
                $resetLink = 'http://'.HOST.'/drmetrix/#!/resetPassword/'.urlencode($passphrase);
                
               $update_authy = "";
                if(!isset($getUpdatedAuthyId['same_number'])){ //$getUpdatedAuthyId != "same_number"
                    $update_authy = ", authy_id='".$getUpdatedAuthyId['authy_id']."'";
                }

                $update_account_owner ='';
                if(!empty($account_owner)){
                    $update_account_owner = ", account_owner='".$account_owner."'";
                }


               $sql = "UPDATE user SET company_id =  $company_id, client='".$user->client."',first_name = '".addslashes($user->first_name)."',last_name = '".addslashes($user->last_name)."',phone_number = '".$user->mobile."',username = '".addslashes($user->username)."',email = '".addslashes($user->username)."', country_code='".$user->country_code."', access_type = '".$access_type."', domain_override='".$domain_override."' ".$field_monthly_cap." ".$update_authy." ".$update_account_owner." WHERE user_id = '".$user->user_id."'";  
                $stmt = $db->prepare($sql);
                $stmt->execute();

                $params['user_id']      = $user->user_id;
                $params['company_id']   = $user->company_id; 
                foreach($user->price as $k => $v){
                    $company_details['users_limit'] = $v->users_limit;
               }
                updatePricingCompanyId($params);
                $zoho_account_id = getCompanyInfo($user->company_id);
                $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;

                $user_details['company_name']     = $company_details['company_name'];
                $user_details['zoho_company_id']  = $company_details['zoho_account_id'];
                $user_details['first_name']       = $user->first_name;
                $user_details['last_name']        = $user->last_name;
                $user_details['username']         = $user->username;
                $user_details['mobile']           = ($country_code != 1) ? $country_code.'-'.$user->mobile : $user->mobile;
                $user_details['client']           = $company_details['client'];
                $user_details['company_type']     = $company_details['company_type'];
                $user_details['contact_owner']    = $account_owner_zoho_id;
                $user_details['activation_link']  = $resetLink;
                $user_details['assistant_admin']  = false;
                $user_details['role']             = 'Admin';
                $user_details['status']           = 'Active';
                $user_details['users_limit']      = 'Active';
                $user_details['ads_record_id']    = $user->user_id;
                $user_info                        = getUserInfoById($user->user_id);
                $user_details['zoho_contact_id']  = $user_info[0]->zoho_contact_id;

              

                        
                // move all users from old account to new  in zoho
                $account_info                                   = getRecordByIdInZoho('Accounts' , $user->old_account_id);

                $company_details['network_tab']                 = $account_info->data[0]->Network_Tab;
                $company_details['eula_overriden']              = $account_info->data[0]->EULA_Overriden;
                $company_details['ads_acct_id']                 = $account_info->data[0]->Adsphere_Acct_ID;
                $company_details['ads_authenticated']           = $account_info->data[0]->ADS_Authenticated;
                $company_details['authy_authenticated']         = $account_info->data[0]->Authy_Authenticated;
                $company_details['ads_verified_date']           = $account_info->data[0]->ADS_Verified_Date;
                $company_details['client']                      = $account_info->data[0]->Client;
                $companyInfoFromZoho                            = APIManageZOHOAccount('add',$company_details);
                
                if(!empty($companyInfoFromZoho)) {
                    $userInfo                           = APIManageZOHOContact('update_account_name',$user_details);
                    $company_details['asd_admin']       = $user_details['zoho_contact_id'];
                    $company_details['zoho_account_id'] = $companyInfoFromZoho['zoho_account_id']; 
                    $updateResponse                     = APIManageZOHOAccount('updateAdsAdmin',$company_details);
                }
                     
                $old_account_name                = urlencode($old_account_name);
                $usersInfoFromOldAccount         = searchUserInZoho('Contacts/search', 'criteria=(Account_Name:equals:'.$old_account_name.')');
              
                if(!empty($account_info)) {
                    $company_details['Company_Status']          = '';
                    $company_details['ADS_Record_ID']           = '';
                    $company_details['EULA_Overriden']          = '';
                    $company_details['Max_Users_Allowed']       = '';
                    $company_details['Client']                  = '';
                    $company_details['Adsphere_Acct_ID']        = '';
                    $company_details['Authy_Authenticated']     = '';
                    $company_details['ADS_Authenticated']       = '';
                    $company_details['Network_Tab']             = '';
                    $company_details['ADS_Admin']               = '';
                    $company_details['company_type']            = '';
                    $company_details['company_size']            = '';
                    $company_details['company_revenue']         = '';
                    $company_details['ads_verified_date']       = '';
                    $company_details['zoho_account_id']         = $account_info->data[0]->id;
                    $account_info                               =  APIManageZOHOAccount('delete' , $company_details);
                }
      

                if(!empty($usersInfoFromOldAccount)) {
                    $usersInfoFromOldAccount->data[0]->company_name = $company_details['company_name'];
                    $account_info                                   =  APIManageZOHOContact('move_old_to_new' , $usersInfoFromOldAccount->data , true);

                   
                }
            }
            echo json_encode(array('status'=>1));
            $db = null;                   
            
        } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
        }
    }
}

function saveCompany(){
    $request            = Slim::getInstance()->request();
    $user               = json_decode($request->getBody());
   
    $company_details    = array();
    
    // $pricing_length     = count($user->billing);
    $pricing_length = 'monthly';
    
    $type               = isset($user->company_type) ? $user->company_type : '';
    $company_size       = isset($user->company_size) ? $user->company_size : '';
    $revenue            = isset($user->revenue) ? $user->revenue : '';
    $country_code       = $user->country_code;
    $download_limit     = $user->download_limit;
    $timeout            = $user->timeout;
    $no_of_apps         = $user->no_of_apps;
    $access_type        = $user->access_type;
    $client             = $user->client;   
    $account_owner      = $user->account_owner;          
    $domain_override    = (isset($user->domain_override) && $user->domain_override ) ? '1' : '0';
    $field_value        = "";
    $monthly_cap        = "";
    $create             = isset($user->create ) ? $user->create : '';
    $_SESSION['record_exists'] = 0;
    // $email_contact_no_check    =  isset($user->active ) ? $user->active : '';
    $account_owner_zoho_id      = $user->account_owner_zoho_id;  
    $insert_to_adsphere         = $update_to_adsphere = 0;
    $condition_domain_check     = $condition_email_check =  $condition_zoho_domain_check = $condition_contactName_check = $condition_contactName_check_count = 0;
    $domain_check_skip          = 0;
    $user->passphrase = date('Y-m-d-H:i:s'); //2015-06-30 12:40:27
    $resetLink = 'http://'.HOST.'/drmetrix/#!/resetPassword/'.urlencode($user->passphrase);

    $company_details['company_name']    = $user->company_name;
    $company_details['company_type']    = $type;
    $company_details['company_size']    = $company_size;
    $company_details['company_revenue'] = $revenue;
    $company_details['account_owner']   = $account_owner;
    $company_details['account_owner_zoho_id'] = $account_owner_zoho_id;
    $company_details['status']          = 'Active';
    $company_details['client']          = ($client == 'Yes') ? true : false;

    for($i = 0; $i< $pricing_length;$i++){
        $company_details['users_limit'] = $user->users_limit->$i;
    }
    

    $user_details['first_name']      = $user->first_name;
    $user_details['last_name']       = $user->last_name;
    $user_details['username']        = $user->username;
    $user_details['mobile']          = ($country_code != 1) ? $country_code.'-'.$user->mobile : $user->mobile;
    $user_details['role']            = 'Admin';
    $user_details['status']          = 'Active';
    $user_details['company_name']    = $company_details['company_name'];
    $user_details['client']          = $company_details['client'];
    $user_details['company_type']    = $company_details['company_type'];
    $user_details['contact_owner']   = $account_owner_zoho_id;
    $user_details['activation_link'] = $resetLink;
    $user_details['assistant_admin'] = false;

    $db                                 = getConnection();

    if(!empty($user->monthly_cap)){ 
        $field_value = ",monthly_cap";
        $monthly_cap = ",".$user->monthly_cap;
    }

    //Check company in ADS
    $check_company_exist_sql    = "SELECT COUNT(*) as count FROM company WHERE company_name = '".addslashes($user->company_name)."'";
    $company_count              = execute_query_get_result($check_company_exist_sql);
        
    if($company_count[0]['count'] > 0) {
        echo json_encode(array('status'=>2, 'error_msg'=>'Company Already Exists in Adsphere'));
        exit;
    }

    //Check company in ZOHO. If not, warning
    if($create == '') {
        $companydata['company_name'] = $user->company_name;
        $companyInfo                 = checkAccountNameInZoho($companydata);
    
        if($companyInfo->account_found_flag == 0) {
            echo json_encode(array('status'=>4, 'error_msg'=>'Company not Exists in Zoho'));
            exit;
        } else {
            $create = 'create';
            // $companyInfo->account_found_flag = 1;
            // $insert_to_adsphere = 1;
        }
    }
    
    if($create == 'create' ) {
        $userdata['email']          = $user->username;
        $userdata['type']           = 'add';
        $userdata['firstname']      = $user->first_name;
        $userdata['lastname']       = $user->last_name;
        $userdata['company_name']   = $user->company_name;
        $userdata['role']           = 'Admin';
        $userInfo                   = checkEmailInZohoDifferentCompany($userdata);
    
        if(!empty($userInfo) ) {
            if( $userInfo->email_found_flag == 1) {
                $condition_email_check = 1 ;
                $_SESSION['record_exists'] = 1;
                $_SESSION['userInfo']  = $userInfo;
                echo json_encode(array('status'=>5, 'error_msg'=>'email exists in Zoho different account', 'userInfo' => $userInfo));
                exit;
            } 
        }
    }
    
    $admin_domain                   = explode('@', $user->username);
    $skip_domain                    = explode('.', $admin_domain[1]);
    $skip_domain_list               = explode(',',SKIP_PUBLIC_DOMAINS);

    if(in_array($skip_domain[0],$skip_domain_list)) {
        $domain_check_skip = 1;
    }

    if ($create == 'create' && $condition_email_check == 0  && $domain_check_skip == 0){
        $params['domain_override']      = $domain_override;
        $params['admin_email']          = $user->username;
        $userInfo                       = checkDomainOnDifferentAccountADSForSaveCompany($params);
      
        $_SESSION['userInfo']           = $userInfo;
        $_SESSION['record_exists']      = 1;
        if(!empty($userInfo)) {
            if( $userInfo['domain_found_flag']  == 1) {
                $condition_domain_check = 1 ;
                echo json_encode(array('status'=> 6, 'error_msg'=>'domain exists in ADS different account', 'userInfo' => $userInfo));
                exit;
            }
        }
    }

    if ($create == 'create' && $condition_domain_check == 0 && $condition_email_check == 0 && $domain_check_skip == 0){
        $params['last_name']                = $user->last_name;
        $params['first_name']               = $user->first_name;
        $params['company_name']             = $user->company_name;
        $params['admin_domain']             = explode('@', $user->username);
        
        $userInfo                           = checkDomainOnDifferentAccountZOHO($params);
        if(!empty($userInfo) ) {
            if( $userInfo->zoho_domain_found_flag == 1) {
                $condition_zoho_domain_check = 1 ;
                $_SESSION['userInfo']  = $userInfo;
                $_SESSION['record_exists'] = 1;
                echo json_encode(array('status'=> 9, 'error_msg'=>'domain exists in Zoho different account', 'userInfo' => $userInfo));
                exit;
            } 
        }
    }
        
    if ($create == 'create'  && $condition_zoho_domain_check == 0) {
        $params['last_name']                = $user->last_name;
        $params['first_name']               = $user->first_name;
        $params['company_name']             = $user->company_name;
        $params['admin_email']              = $user->username;
        $userInfo                           = checkContactNameInDifferentCompanyInZoho($params);
        
        if($userInfo->contact_found_flag == 1) {
            $user->zoho_user_id             = $userInfo->data[0]->id;
            $user->user_id                  = $userInfo->data[0]->ADS_Record_ID;
            $condition_contactName_check    = 1;
            $_SESSION['userInfo']           = $userInfo;
            $_SESSION['record_exists']      = 1;
            echo json_encode(array('status'=> 10, 'error_msg'=>'contact name exists in Zoho different account', 'userInfo' => $userInfo));
            exit;
        }
    }

    if( $create == 'use_same_zoho') {
        if($_SESSION['userInfo']->data[0]->ADS_User_Role == 'Admin') {
            echo json_encode(array('status'=> 'domain_yes_admin_role', 'error_msg'=>'domain exists in Zoho with admin role hence exit message display', 'userInfo' => $_SESSION['userInfo']));
            exit;
        }
    }
    if($create == 'use_same' || $create == 'use_same_zoho' || $create == 'new_contact' || $create == 'new_contact_ads' || $domain_check_skip == 1) {
        $insert_to_adsphere         = 1;
    } else if($create == 'use_same_ads' ) {
        $update_to_adsphere         = 1;
    } 

    if(($_SESSION['record_exists'] == 1) && ($condition_email_check == 0 && $condition_domain_check  == 0 && $condition_zoho_domain_check == 0 && $condition_contactName_check == 0))
    {
        $insert_to_adsphere         = 1;
    }

    if($insert_to_adsphere == 1) {
        $get_authy_detail = ConnectToAuthy($user->mobile,$user->username, $country_code);
        if(!empty($get_authy_detail)  && isset($get_authy_detail['authy_id']) ){
            $user->authy_id                     = $get_authy_detail['authy_id'];
            try{
                $companyCreateArray                 = saveCompanyCall($user);
                $company_details['ads_record_id']   = $companyCreateArray['companyId'];
                if(!empty($companyCreateArray['companyId'])){
                    $company_details['company_id']  = $company_details['ads_record_id'] = $companyCreateArray['companyId'];
                    $userNew                        = saveUserCall($company_details, $user);
                    $user_details['ads_record_id']   = $userNew['userId'];
                   
                
                    for($i = 0; $i< $pricing_length;$i++){
                        $company_details['users_limit'] = $user->users_limit->$i;
                        //Issue 5140 resolved.
                        $tier = 'Default' ;         
                        if(isset($user->tier)){
                            $tier = $user->tier->$i;
                        }
                        $amount = 0;
                        if(isset($user->amount->$i)){
                            $amt = str_replace("$","",$user->amount->$i);
                            $r =  str_replace(",","",$amt);
                            $r1 = intval(($r*100))/100;
                            $r1_array = explode(".",$r1);
                            $amt_array =  explode(".",$amt);
                            
                            $b = (isset($r1_array[1]) && $r1_array[1]!='') ? $r1_array[1] : '00';
                            
                            $amount = '$'.$amt_array[0].'.'.$b;
                        }
                    
                        $save_sql= "INSERT INTO pricing (frequency,tier,users_limit,amount,user_id,company_id,created_date,modified_date) VALUES ('".$user->billing->$i."','".$tier."','".$company_details['users_limit']."','".$amount."','".$userNew['userId']."','".$company_details['company_id']."','".date("Y-m-d H:i:s")."','".date("Y-m-d H:i:s")."')";
                        $stmt = $db->prepare($save_sql);
                        $stmt->execute();
                    }
                    
                    if($create == 'use_same' || $create == 'new_contact') {
                      
                        // $company_details['zoho_account_id'] = $_SESSION['userInfo']->data[0]->Account_Name->id;
                        // $company_details['ads_admin']       = $_SESSION['userInfo']->data[0]->id;
                        $companyInfoFromZoho                = APIManageZOHOAccount('update',$company_details);

                        $user_details['account_name']       = $company_details['company_name'];
                        $user_details['zoho_company_id']    = $companyInfoFromZoho['zoho_account_id'];
                        $userInfo                           = APIManageZOHOContact('update',$user_details);

                        $company_details['zoho_account_id']     = $companyInfoFromZoho['zoho_account_id'];
                        $company_details['asd_admin']           = $userInfo['zoho_id'];
                        APIManageZOHOAccount('updateAdsAdmin',$company_details);
                    } else if($create == 'use_same_zoho') {
                        $company_details['status']          = 'Active';
                        
                        $company_details['zoho_account_id'] = $_SESSION['userInfo']->data[0]->Account_Name->id;
                        $companyInfoFromZoho                = APIManageZOHOAccount('update_use_same_zoho',$company_details);

                        updateAccountInfo($company_details['zoho_account_id'] ,$company_details['ads_record_id']);
                        $user_details['account_name']       = $company_details['company_name'];
                        $user_details['zoho_company_id']    = $companyInfoFromZoho['zoho_account_id'];
                        $userInfo                           = APIManageZOHOContact('update',$user_details);
                        
                        $company_details['zoho_account_id']     = $_SESSION['userInfo']->data[0]->Account_Name->id;
                        $company_details['asd_admin']           = $userInfo['zoho_id'];
                        APIManageZOHOAccount('updateAdsAdmin',$company_details);
                    } else{
                        $companyInfoFromZoho                = APIManageZOHOAccount('add',$company_details);
                        if(!empty($companyInfoFromZoho)) {
                            $user_details['zoho_company_id']   = $companyInfoFromZoho['zoho_account_id'];
                            $userInfo                           = APIManageZOHOContact('add',$user_details);
                        }
                        if(!empty($userInfo)) {
                            $company_details['asd_admin']       = $userInfo['zoho_id'];
                            $company_details['zoho_account_id'] = $companyInfoFromZoho['zoho_account_id']; 
                            APIManageZOHOAccount('updateAdsAdmin',$company_details);
                        }
                    }
                   
                    echo json_encode(array('status'=>1));
                    $db = null;                   
                }
            } catch (Exception $ex) {
                echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
            }
        } else{
            $error = '';
            if(isset($get_authy_detail['error'])){
                $error = $get_authy_detail['error'];
            }
            echo json_encode(array('status'=>0, 'error'=>$error));
        }
    }else if($update_to_adsphere == 1) {
        $update_authy = '';
        // $getUpdatedAuthyId = userAuthyChange($user->user_id,$user->mobile,$user->username,$user->country_code);
        $getUpdatedAuthyId = userAuthyChange($_SESSION['userInfo']['user_id'],$user->mobile,$user->username,$user->country_code);
        if(!isset($getUpdatedAuthyId['same_number'])){ //$getUpdatedAuthyId != "same_number"
            $update_authy = ", authy_id='".$getUpdatedAuthyId['authy_id']."'";
        }
        $user->update_authy = $update_authy;
        if($condition_contactName_check == 1) {
            if($condition_contactName_check == 1 && $condition_contactName_check_count == 1) {
                $user_details['username']               = $user_details['username']; // primary
                $user_details['secondary_email']        = $user_details['secondary_email'] ; // secondary
            

                $get_authy_detail = ConnectToAuthy($user->mobile,$user->username, $country_code);
                if(!empty($get_authy_detail)  && isset($get_authy_detail['authy_id']) ){
                    $user->authy_id                     = $get_authy_detail['authy_id'];
                }
                $companyCreateArray                     = saveCompanyCall($user);
                $company_details['ads_record_id']       = $companyCreateArray['companyId'];
            
                $userNew                                = updateUserCall($company_details, $user);
                $user_details['ads_record_id']          = $userNew['userId']; 
               
                $updateContactResponse                  = APIManageZOHOContact('update',$user_details);
            } else if($condition_contactName_check == 1 && $condition_contactName_check_count >= 1) {
                foreach($userInfo->data as $key => $value) {
                    if($value->ADS_User_Status == 'Active') {
                        echo json_encode(array('status'=> 5, 'userInfo' => $value));  
                        exit; 
                    } else if($value->ADS_User_Status == 'Inactive') {
                        echo json_encode(array('status'=> 6, 'userInfo' => $value));    
                        exit;
                    }
                }
            }
        } else {
            $company_details['company_name'] = $user->domain_account_name;
            $get_company_name = "SELECT c.company_name,c.company_type,u.client, u.account_owner, c.zoho_account_id, ao.zoho_contact_id as account_owner_id FROM company AS c INNER JOIN user u ON u.company_id = c.id INNER JOIN account_owner ao ON ao.email = u.account_owner WHERE u.user_id = '".$_SESSION['userInfo']['user_id']."' ";
            $stmt = $db->prepare($get_company_name);
            $stmt->execute();
            $get_cname = $stmt->fetchAll(PDO::FETCH_OBJ);

            $user->user_id      =  $_SESSION['userInfo']['user_id'];
            $user->zoho_user_id = $_SESSION['userInfo']['zoho_user_id'];

            updateCompanyCall($user);
            updateUserCall($company_details, $user);

            $user_details['account_name']       = $company_details['company_name'];
            $user_details['ads_record_id']      = $_SESSION['userInfo']['user_id'];
            // $userInfo                           = APIManageZOHOContact('update',$user_details);

            $account_info                       = getRecordByIdInZoho('Accounts', $get_cname[0]->zoho_account_id);
            
            if(isset($account_info->data)) {
                //check ads admin is different then user id
                $ads_admin = isset($account_info->data[0]->ADS_Admin->id) ? $account_info->data[0]->ADS_Admin->id : $account_info->data[0]->ADS_Admin ;
        
                if($ads_admin != $_SESSION['userInfo']['zoho_user_id'] && $ads_admin != '') {
                    echo json_encode(array('status'=> 8, 'error_msg'=>'admin exists for different account'));
                    exit;
                } else {
                    $user_details['account_name']       = $company_details['company_name'];
                    $zoho_account_id = getCompanyInfo($_SESSION['userInfo']['company_id']);
                    $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
                    $user_details['zoho_company_id']    = $company_details['zoho_account_id'] ;
                    $user_details['zoho_contact_id']    = $_SESSION['userInfo']['zoho_user_id'];
                    
                    $userInfo                           = APIManageZOHOContact('update_account_name',$user_details);
                    
                    $company_details['company_name']    = $user->company_name;
                    $company_details['company_type']    = $user->company_type;
                    $company_details['company_size']    = $user->company_size;
                    $company_details['company_revenue']  = $user->revenue;
                    $company_details['status']          = 'Active';
                    $company_details['zoho_account_id'] = $get_cname[0]->zoho_account_id;
                    $company_details['asd_admin']       = $_SESSION['userInfo']['zoho_user_id'];
                    $company_details['ads_record_id']   =  $_SESSION['userInfo']['user_id'];
                    $companyInfo                        = APIManageZOHOAccount('update_use_same_zoho',$company_details);
                    
                }
            }
        }
        
        $_SESSION['userInfo'] = '';
        $_SESSION['record_exists'] = 0;
        echo json_encode(array('status'=> 7));
        $db = null;           
      
    } else{
        $error = '';
        if(isset($get_authy_detail['error'])){
            $error = $get_authy_detail['error'];
        }
        echo json_encode(array('status'=>0, 'error'=>$error));
    }
}

function updateConfig(){

    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    $updateField = $updateValue = '';
    if( isset($user->notifSystemStatusLink) ) {
        $updateField = '"SYSTEM_STATUS_URL"';
        $updateValue = '"'.$user->notifSystemStatusLink.'"';
    } else if( isset($user->notifBlogStatusLink) ) {
        $updateField = '"ADSPHERE_BLOG_URL"';
        $updateValue = '"'.$user->notifBlogStatusLink.'"';
    }

    if($updateField) {
        $sql = ' UPDATE configs SET `value` = '.$updateValue.' WHERE name = ' . $updateField . ';';
        execute_sql($sql);
    }
    echo json_encode(array('status'=>1));
}

function updateUser(){

    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    $updateFields = '';
    if( isset($user->notifSystemStatusLink) ) {
        $updateFields = 'system_status_url = "'.$user->notifSystemStatusLink.'"';
    }
    if( isset($user->notifBlogStatusLink) ) {
        $updateFields .= $updateFields ? ', ' : '';
        $updateFields .= 'adsphere_blog_url = "'.$user->notifBlogStatusLink.'"';
    }
    if( isset($user->notificationBuildLink) ) {
        $updateFields .= $updateFields ? ', ' : '';
        $updateFields .= 'notification_build_url = "'.$user->notificationBuildLink.'"';
    }
    if( isset($user->notificationNewCount) ) {
        $updateFields .= $updateFields ? ', ' : '';
        $updateFields .= 'notification_new_count = "'.$user->notificationNewCount.'"';
    }
    if( isset($user->notificationNewLiClicked) ) {
        $updateFields .= $updateFields ? ', ' : '';
        $updateFields .= 'notification_new_clicked = "'.$user->notificationNewLiClicked.'"';
    }

    if( isset($user->theme) ) {
        $updateFields .= $updateFields ? ', ' : '';
        $updateFields .= 'theme = "'.$user->theme.'"';
    }

    if($updateFields) {
        $sql = ' UPDATE user SET '.$updateFields.' WHERE user_id = ' . $_SESSION['user_id'] . ';';
        execute_sql($sql);
    }
    echo json_encode(array('status'=>1));
}

function saveUser(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
   
    $first_name = isset($user->first_name) ? $user->first_name : '';
    $last_name = isset($user->last_name) ? $user->last_name : '';
    $role = isset($user->role) ? $user->role : '';
    $position = isset($user->position) ? $user->position : '';
    $country_code = $user->country_code;
    $timeout = $user->timeout;
    $no_of_apps = $user->no_of_apps;
    $assistant_admin = $user->assistant_admin;
    $condition_email_check = 0 ;
    $condition_contactName_check = $condition_contact_ads_found = $condition_contact_active_ads = $condition_contact_inactive_ads = $condition_contactName_check_count = $condition_contactName_check_count_ads = $condition_contact_inactive_zoho = $condition_contact_active_zoho = 0 ;
    $email_contact_no_check       = $user->active;
    $userZohoInfo                 = array();
    
    $_SESSION['condition_contactName_check_count_ads']  = 0;
    // $user->type = 'active';

    if($_SESSION['role'] != 'superadmin') {
        $user->admin_id = getAdminOfUser();
    }else{
        $user->admin_id = isset($user->admin_id) ? $user->admin_id : $_SESSION['user_id'];
    }

    $selectMaxUser = "SELECT p.users_limit,u.username,u.domain_override FROM pricing as p INNER JOIN user u on u.user_id = p.user_id WHERE p.user_id = '".$user->admin_id."'";
     try{
        $db = getConnection();
        $stmt = $db->prepare($selectMaxUser);
        $stmt->execute();
        $maxLimit = $stmt->fetchAll(PDO::FETCH_OBJ);
       
        $selectNoOfUsers = "SELECT count(u.user_id) as user_in_tier FROM  user as u  INNER JOIN admin_user a ON  a.admin_id = '".$user->admin_id."'  WHERE u.status = 'active' AND a.user_id = u.user_id";
        $stmt = $db->prepare($selectNoOfUsers);
        $stmt->execute();
        $userResult = $stmt->fetchAll(PDO::FETCH_OBJ);

        $get_company_name = "SELECT c.company_name,c.id as company_id , c.company_type,u.client, u.account_owner, c.zoho_account_id, ao.zoho_contact_id as account_owner_id FROM company AS c INNER JOIN user u ON u.company_id = c.id INNER JOIN account_owner ao ON ao.email = u.account_owner WHERE u.user_id = '".$user->admin_id."' ";
        $stmt = $db->prepare($get_company_name);
        $stmt->execute();
        $get_cname = $stmt->fetchAll(PDO::FETCH_OBJ);

        $userdata['email']          = $user->username;
        $userdata['type']           = 'add';
        $userdata['first_name']      = $first_name;
        $userdata['last_name']       = $last_name;
        $userdata['company_name']   = $get_cname[0]->company_name;
        $userdata['admin_id']       = $user->admin_id; 
        $userdata['company_id']     = $get_cname[0]->company_id;
        $userdata['zoho_company_id'] =  $get_cname[0]->zoho_account_id;


        if(empty($email_contact_no_check) ) { 
            $userdata['order_by']       = 'desc'; 
            $userInfo                   = checkEmailInZohoSameCompany($userdata);

                if(!empty($userInfo) ) {
                    if( $userInfo->email_found_flag == 1) {
                        // update user in zoho.
                        $condition_email_check = 1 ;
                        $user->zoho_user_id   = $userInfo->data[0]->id;
                        $user->user_id        = $userInfo->data[0]->ADS_Record_ID;
                        $user->secondary_email = $userInfo->data[0]->Secondary_Email;
                    } 
                }
                
                if($condition_email_check == 0){
                    $userInfo                       = checkContactNameInSameCompanyInAds($userdata);
                    $condition_contact_ads_found     = $userInfo['contact_found'];
                    $condition_contact_active_ads    = $userInfo['contact_found_active_check'];
                    $condition_contact_inactive_ads  = $userInfo['contact_found_inactive_check'];
                    if($condition_contact_ads_found != 0) {
                        $_SESSION['zoho_contact_id']     =  $userInfo['zoho_contact_id']  ; 
                        $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                        $_SESSION['inactive_user_id']    = $userInfo['user_id'];
                        $_SESSION['userRole']            = $userInfo['role'];
                        $_SESSION['condition_contact_inactive_zoho'] = 0;
                        $_SESSION['condition_contact_active_zoho'] = 0;
                    } 
                }  
               
                // show($userInfo, 1);
                if($condition_contact_ads_found == 0 && $condition_email_check == 0 ){
                    $userdata['status']             = 'Inactive';
                    $userInfo                       = checkContactNameInSameCompanyInZoho($userdata);
                    if($userInfo->contact_found_flag == 1) {
                        $user->zoho_user_id   = $userInfo->data[0]->id;
                        $user->user_id        = $userInfo->data[0]->ADS_Record_ID;
                        $condition_contactName_check = 1;
                        if($userInfo->contact_found_flag == 1 && $userInfo->contact_found_inactive == 1) {
                            $_SESSION['condition_contact_inactive_zoho'] = 1;
                            $condition_contact_inactive_zoho = 1 ; 
                        } if($userInfo->contact_found_flag == 1 && $userInfo->contact_found_active == 1) {
                            $condition_contact_active_zoho = 1 ; 
                        }
                    }else{
                        $userdata['status']             = 'Active';
                        $userInfo                       = checkContactNameInSameCompanyInZoho($userdata);
                    
                        if($userInfo->contact_found_flag == 1) {
                            $user->zoho_user_id   = $userInfo->data[0]->id;
                            $user->user_id        = $userInfo->data[0]->ADS_Record_ID;
                            $condition_contactName_check = 1;
                            if($userInfo->contact_found_flag == 1 && $userInfo->contact_found_inactive == 1) {
                                $condition_contact_inactive_zoho = 1 ; 
                            } if($userInfo->contact_found_flag == 1 && $userInfo->contact_found_active == 1) {
                                $_SESSION['condition_contact_active_zoho'] = 1;
                                $condition_contact_active_zoho = 1 ; 
                            }
                        }
                    }
                  
                    if($condition_contactName_check != 0) {
                        $_SESSION['zoho_contact_id']     = $userInfo->data[0]->id;
                        // $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                        $_SESSION['inactive_user_id']    = $userInfo->data[0]->ADS_Record_ID;
                        $_SESSION['userRole']           =  $userInfo->data[0]->ADS_User_Role;
                    }
                }
            //    show($condition_contactName_check, 1);
            } else if($email_contact_no_check == 'inactive') {
                $userdata['order_by']           = 'asc'; 
                $userInfo                       = checkContactNameInSameCompanyInAds($userdata);
                $condition_contact_ads_found     = $userInfo['contact_found'];
                $condition_contact_active_ads    = $userInfo['contact_found_active_check'];
                $condition_contact_inactive_ads  = $userInfo['contact_found_inactive_check'];
                if($condition_contact_ads_found != 0) {
                    $_SESSION['zoho_contact_id']     = $userInfo['id']  ; 
                    $_SESSION['found_in_ads']        = $userInfo['contact_found'];
                    $_SESSION['inactive_user_id']    = $userInfo['user_id'];
                }
            }
        
        
        if(!empty($maxLimit)){
            $user_in_tier = $userResult[0]->user_in_tier + 1;
            $max_limit = $maxLimit[0]->users_limit;
        
            checkDomain($maxLimit[0]->domain_override,$maxLimit[0]->username,$user->username);
            if($user_in_tier >= $max_limit){
                echo json_encode(array('status'=> 1,'max_limit'=>'yes','limit' => $max_limit ,'user_in_tier' => $user_in_tier, 'user_id'=>$user->user_id));
                exit;
            }
            //we are checking email in checkEmailInZohoSameCompany function. so this is commented as not required right now.
            else{
            
            //     $validate_result = validateUserInZoho($user->username,$get_cname[0]->company_name,$maxLimit[0]->username);
            //     if($validate_result != 0 && $validate_result['new_account'] == 0 && ){
            //         echo json_encode(array('status'=>3, 'err_zoho_user_msg'=>USER_EXISTS_ZOHO_MSG));
            //         exit;
            //     }
            }
        }
        
        try{
            $get_authy_detail = ConnectToAuthy($user->mobile,$user->username, $country_code);
            $update_authy = ",authy_id='".$get_authy_detail['authy_id']."'";
        } catch(Exception $e){
            echo json_encode(array('status'=> 10, 'error' => $get_authy_detail['error']));
            exit;
        }
        $user->update_authy = $update_authy;

        if(!empty($get_authy_detail) && isset($get_authy_detail['authy_id'])){
            $authy_id = $get_authy_detail['authy_id'];                    
            $user->authy_id = $authy_id;
            $user->passphrase = date('Y-m-d-H:i:s'); //2015-06-30 12:40:27
            $resetLink = 'http://'.HOST.'/drmetrix/#!/resetPassword/'.urlencode($user->passphrase);

            $zoho_account_details = get_zoho_acccount_id_from_adsphere_account_id($get_cname[0]->zoho_account_id);
            $validate_result = array();
            if ($condition_contactName_check == 0 && $condition_email_check == 0) {
              
                $validate_result['zoho_account_name'] = $zoho_account_details['zoho_account_name'];
            }else {
                $validate_result['zoho_account_name'] = ($userInfo->data[0]->Account_Name != '') ? $userInfo->data[0]->Account_Name->name : $userInfo->data[0]->Account_Name;
            }

            if($condition_contactName_check == 1) {
                if($userInfo->data[0]->Secondary_Email != '') {
                    $user_details['username']                   = $user->username;
                    $user_details['secondary_email']            = $userInfo->data[0]->Email;
                }else {
                    $user_details['username']                   = $user->username;
                    $user_details['secondary_email']            = $userInfo->data[0]->Email;
                }
            }else{
                $user_details['username']                       = $user->username;
            }

            
            $company_details['company_name'] = $get_cname[0]->company_name;
            $user_details['zoho_company_id'] = $get_cname[0]->zoho_account_id;
            $company_details['company_type'] = $get_cname[0]->company_type;
            $company_details['client']       = $get_cname[0]->client;
            $company_details['users_limit']  = $maxLimit[0]->users_limit;
            $company_details['account_owner'] = $get_cname[0]->account_owner;
            $user_details['first_name']      = $first_name;
            $user_details['last_name']       = $last_name;
            $user_details['mobile']          = ($country_code != 1) ? $country_code.'-'.$user->mobile : $user->mobile;
            $user_details['role']            = 'User';
            $user_details['status']          = 'Active';
            $user_details['company_name']    = $get_cname[0]->company_name;
            $user_details['company_type']    = $get_cname[0]->company_type;
            $user_details['client']          = $get_cname[0]->client;
            $company_details['client']       = $get_cname[0]->client;
            $user_details['contact_owner']   = $get_cname[0]->account_owner_id;
            $user_details['activation_link'] = $resetLink;     
            $user_details['assistant_admin'] = ($assistant_admin== '1') ? true : false;   
            $user_details['last_name']       = $last_name;   
        
            if(isset($user->user_id) ) {
                $user_details['ads_record_id']        = $user->user_id;
                $user_details['zoho_contact_id']      = $user->zoho_user_id;
            }
         
            if($email_contact_no_check == 'active_no') {
                //get user by same zoho id
                //$user
               
               $user->user_id           = $_SESSION['inactive_user_id'];
               $user->zoho_user_id      = $_SESSION['zoho_contact_id'];
               
            
                if(isset($_SESSION['zoho_contact_id']) && !empty($_SESSION['zoho_contact_id'])){
                    $active_zoho_records                    = getRecordByIdInZoho('Contacts', $_SESSION['zoho_contact_id'] );
                    $user_details['zoho_contact_id']        = $_SESSION['zoho_contact_id'];
                } else {                    
                    $userdata['first_name']                 = $user->first_name;
                    $userdata['last_name']                 = $user->last_name;
                    $userdata['status']                    = 'Active';
                    $active_zoho_records                   = checkContactNameInSameCompanyInZoho($userdata);
                    $user_details['zoho_contact_id']       =  $active_zoho_records->data[0]->id; 
                }
                
                $user_details['role']                   = $user->role = $_SESSION['userRole'];
                $user_details['username']               = $user->username;
                $user_details['secondary_email']        = $active_zoho_records->data[0]->ADS_Username; // secondary
                if( $_SESSION['condition_contact_active_zoho'] == 1) {
                    $userNew                        = saveUserCall($company_details, $user);
                    $user_details['ads_record_id']  = $userNew['userId'];
                    updateContactInfo($_SESSION['zoho_contact_id'] ,$userNew['userId'] );
                    $_SESSION['condition_contact_active_zoho'] = 0;
                } else {
                    updateUserCall($company_details, $user);
                }
                
                $updateContactResponse                  = APIManageZOHOContact('update_account_name',$user_details);
                echo json_encode(array('status'=> 7,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
                exit;
            }
        
            
            if(empty($email_contact_no_check)) {
                if($condition_email_check == 1) {
                    if(isset($user->secondary_email)){
                        $userNew                          = saveUserCall($company_details, $user);
                        $user_details['ads_record_id']    = $userNew['userId'];
                        $user_details['zoho_contact_id']  = $userInfo->data[0]->id;
                        $user_details['secondary_email']  = $userInfo->data[0]->ADS_Username;
                    } else {
                        //if record is deleted by superadmin, then it exists on zoho but not in ADS so we need to save into ADS
                        if(empty($user->user_id)){
                            $userNew                          = saveUserCall($company_details, $user);
                            $user_details['ads_record_id']    = $userNew['userId'];
                            $user_details['zoho_contact_id']  = $userInfo->data[0]->id;
                            $user_details['secondary_email']  = $userInfo->data[0]->ADS_Username;
                        } else{
                            updateuserCall($company_details, $user);
                        }
                    }
                    $updateContactResponse      = APIManageZOHOContact('update_account_name',$user_details);
                    if(!empty($updateContactResponse) && isset($user->secondary_email)) {
                        updateContactInfo($updateContactResponse->data[0]->details->id , $userNew['userId']);
                    } else if(empty($user->user_id)) {
                        updateContactInfo($updateContactResponse->data[0]->details->id , $userNew['userId']);
                    }
                    
                    echo json_encode(array('status'=> 1,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
                    exit;    
                } else if($condition_contact_ads_found >= 1 && $condition_contact_inactive_ads == 1) {
                    echo json_encode(array('status'=> 6, 'userInfo' => $userInfo, 'type' => 'ADS'));    
                    exit;
                } else if($condition_contact_ads_found >= 1 && $condition_contact_active_ads == 1){
                    echo json_encode(array('status'=> 5, 'userInfo' => $userInfo, 'type' => 'ADS'));    
                    exit;
                }   else if ($condition_contactName_check == 1 && $condition_contact_inactive_zoho == 1 ){
                    echo json_encode(array('status'=> 6, 'userInfo' => $userInfo->data[0], 'type' => 'ZOHO'));    
                    exit;
                }  else if ($condition_contactName_check == 1 && $condition_contact_active_zoho == 1 ) {
                    echo json_encode(array('status'=> 5, 'userInfo' => $userInfo->data[0], 'type' => 'ZOHO'));    
                    exit;
                } else {
                    $userNew                          = saveUserCall($company_details, $user);
                    $user_details['ads_record_id']    = $userNew['userId']; 
                    $insertContactResponse            = APIManageZOHOContact('add',$user_details);
                }
            } else if ($email_contact_no_check == 'inactive'){
                     if($condition_contact_ads_found >= 1 && $condition_contact_active_ads == 1){
                        echo json_encode(array('status'=> 5, 'userInfo' => $userInfo));    
                        exit;
                     }else {
                        $userNew                          = saveUserCall($company_details, $user);
                        $user_details['ads_record_id']   = $userNew['userId'];
                        $updateContactResponse            = APIManageZOHOContact('add',$user_details);
                        echo json_encode(array('status'=> 1,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
                        exit;
                     }
            }else if ($email_contact_no_check == 'active'){
                $userNew                            = saveUserCall($company_details, $user);
                $user_details['ads_record_id']     = $userNew['userId'];
                $updateContactResponse              = APIManageZOHOContact('add',$user_details);
                updateContactInfo($_SESSION['zoho_contact_id'] ,$userNew['userId'] );
                echo json_encode(array('status'=> 1,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
                exit;
            } else if($email_contact_no_check == 'deactive') {
                $user_details['zoho_contact_id']        = $_SESSION['zoho_contact_id'];
                $user_details['status']                 = 'Active';
                if($_SESSION['condition_contact_inactive_zoho'] == 1){
                    $userNew  = saveUserCall($company_details, $user);
                    $user_details['user_id ']       = $userNew['userId'];
                    $user_details['ads_record_id']  = $userNew['userId'];
                    $updateContactResponse          = APIManageZOHOContact('update_account_name',$user_details);
                    updateContactInfo($_SESSION['zoho_contact_id'] ,$userNew['userId'] );
                    $_SESSION['condition_contact_inactive_zoho'] = 0;
            
                }else {
                    $sql = ' UPDATE user SET status= "active"  WHERE user_id =' . $_SESSION['inactive_user_id'];
                    execute_sql($sql);
                    $updateContactResponse                  = APIManageZOHOContact('userStatusUpdate',$user_details);
                }
            }else{
                $userNew                          = saveUserCall($company_details, $user);
                $user_details['ads_record_id']   = $userNew['userId'];
            
                $user_details['zoho_contact_id'] = $user->zoho_user_id;
                $updateContactResponse           = APIManageZOHOContact('update',$user_details);
                echo json_encode(array('status'=> 1,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
                exit;
                
            }    
            echo json_encode(array('status'=> 7,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>$userNew['userId']));
            exit;
        } else {
            $error = '';
            if(isset($get_authy_detail['error'])){
                $error = $get_authy_detail['error'];
            }
            echo json_encode(array('status'=> 0,'error'=>$error));
            exit;
        } 
        echo json_encode(array('status'=> 1,'max_limit'=>'no', 'comp_name'=>$validate_result['zoho_account_name'], 'user_id'=>(isset($userNew['userId'])?$userNew['userId']:isset($user->userId)?$user->userId:'')));
    }
    catch (Exception $ex) {
        echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
}

function exportToXlsx($results){
    // Create new PHPExcel object
    $objPHPExcel = new PHPExcel();

    $objPHPExcel->getProperties()->setTitle($title)
                                ->setDescription("Network report");
    
    $activeSheet = $objPHPExcel->getActiveSheet();
   
   
    if(empty($result)){
        $objPHPExcel->getActiveSheet()->mergeCells('A2:J2');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A2','There are no '.$displayTab.' matches within the classification and categories selected and media dates selected.');}
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Network report');

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);

    // Redirect output to a clientÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢s web browser (Excel5)
    header('Content-Type: application/vnd.ms-excel');
    header('Content-Disposition: attachment;filename="'.$title.'.xls"');
    header('Cache-Control: max-age=0');
    // If you're serving to IE 9, then the following may be needed
    header('Cache-Control: max-age=1');

    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
    $objWriter->save('php://output');
    $flag = 1;
    if($flag){echo 'Exported successfully.';}
    exit;
}

function exportResults(){
    $db             = getConnection();
    $where_category = $calendar_type = '';
    $network_result = array();
    $creative_result= array();
    //$date_range     = $_REQUEST['date_range'];
    $val            = $_REQUEST['val'];
    $sd             =  $_REQUEST['sd'];
    $brand_id       =  $_REQUEST['brand_id'];
    $c              =  urldecode($_REQUEST['c']);
    $tab            =  $_REQUEST['tab'];
    $ed             =  $_REQUEST['ed'];
    $export_by      =  $_REQUEST['export'];
    $cat            =  $_REQUEST['cat_id'];
    $spanish        =  urldecode($_REQUEST['spanish']);
    $cat            = rtrim($cat,",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $where          = ($tab == 1 || $tab == 'brand') ? ' AND s.brand_id = '.$brand_id:' AND s.adv_id = '.$brand_id;
    $cols           = ' network_alias';
    $colname        = ($tab == 1 || $tab == 'brand') ? 'brand_name' : 'display_name';
    $tableName      = ($tab == 1 || $tab == 'brand') ? 'brand' : 'advertiser';
    $where_cond     = ($tab == 1 || $tab == 'brand') ? '  brand_id = '.$brand_id      : ' adv_id = '.$brand_id;
    $where          = ($tab == 1 || $tab == 'brand') ? ' AND s.brand_id = '.$brand_id : ' AND s.adv_id = '.$brand_id;
    $order_by_cond  = ' network_alias ASC , (Sum(nat_airings)+SUM(loc_airings)) DESC, count(network_alias) DESC' ;
    $conditions    = getFilterConditions($tab,$c);
    $date_filters  = dateFilterConditions($val,$sd,$ed);
    $join_category = '';
    if(!empty($cat)){
        $category = categorySqlCall($catIn);
        $where_category = $category['where'];
        $join_category  = $category['join'];
    }
     
    $sql_retrieve_name = "SELECT ".$colname."  FROM ".$tableName." WHERE ".$where_cond;
    $stmt = $db->prepare($sql_retrieve_name);
    $stmt->execute();
    $name_result = $stmt->fetchAll(PDO::FETCH_OBJ);   
    $name        = $name_result[0]->$colname;
    
    if(strpos($val, '3_') !== false ){
        $valArr = explode('_', $val);
        $year = substr($valArr[2], 0, 4);
        $sql_get_calendar_details = sprintf(_SQL_GET_CALENDAR_DETAILS_FOR_QUARTER, $valArr[1], $year);
        $stmt = $db->prepare($sql_get_calendar_details);
        $stmt->execute();
        $calender_result = $stmt->fetchAll(PDO::FETCH_OBJ);   
    } elseif(strpos($val, '4_') !== false ){
        $valArr = explode('_', $val);
        $year = substr($valArr[2], 0, 4);
        $sql_get_calendar_details = sprintf(_SQL_GET_CALENDAR_DETAILS_FOR_YTD, $valArr[1], $year);
        $stmt = $db->prepare($sql_get_calendar_details);
        $stmt->execute();
        $calender_result = $stmt->fetchAll(PDO::FETCH_OBJ);   
    } else {
        // to find calendar id and year for particular dates.
        $sql_get_calendar_details = sprintf(_SQL_GET_CALENDAR_DETAILS,$date_filters['media_col'],$date_filters['where_date'],$date_filters['media_col']);
        $stmt = $db->prepare($sql_get_calendar_details);
        $stmt->execute();
        $calender_result = $stmt->fetchAll(PDO::FETCH_OBJ);
    }
    
    if($spanish == 2 || $spanish == '0,1'){
        $where_spanish   = ' AND s.spanish IN (1,0)';
        $where_spanish_c = ' AND c.spanish IN (1,0)';
    }else{
        $where_spanish   = ' AND s.spanish IN ('.$spanish.') ';
        $where_spanish_c = ' AND c.spanish IN ('.$spanish.') ';
    }

     if(!empty($calender_result)){
        if($val != 5){
            $calendar_where = "  calendar_id IN (".$calender_result[0]->calendar_id.") AND media_year = '".$calender_result[0]->media_year."' ";
        }else{
            $calendar_type  =  " AND calendar_type = 'W'";
            $year_in = getLifetimeYear($calender_result); 
            $calendar_where = "  media_year IN (".$year_in.") ";
        }
       
        $sql_get_network_list = sprintf(_SQL_GET_NW_LIST,$where_spanish,$where_category,$calendar_where,$calendar_type,$where,$conditions['c_type']);
        $stmt = $db->prepare($sql_get_network_list);
        $stmt->execute();
        $network_list_result = $stmt->fetchAll(PDO::FETCH_OBJ);
        $network = '';
        foreach($network_list_result as $key => $value){
            $network_alias = "'".addslashes($value->network_alias)."'";
            $network = $network.', '.($network_alias);
        }
        $network = rtrim(ltrim($network, ","), ",");
        if($network == ''){
            $network = '1';
        }
        
        if($c <= 5){
            $order_by_cond  = ' FIELD (network_alias,'.$network.') ';
            $export_by_cond = ' s.network_code ,rosday, rostime ';
        }else{
            $export_by_cond = ' s.network_code ';
            $order_by_cond  = ' airings_cnt DESC';
        }
        
        $sql_get_summary_network = sprintf(_SQL_GET_SUMMARY,$cols,$where_spanish,$where_spanish_c,$where_category,$calendar_where,$calendar_type,$where,$conditions['c_type'],$export_by_cond,$order_by_cond);
        $stmt = $db->prepare($sql_get_summary_network);
        $stmt->execute();
        $network_result = $stmt->fetchAll(PDO::FETCH_OBJ);
        
        foreach($network_result as $k1 => $v1){
            foreach($network_list_result as $k2 => $v2){
                if($v1->network_alias == $v2->network_alias){
                    $v1->creatives_cnt = $v2->creatives_cnt;
                }
            }
        }
        $sql_get_summary_creative = sprintf(_SQL_GET_SUMMARY_CREATIVE,$where_spanish,$where_spanish_c,$where_category,$where_spanish,$where_spanish_c,$calendar_where,$calendar_type,$where,$conditions['cr_type'],$calendar_where,$calendar_type,$where,$conditions['cr_type']);
        $stmt = $db->prepare($sql_get_summary_creative);
        $stmt->execute();
        $creative_result = $stmt->fetchAll(PDO::FETCH_OBJ);
     }
     
    $sd             = date_format(new DateTime(($sd)),"m/d/Y");
    $ed             = date_format(new DateTime(($ed)),"m/d/Y");
    $title          = $name.' - '.$sd.' thru '.$ed;
     
    //track download count of user -----start
    updateDownloadCount();
    //$record_count = count($network_result) + count($creative_result);
    //insertRecordCount($record_count,$date_range,$title);
    //---------end 
    $objPHPExcel = new PHPExcel();
    if($c <= 5){
        $objPHPExcel = exportNetwork($network_result, $objPHPExcel, $title);
    }else{
         $objPHPExcel = exportNetworkLong($network_result, $objPHPExcel, $title, $c);
    }
    $objPHPExcel = exportCreative($creative_result, $objPHPExcel, $title, $c); 
    
   
    $objPHPExcel->getProperties()->setTitle($title);
    $objPHPExcel->setActiveSheetIndex(0);
    
    header('Content-Type: application/vnd.ms-excel');
    header('Content-Disposition: attachment;filename="'.$title.'.xls"');
    header('Cache-Control: max-age=0');
    header('Cache-Control: max-age=1');

    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
    $objWriter->save('php://output');
    exit;
}

function exportCreative($summary_result, $objPHPExcel, $title, $c){
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex(1);
    $activeSheet = $objPHPExcel->getActiveSheet();
    
    
    if($c <= 5){
        //set borders
        $styleArray = array(
           'borders' => array(
             'allborders' => array(
               'style' => PHPExcel_Style_Border::BORDER_THIN
             )
           )
       );

       $secondParam = 'J'.(count($summary_result)+3);
       $secondParamBorder = 'J'.(count($summary_result)+3);

       $activeSheet->getStyle('A1:'.$secondParamBorder)->applyFromArray($styleArray);

        
        //set background color
        $headerStyle = array(
                    'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb'=>'#bbd9fb'),
                    ),
            );
        $objPHPExcel->getActiveSheet()->getStyle('A2:'.'G3')->applyFromArray($headerStyle);


        $fontStyle = array(
                    'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb'=>'#99ccff'),
                    ),
            );
        $objPHPExcel->getActiveSheet()->getStyle('H2:'.$secondParam)->applyFromArray($fontStyle);
    }else{
         //set borders
        $styleArray = array(
           'borders' => array(
             'allborders' => array(
               'style' => PHPExcel_Style_Border::BORDER_THIN
             )
           )
       );

       $secondParam = 'F'.(count($summary_result)+2);
       $secondParamBorder = 'F'.(count($summary_result)+2);

       $activeSheet->getStyle('A1:'.$secondParamBorder)->applyFromArray($styleArray);
        
         $headerStyle = array(
                    'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb'=>'#bbd9fb'),
                    ),
            );
        $objPHPExcel->getActiveSheet()->getStyle('A2:'.'F2')->applyFromArray($headerStyle);

    }
    
    $var = ($c <= 5) ? 3 : 2;
    //set headers
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('A'.$var,'Creative');
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('B'.$var,'Duration');
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('C'.$var,'Network');
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('D'.$var,'Daypart');
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('E'.$var,'ROS Day');
    
    if($c <= 5){
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('F3','National');
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('G3','DPI');
    }else{
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('F'.$var,'Airings');
    }
    
    
    
    if($c <= 5){
        $activeSheet->setCellValueByColumnAndRow(5, 2, "Airings");
        $activeSheet->setCellValueByColumnAndRow(7, 2, "National");
        $activeSheet->setCellValueByColumnAndRow(8, 2, "DPI");
        $activeSheet->setCellValueByColumnAndRow(9, 2, "Total");
        
        $activeSheet->mergeCells('F2:G2');
        $activeSheet->mergeCells('H2:H3');
        $activeSheet->mergeCells('I2:I3');
        $activeSheet->mergeCells('J2:J3');
        
        $activeSheet->getStyle('F2:J2')->getAlignment()->applyFromArray(
             array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
        );
        $activeSheet->getStyle('H:J')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    }
  
    if($c <= 5){
        $activeSheet->getStyle('A1:J2')->getFont()->setBold(true); 

        $activeSheet->mergeCells("A1:J1");
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('A1', $title); 
        $activeSheet->getStyle('A1:J2')->getAlignment()->applyFromArray(
            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
        );

        $activeSheet->mergeCells("A1:J1");
        $activeSheet->getStyle('A1:J1')->getAlignment()->applyFromArray(
        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
    );
    }else{
        $activeSheet->getStyle('A1:F2')->getFont()->setBold(true); 

        $activeSheet->mergeCells("A1:F1");
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('A1', $title); 
        $activeSheet->getStyle('A1:F2')->getAlignment()->applyFromArray(
            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
        );
        $activeSheet->getStyle('A1:F1')->getAlignment()->applyFromArray(
            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
        );
        $activeSheet->mergeCells("A1:F1");
    }
    
    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('A1', $title); 
  
    //set results
    $col       = 'A';
    $row = ($c <= 5) ? 4 : 3;
    $start_row = $end = $row;
    $old_nw    = '';
    
    if(!empty($summary_result)){
        foreach($summary_result as $key => $value){
            if($col == 'H' && $c <= 5){
                $col = 'A';
                $row = $row + 1;
            }
            
            if($col == 'G' && $c > 5){
                $col = 'A';
                $row = $row + 1;
            }

            $time       = explode("-", $value->rostime);
            $start_time = date("g a", strtotime($time[0]));
            $end_time   = date("g a", strtotime($time[1]));
            $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $value->creative_name);
            if($value->length <= 300) {$text = 'sec';$v = $value->length;}else{$text = 'm'; $v = ($value->length/60);}
            $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $v.' '.$text);
            $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $value->network_alias);
            $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $start_time.' - '.$end_time);
            $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, getRosDay($value->rosday));
            if($c > 5){
                 $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $value->airings_cnt);
            }else{
                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $value->nat_count);
                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue($col++.$row, $value->loc_count); 
            }
            $new_nw = $value->network_alias;

            if ($old_nw != $new_nw) {
                $merge = 0;
                $start  = $end = $row;
                $old_nw = $new_nw;
            } else {
                $end    = $row;
            }

            if($c <= 5 ){
                $activeSheet->mergeCells("H{$start}:H{$end}");
                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("H{$start}", "=SUM(F{$start}:F{$end})"); 

                $activeSheet->mergeCells("I{$start}:I{$end}");
                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("I{$start}", "=SUM(G{$start}:G{$end})"); 

                $activeSheet->mergeCells("J{$start}:J{$end}");
                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("J{$start}", "=SUM(H{$start}:I{$end})"); 
            }

        }
    }else{
        $activeSheet->mergeCells("A4:I4");
        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue('A4', 'No records found.');
    }
    
    //set width
    foreach(range('A','D') as $columnID) {
    $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)
        ->setAutoSize(true);
    }  
   
    
    $activeSheet->setTitle("Creative");
   
    return $objPHPExcel;
}

function exportNetworkLong($summary_result, $objPHPExcel, $title, $c){
     $objPHPExcel->setActiveSheetIndex(0);
    $activeSheet = $objPHPExcel->getActiveSheet();
    
     //set borders
     $styleArray = array(
        'borders' => array(
          'allborders' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN
          )
        )
    );

    $cnt = ($c <= 5) ? 3 : 2;
    $secondParam = 'B'.(count($summary_result)+$cnt);
    $secondParamBorder = 'B'.(count($summary_result)+$cnt);
    
    $activeSheet->getStyle('A1:'.$secondParamBorder)->applyFromArray($styleArray);

    //set background color
    $headerStyle = array(
                'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb'=>'#bbd9fb'),
                ),
        );
    $objPHPExcel->getActiveSheet()->getStyle('A2:'.'B2')->applyFromArray($headerStyle);
    
    //set headers
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2','Network');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B2','Airings');
     
    $activeSheet->getStyle('A1:B2')->getFont()->setBold(true); 
    $activeSheet->mergeCells("A1:B1");
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1', $title); 
    $activeSheet->getStyle('A1:B1')->getAlignment()->applyFromArray(
        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
    );
    
    //set results
    $col       = 'A';
    $row       = 3;
    $start_row = $end = $row;
    $old_nw    = '';
   
    if(!empty($summary_result)){
        foreach($summary_result as $key => $value){
            if($col == 'C'){
                $col = 'A';
                $row = $row + 1;
            }

            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->network_alias);
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->airings_cnt); 

            $new_nw = $value->network_alias;

            if ($old_nw != $new_nw) {
                $start  = $end  = $row;
                $old_nw = $new_nw;
            } else {
                $end            = $row;
            }

        }
    }else{
        $activeSheet->mergeCells("A3:B3");
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A3', 'No records found.');
    }
    $activeSheet->setTitle("Network");
    
    //set width
    foreach(range('A','B') as $columnID) {
    $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)
        ->setAutoSize(true);
    }  
   
    return $objPHPExcel;
}

function exportNetwork($summary_result, $objPHPExcel, $title){
    $objPHPExcel->setActiveSheetIndex(0);
    $activeSheet = $objPHPExcel->getActiveSheet();
    
     //set borders
     $styleArray = array(
        'borders' => array(
          'allborders' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN
          )
        )
    );

    $secondParam = 'J'.(count($summary_result)+3);
    $secondParamBorder = 'J'.(count($summary_result)+3);
    
    $activeSheet->getStyle('A1:'.$secondParamBorder)->applyFromArray($styleArray);

    //set background color
    $headerStyle = array(
                'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb'=>'#bbd9fb'),
                ),
        );
    $objPHPExcel->getActiveSheet()->getStyle('A2:'.'F3')->applyFromArray($headerStyle);
    
   
    $fontStyle = array(
                'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb'=>'#99ccff'),
                ),
        );
    $objPHPExcel->getActiveSheet()->getStyle('G2:'.$secondParam)->applyFromArray($fontStyle);
    
    //set headers
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A3','Network');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B3','Creatives');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C3','Daypart');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('D3','ROS Day');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('E3','National');
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('F3','DPI');
    
    $activeSheet->setCellValueByColumnAndRow(4, 2, "Airings");
    $activeSheet->setCellValueByColumnAndRow(6, 2, "Creatives");
    $activeSheet->setCellValueByColumnAndRow(7, 2, "National");
    $activeSheet->setCellValueByColumnAndRow(8, 2, "DPI");
    $activeSheet->setCellValueByColumnAndRow(9, 2, "Total");
   
    $activeSheet->mergeCells('E2:F2');
    $activeSheet->mergeCells('G2:G3');
    $activeSheet->mergeCells('H2:H3');
    $activeSheet->mergeCells('I2:I3');
    $activeSheet->mergeCells('J2:J3');
    
    $activeSheet->getStyle('E2:J2')->getAlignment()->applyFromArray(
        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
    );
    $activeSheet->getStyle('G:J')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
     
    $activeSheet->getStyle('A1:J2')->getFont()->setBold(true); 
    $activeSheet->mergeCells("A1:J1");
    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1', $title); 
    $activeSheet->getStyle('A1:J1')->getAlignment()->applyFromArray(
        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
    );
    
    //set results
    $col       = 'A';
    $row       = 4;
    $start_row = $end = $row;
    $old_nw    = '';
   
    if(!empty($summary_result)){
        foreach($summary_result as $key => $value){
            if($col == 'G'){
                $col = 'A';
                $row = $row + 1;
            }

            $time       = explode("-", $value->rostime);
            $start_time = date("g a", strtotime($time[0]));
            $end_time   = date("g a", strtotime($time[1]));
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->network_alias);
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->creatives_count);
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $start_time.' - '.$end_time);
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, getRosDay($value->rosday));
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->nat_count);
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col++.$row, $value->loc_count); 

            $new_nw = $value->network_alias;

            if ($old_nw != $new_nw) {
                $start  = $end  = $row;
                $old_nw = $new_nw;
            } else {
                $end            = $row;
            }

            $activeSheet->mergeCells("G{$start}:G{$end}");
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("G{$start}", "{$value->creatives_cnt}"); 

            $activeSheet->mergeCells("H{$start}:H{$end}");
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("H{$start}", "=SUM(E{$start}:E{$end})"); 

            $activeSheet->mergeCells("I{$start}:I{$end}");
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("I{$start}", "=SUM(F{$start}:F{$end})"); 

            $activeSheet->mergeCells("J{$start}:J{$end}");
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("J{$start}", "=SUM(H{$start}:I{$end})"); 
        }
    }else{
        $activeSheet->mergeCells("A4:J4");
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A4', 'No records found.');
    }
    $activeSheet->setTitle("Network");
    
    //set width
    foreach(range('A','D') as $columnID) {
    $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)
        ->setAutoSize(true);
    }  
   
    return $objPHPExcel;
   }

function exportToExcel(){
    if(!isset($_REQUEST) || !count($_REQUEST)) {
        $request    = Slim::getInstance()->request();
        $_REQUEST   = (array) json_decode($request->getBody());
    }
    // api_exception_log('index.php', 'exportToExcel()', addslashes(serialize($_REQUEST)));
    $val                    = $_REQUEST['val'];
    $sd                     = $_REQUEST['sd'];
    $ed                     = $_REQUEST['ed'];
    $tab                    = $_REQUEST['type'];
    $c                      = urldecode($_REQUEST['c']);
    $network_code           = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $network_name           = isset($_REQUEST['network_name']) ? $_REQUEST['network_name'] : '-';
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $search                 = !empty($_REQUEST['search_text']) ? $_REQUEST['search_text'] : 'none';
    $responseType           = "(".urldecode($_REQUEST['responseType']).")";
    $spanish                = urldecode($_REQUEST['spanish']);
    $lang_type              = $spanish == 0 ? '' : 'sp-';
    $active_flag            = (isset($_REQUEST['flag']) && ($_REQUEST['flag']!= 'undefined')) ? $_REQUEST['flag'] : '2';
    $cat                    = rtrim($cat,",");
    $catIn                  = '('.$cat.')';
    $cols                   = '';
    $max_spend              = 0;
    $brand_classification   = '';
    $countExcelCols         = 0;
    $count_unchecked_cat    = $_REQUEST['length_unchecked'];
    $word                   = ($tab == 1) ? 'brand_name' : 'display_name';
    $advOrBrandId           = $tab == 1 ? 'b.brand_id' : 'adv.adv_id'; 
    $unchecked_category     = $_REQUEST['unchecked_category'];
    $unchecked_category     = rtrim($unchecked_category,",");
    $uncheckedCatIn         = '('.$unchecked_category.')';
    $requestData            = $_REQUEST;
    $new_filter_opt         = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $creative_durations     = $_REQUEST['creative_duration'];
    //$nullAdvId                  = ($tab == 1) ? '' : ' AND adv.adv_id != 0';
    //create filter details

    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $response_type_filter   = str_replace('response_url=1', 'URL', $response_type_filter);
    $response_type_filter   = str_replace('response_sms=1', 'SMS', $response_type_filter);
    $response_type_filter   = str_replace('response_tfn=1', 'TFN', $response_type_filter);
    $response_type_filter   = str_replace('response_mar=1', 'MAR', $response_type_filter);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $new_filter             = $new_filter_opt == 'none' ? 'All' : ucfirst($new_filter_opt);
    $network_filter         = !empty($network_code) ?  $network_code : 'All';
    $program_ids            = isset($_REQUEST['programs_ids']) ? $_REQUEST['programs_ids'] : '';
    $program_text = empty($program_ids) ? 'All' : 'Custom';
    $active_inactive_filter = 'All';
    if($active_flag == 1){
        $active_inactive_filter = 'Active';
    }elseif($active_flag == 0){
        $active_inactive_filter = 'Inactive';
    }
    
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }     

    if($c > 5){
        $active_col = 'long_active';
    }else{
        $active_col = 'short_active';
    }

    $result = isset($_SESSION['export']) ? $_SESSION['export'] : unserialize(($_REQUEST['export']));
    // print_r($session_data); exit;
    //$result = reorderResultForRanking ($result); 
    //below code removes inactive element if active elements are selected and vice versa, to resolve problem of rank and spend index.
    if(isset($_SESSION['export'])) { $result = $result['rows']; }
    $final_result = $final_array = $opt_array = array();
    $max_spend = isset($_SESSION['max_spend']) ? $_SESSION['max_spend'] : $max_spend;
    if(!empty($result)) {
        $rank = $spend_index = 0;
        foreach($result as $k => $v) {
            $v = (object) $v;
            if($max_spend == 0){ $max_spend = $v->spend_index; $max_spend = $v->spend_index;}
            // $spendIndexCalculate['projected_score'] = $v->spend_index;
            // $spendIndexCalculate['classification']  = $c;
            // $spendIndexCalculate['sum']             = $_SESSION['max_spend'];
            // $v->spend_index                        = findSpendIndex($spendIndexCalculate);

            if($rank==0) $spend_index = $v->spend_index;

            $v->current_week    = ++$rank;
            $flag_unset  = 0;
            if($active_flag != 2 && $active_flag != -1){
                 if($tab == 1){
                    if($v->is_active_brand != $active_flag){
                        unset($result[$k]);
                        $flag_unset  = 1;
                    }
                }else{
                    if($v->is_active_adv != $active_flag){
                        unset($result[$k]);
                        $flag_unset  = 1;
                    }
                }
            } 

            if (!empty($search) && !$flag_unset && $search != 'none'){
                if(isset($v->brand_name))
                    $search_brand = $v->brand_name;
                else
                    $search_brand = $v->advertiser_name;

                if(stripos($search_brand, $search) !== false){
                    $flag_unset  = 0;
                }else{
                    unset($result[$k]);
                    $flag_unset  = 1;
                }
            }

            if(!$flag_unset){
                $opt_array['current_week'] = $v->current_week;
                if(isset($v->brand_name)){
                    $opt_array['brand_name'] = $v->brand_name;
                }
                if(isset($v->no_of_brands)){
                    $opt_array['no_of_brands'] = $v->no_of_brands;
                }
                if(isset($v->creative_count)){
                    $opt_array['creative_count'] = $v->creative_count;
                }
                if(isset($v->category)){
                    $opt_array['category'] = $v->category;
                }
                $opt_array['advertiser_name'] = $v->advertiser_name;
                $opt_array['airings'] = $v->airings;
                $opt_array['spend_index'] = $v->spend_index;
                if($active_col === 'short_active'){
                    $opt_array['national'] = $v->national;
                    $opt_array['local'] = $v->local;
                    $opt_array['asd'] = $v->asd;
                }
                if($tab == 1){
                    $opt_array['total_weeks']  = $v->total_weeks;
                }
                $final_array[]     = $opt_array;
            }
        }
    }

    $result = $final_array;

    if($tab == 1){
         $notInHeaders = array('ID','brand_id','no_of_brands','adv_id','is_active_brand', 'is_active_adv', 'search','networks','company_name');
          if($c > 5){
                $notInHeaders = array('ID','brand_id','no_of_brands','adv_id','is_active_brand', 'is_active_adv', 'search','networks','national','DPI','company_name');
         }
    }else{
         $notInHeaders = array('ID','brand_id','creative_count','category','brand_name','adv_id','is_active_brand', 'is_active_adv', 'search','category','networks','company_name');
         if($c > 5){
              $notInHeaders = array('ID','brand_id','creative_count','category','brand_name','adv_id','is_active_brand', 'is_active_adv', 'search','category','networks','national','DPI','asd','company_name');
    }
    
    }
    
    $header = $data = '';
    $flag = false;
    if(!empty($result)){
        foreach ($result as $i => $product) {
                $count = 0;
                foreach ($product as $key => $value) {
                        if (!in_array($key, $notInHeaders)) {
                             $countExcelCols ++ ;
                              $header.= $key . " ";
                         }
                         $count++;

                }
                break; 
        }
    }

    if(empty($result)){
        if($tab == 1){
            if($c > 5){
                $header ='brand_name category creative_count airings creative_price networks spend_index  advertiser_name current_week total_weeks';
            }else{
                $header ='brand_name category creative_count airings creative_price networks spend_index asd national DPI advertiser_name current_week total_weeks';
            }
        }
        if($tab == 0){
            if($c > 5){
                $header ='airings no_of_brands spend_index advertiser_name current_week';
            }else{
                $header ='airings no_of_brands spend_index asd national DPI advertiser_name current_week';
            }
        }
    }
  
    if(!empty($result)){   
        foreach($result as $k => $v){
            $v = (object) $v;
            if($c >= 6){

            }else{
                $v->asd = $v->asd.' sec';
            }
            
          
            $v->airings = $v->airings; //number_format($v->airings);
            $v->creative_count = !empty($v->creative_count) ? $v->creative_count : 0;
            $v->no_of_brands = !empty($v->no_of_brands) ? $v->no_of_brands : 0;
        }
    }
        
    if(!empty($result)){
        foreach ($result as $i => $product) {
            $count = 0;
            foreach ($product as $key => $value) {
                if (!in_array($key, $notInHeaders)) {
                      $value = str_replace('"', '""', $value);
                      $value = '"' . $value . '"' . "\t";
                      $data .= $value;
                }
                $count++;
          }
        }
    }
    
    updateDownloadCount();
    $styleHeader = array(
        'font'  => array(
            'size'  => 16,            
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            //'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
                'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
                'rotation'   => 90,
                'startcolor' => array(
                    'argb' => 'B5B5B5'
                ),
                'endcolor'   => array(
                    'argb' => 'E0E0E0'
                )
            )
    );
    
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );

    $styleArray = array(
        'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
        )
    );
    
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  

    if($c > 5){
        $column_brand = 'H';
        $column_adv = 'E';
    }else{
        $column_brand = 'K';
        $column_adv = 'H';
    }    

    $title = $tab == 1 ? 'DRM Ranking Report All Brands '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His')  : 'DRM Ranking Report All Advertisers '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His');
    $alignCols = $tab == 1 ? 'F:I' : 'C:F';
    $alignColNw = $tab == 1 ? $column_brand : $column_adv;
    $alignColRank = $tab == 1 ? 'A' : 'A';

    $report_title = $tab == 1 ? 'Brands' : 'Advertisers';

    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Ranking Report For All ".$report_title." \n");
    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter." | Response Type - ".$response_type_filter." | Categories - ".$cat_filter." | Network - ".htmlspecialchars_decode($network_name)." | New - ".$new_filter." | Active/Inactive - ".$active_inactive_filter ." | Search Text - ".$search. " | Programs - ".$program_text;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);

    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$alignColNw.'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$alignColNw."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(25);

    //--add records count in db
    //$record_count = count($result);
    //insertRecordCount($record_count,$date_range,$title);
    //-------ends
    
    $objPHPExcel->getProperties()->setTitle($title)
                                ->setDescription("Ranking report");
    
    $activeSheet = $objPHPExcel->getActiveSheet();
    $activeSheet->getStyle($alignCols)
                 ->getAlignment()
                 ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
     
    $activeSheet->getStyle($alignColNw)
                 ->getAlignment()
                 ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
    
    $activeSheet->getStyle($alignColRank)
                 ->getAlignment()
                 ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

    //$data not used later
    $header = rtrim($header," ");
    $headers = explode(" ",$header);
    $data = rtrim($data,"\t");
    $results = explode("\t",$data);

    $i = 2;
    $colVal= 2;$set='';
    foreach($headers as $key =>  $value){
        if($value == 'current_week'){
            $set = 1;
            $j = 'A';
            $colValue = 'Rank';
        }
        if($value == 'brand_name'){
              $set = 1;
             if($tab == 1){ $j = 'B';  }
             $colValue = 'Brand Name';
               
         }
           if($value == 'creative_count' || $value == 'no_of_brands'){
              $set = 1;
             if($tab == 1){ $j = 'C';  $colValue = 'Creatives';}else{$j = 'C';  $colValue = 'Brands';}
         }
         if($value == 'category'){
             if($tab == 1){ $set = 1; $j = 'D';  }
             $colValue = 'Category';
               
         }
        if($value == 'advertiser_name'){
            $set = 1;
            if($tab == 1){  $j = 'E';}else{ $j = 'B';}
            $colValue = 'Advertiser';
         }
         if($value == 'no_of_brands'){
            if($tab == 1){  continue;}
            $set = 1;
            if($tab == 0){  $j = 'C';}
            $colValue = 'Brands';
         }
       
        if($value == 'airings'){
             $set = 1;
             if($tab == 1){  $j = 'F';}else{ $j = 'D';}
             $colValue = 'Airings';
        }
        if($value == 'spend_index'){
             $set = 1;
             if($tab == 1){  $j = 'G';}else{ $j = 'E';}
             $colValue = 'Spend ($)';
        }
        if($value == 'national' && $c <= 5){
             $set = 1;
             if($tab == 1){  $j = 'H';}else{ $j = 'F';}
             
             $colValue = 'National %';
        }
        if($value == 'local' && $c <= 5){
             $set = 1;
             if($tab == 1 && $c <= 5){
                 $j = 'I';
             }else if($tab == 0 && $c <= 5){
                 $j = 'G';
             }
             $colValue = 'DPI %';
        }
        if($value == 'asd' && $c <= 5){
             $set = 1;
             if($tab == 1 && $c <= 5){
                 $j = 'J';
             }else if($tab == 0 && $c <= 5){
                 $j = 'H';
             }
             $colValue = 'ASD';
        }
        if($value == 'total_weeks' && $tab == 1 ){
             $set = 1;
             if($tab == 1 && $c <=5){  $j = 'K';}
             else if($tab == 1 && $c > 5){ $j = 'H';}
             $colValue = 'Weeks';
              
        }

        if($set == 1){
            $col = $j.$colVal;
            $objPHPExcel->setActiveSheetIndex(0)
            ->setCellValue($col,$colValue);
            $objPHPExcel->setActiveSheetIndex(0)->getStyle($j.$colVal.":".$j.$colVal)->applyFromArray($styleArray, False);
            $objPHPExcel->setActiveSheetIndex(0)->getStyle($j.$colVal.":".$j.$colVal)->applyFromArray($styleSubHeader);
            if($j !='A'){
                if($active_col == 'short_active'){
                    switch ($j) {
                        case 'B':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("B")->setWidth(47);
                            else
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("B")->setWidth(55);
                        break;

                        case 'C':
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("C")->setWidth(9);
                        break;

                        case 'D':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("D")->setWidth(35);
                            else
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("D")->setWidth(10);
                        break;

                        case 'E':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("E")->setWidth(50);
                            else
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("E")->setWidth(12); 
                        break;

                        case 'F':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("F")->setWidth(10);
                            else
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("F")->setWidth(11);
                        break;

                        case 'G':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("G")->setWidth(12);
                            else
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("G")->setWidth(8);
                        break;

                        case 'H':
                            if($tab == 1)
                                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("H")->setWidth(11);
                            else
                               $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("H")->setWidth(7); 
                        break;

                        case 'I':
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("I")->setWidth(8);
                        break;

                        case 'J':
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("J")->setWidth(7);
                        break;

                        default:
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($j)->setAutoSize(true);
                        break;
                    }

                }else{
                    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($j)->setAutoSize(true);
                }
            }
        }
    }
    

    foreach($result as $key => $value){
       foreach($value as $k => $v){
             if (in_array($k, $notInHeaders)) {
                unset($result[$key]->$k);
             }
       }
   }
   
   
    $i = 2;
    $set='';
    $countExcelCols = 10;

    $column_in_number_format = [];

    if($tab == 1) {
        $column_in_number_format = ['G','F'];
    } else {
        $column_in_number_format = ['D','E'];
        
    }
    setColumnNumberFormat($objPHPExcel , $column_in_number_format);
  
    foreach($result as $key =>  $value){
        $i++;
        foreach($value as $k => $v){ 
            if($k == 'current_week'){
                $set = 1;
                $j = 'A';
            }
            if($k == 'brand_name'){
                $set = 1;
                if($tab == 1){ $j = 'B';}
            }
           
            if($k == 'creative_count'  || $k == 'no_of_brands'){
                $set = 1;
                if($tab == 1){ $j = 'C';   $colValue = 'Creatives';}else{$j = 'C';  $colValue = 'Brands';}
             }
            if($k == 'category'){
                $set = 1;
                if($tab == 1){ $j = 'D';}else{continue;}
            }
            if($k == 'advertiser_name'){
                $set = 1;
                if($tab == 1){  $j = 'E';}else{  $j = 'B';}
            }
            if($k == 'no_of_brands'){
                $set = 1;
                if($tab == 0){  $j = 'C';}
            }    
            if($k == 'airings'){
                $set = 1;
                if($tab == 1){  $j = 'F';}else{ $j = 'D';}
            }
            if($k == 'spend_index'){
               
                $set = 1;
                if($tab == 1){  $j = 'G';}else{ $j = 'E';}
            }
            if($k == 'national'){
                $set = 1;
                if($tab == 1 ){
                    if($c <= 5) {$j = 'H';}
                }else{
                    if($c <= 5){$j = 'F';}
            }
        }
        if($k == 'local'){
            $set = 1;
            if($tab == 1){ 
                 if($c <= 5) {$j = 'I';}
            }else{
                 if($c <= 5) {$j = 'G'; }
            }
        }
        if($k == 'asd'){
            $v = $v;
            $set = 1; 
            if($tab == 1){ 
                 if($c <= 5) {$j = 'J';}
            }else{ 
                 if($c <= 5) {$j = 'H';}
            }
        }
       if($k == 'total_weeks' && $tab == 1 ){
             $set = 1; 
             if($tab == 1 && $c <=5){  $j = 'K';}
             else if($tab == 1 && $c > 5){ $j = 'H';}
              
        }
       
      
        if($set == 1){
               $col = $j.$i;
               
                $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue($col,str_replace('"','',$v));

           
        }
        $j++;
       
       }
    }
    $displayTab = $tab == 1 ? 'brands' : 'advertiser';
    $limit_col = (string)count($result)+2;
    if($tab == 1){
        if($active_col === 'short_active'){
            $col_name = "K";
        }else{
            $col_name = "H";
        }
    }else{
        if($active_col === 'short_active'){
            $col_name = "H";
        }else{
            $col_name = "E";
        }
    }
   
    
    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("A1:".$col_name.$limit_col)->applyFromArray($styleArray, False);
    if(empty($result)){
        $objPHPExcel->getActiveSheet()->mergeCells('A2:'.$col_name.$limit_col);
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A2','There are no '.$displayTab.' matches within the classification and categories selected and media dates selected.');
    }
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Ranking report');

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = "ranking";
    $requestData['no_of_rows']          = count($result);
    
    //updateDontAskMe($requestData['ask_me']);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    //$objWriter->setOffice2003Compatibility(true);//commented because it was creating problem with Copy and paste in excel PT##132219317
    $objWriter->save($newFilePath);
    //addExcelExportInfo($requestData);
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);

    echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
    //echo json_encode(array('status'=>1, 'done'=>'done'));
}

function filterResults(){
    $records_brand_ids      = array();
    $records_advertiser_ids = array();
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    parse_str($query_string, $output);
    $output12 = (array)json_decode($query_string, TRUE);

    $query_string = implode('&', $output12);
    $arrTest = array();
    foreach($output12 as $key => $val) {
        $arrTest[] = "$key"."=".urlencode($val)."&";
    }
    $query_string =implode('', $arrTest);
    $set_one = explode('&', $query_string);

    $_SESSION['filter_data'] = addslashes($query_string);
    $_SESSION['filter_type'] = 'ranking';
  
    /***** Start - Cancel filter */
    $query_string               = $_SESSION['filter_data'];

    if(strpos($query_string, 'search_text') !== false){
        $query_string_arr       = explode('&search_text', $query_string);
        $query_string           = $query_string_arr[0];
    }

    //$query_string           =  $query_string . "&search_text=" . str_replace('&', 'XxX', $response->search_text)  . "&active_inactive_flag=" . $flag;
    $query_string                       = $query_string.'&page_call=ranking';
    $criteria                           = get_filter_text($query_string);
    $apply_data_array['query_string']   = $query_string;
    $_SESSION['apply_filter_criteria']  = addslashes($criteria['save_text']);
    $apply_data_array['criteria']       = $_SESSION['apply_filter_criteria'];
    $apply_data_array['page']                     = 1;
    $apply_data_array['primary_tab']              = 1;
    $apply_data_array['secondary_tab']            = 1;
    $_SESSION['apply_filter_data']      = query_string_to_json($apply_data_array );
   
    /***** End - Cancel filter */
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        if($raw_data[0] == 'c'){
            $raw_data[1] = str_replace('+', " ", $raw_data[1]);                                                                             
        }else if($raw_data[0] == 'cat'){
            $raw_data[1] = str_replace('%2C', ",", $raw_data[1]);
        }
       
        if($raw_data[0] == 'programs_ids'){
            $raw_data[1] = str_replace('%2C', ",", $raw_data[1]);
        }
        
        if(!isset($raw_data[1]))
            $raw_data[1] = null;
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $requestData['programs'] = isset($output['programs']) ? $output['programs'] : [];
    $val = $requestData['val'];
    $sd =  $requestData['sd'];
    $ed =  $requestData['ed'];
    $c  = urldecode($requestData['c']);
    $tab = $requestData['type'];
    $cat = rtrim($requestData['cat'],",");
    // $cat = rtrim($cat,"all,");
    $catIn = '('.$cat.')';
    // $uncheckedCatIn = '('.rtrim($requestData['unchecked_category'],",").')';
    $requestData['applied_ids'] = isset($requestData['applied_ids']) ? urldecode($requestData['applied_ids']) : '';
    if(SMI_BUILD == 1) {
        $last_week_data_html  = ($tab == 1) ?  'last_week_data_html_brand_smi' : 'last_week_data_html_advertiser_smi';
        $last_week_export_data  = ($tab == 1) ?  'last_week_export_data_brand_smi' : 'last_week_export_data_advertiser_smi';
    } else {
        if ($tab == 1) {
            $last_week_data_html    = 'last_week_data_html_brand';
            $last_week_export_data  = 'last_week_export_data_brand';
        } else {
            $last_week_data_html    = 'last_week_data_html_advertiser';
            $last_week_export_data  = 'last_week_export_data_advertiser';
        }
    }
    $get_rankings_from_cache = get_rankings_from_cache($requestData, $tab);

    if ($get_rankings_from_cache['status'] == 1) {
        $response                   = $get_rankings_from_cache['data'];
        $clause                     = "start_date = $sd AND end_date = $ed";
        $params['clause']           = $clause;
        $params['component']        = $last_week_export_data;
        $cached_excel_result        = get_query_result('__query_get_cached_data', $params);
        $_SESSION['export']['rows'] = json_decode($cached_excel_result[0]['result']);     
        foreach($get_rankings_from_cache['data']->rows as $key => $value) {      
            if(isset($value->brand_id)) array_push($records_brand_ids,$value->brand_id);
            if(isset($value->adv_id)) array_push($records_advertiser_ids,$value->adv_id);
        }
        $_SESSION['records_brand_ids']      = $records_brand_ids;
        $_SESSION['records_advertiser_ids'] = $records_advertiser_ids;

        $session_apply_filter       = $_SESSION['apply_filter_data'];
        $response->session_apply_filter = $session_apply_filter;
        
    } else {
        $response = custom_filter($sd,$ed,$tab,$c,$cat,$catIn,$val,$requestData);
        
        if ($get_rankings_from_cache['status'] == 2) { //fill cache
            $clause                             = "start_date = {$sd} AND end_date = {$ed}";
            $no_of_days_to_cache                = 1;
            //caching html
            $sql = "UPDATE cached_response SET result = '".addslashes(json_encode(array("rows" => $response['rows'])))."', clause='$clause', cached_time='".date("Y-m-d H:i:s")."', expiry_time='".date("Y-m-d 23:59:59", strtotime("+$no_of_days_to_cache days"))."' WHERE component='{$last_week_data_html}'"; 
            execute_sql($sql);
            //caching excel queries 
            $sql = "UPDATE cached_response SET result = '".addslashes(json_encode($response['exp_data']))."', clause='$clause', cached_time='".date("Y-m-d H:i:s")."', expiry_time='".date("Y-m-d 23:59:59", strtotime("+$no_of_days_to_cache days"))."' WHERE component='{$last_week_export_data}'"; 
            execute_sql($sql);              
        }
    } 

    echo json_encode($response);
}

function getRequestDataForRefineFilters($export = 0, $request_arr = NULL) {
    $records_ids = array();
    $db = getConnection();

    $cols = $order_search = $where_flag =  ' ';
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    if($export == 1) {
        $requestData = $request_arr;
        $tab                        = isset($requestData['tab']) ? $requestData['tab'] :$requestData['type'];
        $params['type']             = $tab;
    }else {
        $request = Slim::getInstance()->request();
        $query_string = $request->getBody();
        $requestData = (array)json_decode($query_string, TRUE);
        $_SESSION['filter_data'] = addslashes($query_string);
        $_SESSION['filter_type'] = 'ranking';	
        if( isset($_REQUEST) && count($_REQUEST) != 0 ) {
            if( isset($_REQUEST['c']) ) $_REQUEST['c'] = str_replace('+', ' ', $_REQUEST['c']);
            if( isset($_REQUEST['cat']) ) $_REQUEST['cat'] = str_replace('%2C', ',', $_REQUEST['cat']);
            if( isset($_REQUEST['unchecked_category']) ) $_REQUEST['unchecked_category'] = str_replace('%2C', ',', $_REQUEST['unchecked_category']);
            /*foreach($_REQUEST as $k =>$v) {
                $_REQUEST[$k] = str_replace('+', " ", $v);
                $_REQUEST[$k] = str_replace('%2C', ",", $v);
            }*/
            // $set_one = $requestData = $_REQUEST;
        } else {
            $requestData = (array)json_decode($query_string, TRUE);
        }
        $tab                        = $requestData['type'];
        $params['type']             = $requestData['type'];
    }
    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');
    $cat                        = rtrim($requestData['cat'],",");
    $cat                        = rtrim($cat,"all,");
    $catIn                      = '('.$cat.')';
    $sidx                       = isset($requestData['sidx']) ? $requestData['sidx'] : '';
    $sord                       = isset($requestData['sord']) ? $requestData['sord'] : '';
    $page                       = isset($requestData['page']) ? $requestData['page'] : 1;
    $c                          = urldecode($requestData['c']);
    $sd                          = "2020-02-24";
    $ed                          = "2020-03-01";
    $limit                      = isset($requestData['rows']) ? $requestData['rows'] : 0;
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $refine_filter_opt          = isset($requestData['refine_filter_opt']) ? $requestData['refine_filter_opt'] : 'none';
    $refine_filter_opt_text     = isset($requestData['refine_filter_opt_text']) ? str_replace('%2F', "/", $requestData['refine_filter_opt_text']) : 'none';
    $refine_filter_opt_text     = isset($requestData['refine_filter_opt_text']) ? str_replace('%2B', "", $refine_filter_opt_text) : 'none';
  //  $search                     = $requestData['search'];
    $network_code               = isset($requestData['network_code']) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $network_id                 = isset($requestData['network_id']) ? $requestData['network_id'] : '';
    $_resp_type                 = urldecode($requestData['responseType']);
    $responseType               = "(".$_resp_type.")";
    $spanish                    = urldecode($requestData['spanish']);
    $lang_type                  = $spanish == 0 ? '' : 'sp-';
    $brand_adv_id               = ($tab == 1) ? 'b.brand_id':'b.adv_id';
    $group_by_brand_adv_id      = ($tab == 1) ? 'b.brand_id':'b.adv_id';    
    $join_condition             = ($tab == 1) ? 'b.brand_id = r.brand_id':'b.adv_id = r.adv_id';
    $active_flag                = isset($requestData['flag']) ? $requestData['flag'] : '2';
    $word                       = ($tab == 1) ? 'brand_name' : 'display_name';
    $count_unchecked_cat        = $requestData['length_unchecked'];
    $creative_durations         = urldecode($requestData['creative_duration']);
    $advOrBrandId               = $tab == 1 ? 'b.brand_id' : 'adv.adv_id';
    $params['apply_filter_called']   = $apply_filter_called = isset($requestData['apply_filter_called']) ? $requestData['apply_filter_called'] : 0;
    $programs           = $requestData['programs']      = isset($output['programs']) ? $output['programs'] : array();
    $brand_classification       = '';
    $refine_apply_filter               = isset($requestData['refine_apply_filter']) ? $requestData['refine_apply_filter'] : 0;
    $params['applied_ids']           = isset($requestData['applied_ids']) ? urldecode($requestData['applied_ids']) : '';
    if ($tab == 0 ) {
        $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND adv.adv_id IN ('.$params['applied_ids'] .')' : '';
    } else  {
        if($requestData['primary_tab'] == 'advertiser') {
            $fetch_brands =  get_query_result('__query_get_brands_for_adv', $params, 'FETCH_OBJ');
            $params['list_ids'] = $fetch_brands[0]->brand_ids;
        }
        $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND b.brand_id IN ('.$params['applied_ids'] .')' : '';
    }
    $cat                        = rtrim($requestData['cat'],",");
    $cat                        = rtrim($cat,"all,");
    $catIn                      = '('.$cat.')';
    $uncheckedCatIn             = '('.rtrim($requestData['unchecked_category'],",").')';
    //$nullAdvId                  = ($tab == 1) ? '' : ' AND adv.adv_id != 0';
    $params['replaced'] = 0;
    if($refine_filter_opt == '800') {
        $refine_filter_opt_text_replaced    = getNumbersForAlphabets($refine_filter_opt_text);
        if($refine_filter_opt_text != $refine_filter_opt_text_replaced) {
            $params['replaced'] = 1;
            $refine_filter_opt_text = $refine_filter_opt_text_replaced;
        }
    }
    //$user_access_type           = userAccessInfo("filter");
    if(DEFAULT_RESPONSE_TYPE == $responseType || $responseType == '('.DEFAULT_RESPONSE_TYPE.')' ) {
        $responseType = '';
    } else {
        $responseType = ' AND '.$responseType;
    }
    
    if($count_unchecked_cat <= CATEGORY_UNCHECKED_LIMIT && $count_unchecked_cat != 0){
        $categories                 = ' AND (b.main_sub_category_id NOT IN '.$uncheckedCatIn .' OR b.alt_sub_category_id NOT IN '.$uncheckedCatIn.') ';
    }else{
        $categories                 = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';
    }
  
    if($c > 5){
        $active_col = 'long_active';
        $c_dir = 6;
    }else{
        $active_col = 'short_active';
        $c_dir = 1;
    }
    
    if($active_flag == 1){
        $where_flag = ' AND b.'.$active_col.' = 1 ';
        if ($tab == 0) {
            $where_flag = ' AND adv.'.$active_col.' = 1 ';
        }
    } else if($active_flag == 0){
        $where_flag = ' AND b.'.$active_col.' = 0 ';
        if ($tab == 0) {
            $where_flag = ' AND adv.'.$active_col.'= 0 ';
        }
    }

    $cols = ' b.'.$active_col .' as is_active_brand, adv.'.$active_col .' as is_active_adv';
    $brand_classification  = getBrandClassification($c,$creative_durations);
    
    $params['advOrBrandId']         = $advOrBrandId;
    $params['spanish']              = $spanish;
    $params['c']                    = $c;
    $params['cols']                 = $cols;
    $params['sd']                   = $sd;
    $params['ed']                   = $ed;
    $params['where_flag']           = $where_flag;
    $params['brand_classification'] = $brand_classification['brand_classification'];
   // $params['where_search']         = $where_search;
    $params['categories']           = $categories;
    $params['responseType']         = $responseType;
    $params['c_dir']                = $c_dir;
    $params['network_code']         = addslashes(urldecode($network_code));
    $params['network_id']           = $network_id;
    $params['tab']                  = $tab;
    $params['creative_id']          = isset($requestData['creative_id']) ? $requestData['creative_id'] : ''; 
    $params['record_id']            = isset($requestData['record_id']) ? $requestData['record_id'] : '';
    $params['program_ids']          = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $params['new_filter_opt']       = $new_filter_opt;
    $params['refine_filter_opt']    = $refine_filter_opt;
    $params['refine_filter_opt_text']  = $refine_filter_opt_text;
    $params['sidx']                 = $sidx;
    $params['sord']                 = $sord;
    $params['page']                 = $page;
    $params['limit']                = $limit;
    $params['c']                    = $c;
    $params['programs']             = $programs;
    $params['refine_apply_filter']  = $refine_apply_filter;
    return $params;
    
}

function applyRefineFilters() {
    $db                         = getConnection();
    $all_programs               = $setAllPrograms = array();
    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');
  
    $params                     = getRequestDataForRefineFilters();
    $sidx                       = $params['sidx'];
    $sord                       = $params['sord'];
   
    $columns = array( 
        'creative_name' =>  'creative_name', 
        'brand_name' => 'brand_name',
        'advertiser_name' => 'display_name',
        'airings' => 'airings',
        'airings_hidden' => 'airings',
        'first_aired' => 'first_aired',
        'last_aired' => 'last_aired',
        'thumbnail' => 'thumbnail'
    );      
    
    $export_order_by =   $columns[$sidx] ." ".$sord ;
    $params['export_order_by']      = $export_order_by;
    
    $result  = get_query_result('__query_refine_by_800_url', $params, 'FETCH_OBJ');
    $totalData = count($result);
    $totalFiltered = $totalData;
    $count = $totalData;
    $data = $newArrayPrograms = $setAllPrograms = $checkedPrograms= $all_programs = array();
    $exportData = array();
    $program_id_array = explode(",",$params['program_ids']);
    foreach($result as $resultK => $resultV){
        $nestedData     = $export = array();
        if(isset($resultV->programs)) {
            $program_brand = explode("|",$resultV->programs);
            foreach($program_brand as $key => $value) {
                $program_ids = explode("===",$value);
                $all_programs[$program_ids[1]] = $program_ids[0].'***'.$resultV->network_id;
            }
            $setAllPrograms = array_unique($all_programs);
        }

        foreach($setAllPrograms as $key => $value) {
            $arr = explode('***',$value);
            $newArrayPrograms[$key]['network_id'] = $arr[1];
            $newArrayPrograms[$key]['program']    = $arr[0];
            if($params['apply_filter_called'] != 1) {
                array_push($checkedPrograms, $arr[0]);
            }
        }
        if($params['apply_filter_called'] == 1) {
            if(!empty($params['programs']) && $params['programs'] != 'false') {
                foreach($params['programs'] as $key => $value) {
                    foreach($value as $k => $v) {
                        if(in_array($k,$program_id_array)){
                            array_push($checkedPrograms, $v['program']);
                        }
                    }
                }
            }
        }
        uasort($newArrayPrograms, "cmp");
        $checkedPrograms = array_unique($checkedPrograms);
        sort($checkedPrograms);
        $url_brand      = "/drmetrix/brandDetail/".$resultV->ID."/brand/browse//";
        $url_adv        = "/drmetrix/advDetail/".$resultV->adv_id."/adv/browse/";
        $export['creative_name']                   = $resultV->creative_name;

        $nestedData['brand_name_search']        = $resultV->brand_name;
        $nestedData['adv_name_search']          = $resultV->advertiser_name;
        $nestedData['id']                       = $resultV->creative_id;
        $nestedData['brand_name_hidden']        = $resultV->brand_name;
        $nestedData['creative_name_hidden']     = $resultV->creative_name;
        $nestedData['advertiser_name_hidden']   = $resultV->advertiser_name;
        $nestedData['airings_hidden']           = $resultV->airings;   
        $active_inactive_brand_class = '';
        $active_inactive_adv_class   = '';
        if($params['type'] == 1) {
            $nestedData['is_active_brand'] = $resultV->is_active_brand ;
            $active_class = ($resultV->is_active_brand == 1) ? 'active_btn' : 'inactive_btn';
            $active_inactive_brand_class     = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
            $active_inactive_adv_class    = '';
            $nestedData['thumbnail']            = '<a href="javascript:void(0);" ><i class="fa fa-file-text-o fa-2x" style="font-size: 1.6em;" onClick="overlayForAirings('.$resultV->ID.','.$resultV->creative_id.',\''.addslashes($resultV->brand_name).'\')"></i></a>';
        } else {
            $nestedData['is_active_adv']    = $resultV->is_active_adv ;
            $active_class                   = ($resultV->is_active_adv == 1) ? 'active_btn' : 'inactive_btn';
            $active_inactive_adv_class    = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
            $active_inactive_brand_class      = '';
            $nestedData['thumbnail']            = '<a href="javascript:void(0);"><i class="fa  fa-file-text-o fa-2x" style="font-size: 1.6em;"  onClick="overlayForAirings('.$resultV->ID.','.$resultV->creative_id.',\''.addslashes($resultV->advertiser_name).'\')"></i></a>';
        }
        $resultV->display_tfn_column = trim($resultV->display_tfn_column,",");
        $tfn_comma_found = findPositionOfChar(',',$resultV->display_tfn_column);
        $nestedData['tfn_comma_found'] = $tfn_comma_found;
       if($tfn_comma_found == 1) {
            $nestedData['display_tfn_column']          =    $resultV->display_tfn_column;
            $nestedData['display_tfn_column_hidden']       = $resultV->display_tfn_column;
       } else {
            $nestedData['display_tfn_column']             =   $nestedData['display_tfn_column_hidden'] = !empty($resultV->display_tfn_column) ? $resultV->display_tfn_column : '-';
        }
        $resultV->display_url_column = trim($resultV->display_url_column,",");
        $url_comma_found = findPositionOfChar(',',$resultV->display_url_column);
        if($url_comma_found == 1) {
            $nestedData['display_url_column']          =   !empty($resultV->display_url_column) ? $resultV->display_url_column :  '-' ;
            $nestedData['display_url_column_hidden']       = $resultV->display_url_column;
       }  else {
            $nestedData['display_url_column']             =   $nestedData['display_url_column_hidden'] =  !empty($resultV->display_url_column) ? $resultV->display_url_column : '-';
       }
        $nestedData['creative_id']              = $resultV->creative_id;
        $nestedData['ID'] =  $resultV->ID;
        $nestedData['brand_name']               = $resultV->brand_name;
        $export['brand_name']                   = $resultV->brand_name;
        // $nestedData['creative_name'] = '<i class="fa fa-circle" id="'.$active_class.'"></i><span><a href="#" onclick="view_adv_tab(\''.addslashes($resultV->display_name).'\','.$resultV->adv_id.','.$c_dir.',\''.$tab.'\',\''.$val.'\',\''.$sd_dir.'\',\''.$ed_dir.'\',\'creatives\','.$resultV->creative_id.',\''.addslashes(htmlspecialchars($resultV->creative_name)).'\',\'ranking\','.$resultV->need_help.')" >'.$resultV->creative_name.'</a></span>';
        $nestedData['adv_id'] =  $resultV->adv_id;
        $nestedData['need_help'] =  $resultV->need_help;
        $nestedData['creative_name']            = $resultV->creative_name;
        $nestedData['advertiser_name']          = $resultV->advertiser_name;
        $export['advertiser_name']          = !empty($resultV->advertiser_name) ? $resultV->advertiser_name : '-' ;
        $nestedData['airings']              = $resultV->airings ? number_format($resultV->airings) : 0 ;
        $export['airings']               =  $nestedData['airings'];  
        $export['display_tfn_column']              = !empty($resultV->display_tfn_column) ? $resultV->display_tfn_column : '-';
        $export['display_url_column']              = !empty($resultV->display_url_column) ? $resultV->display_url_column : '-';
        $nestedData['first_aired']          = !empty($resultV->first_aired_date) ? $resultV->first_aired_date : '-' ;  
        $export['first_aired']              =  dateFormateForGridDate($nestedData['first_aired']);
        $nestedData['last_aired']           = !empty($resultV->last_aired_date) ? $resultV->last_aired_date : '-' ;   
        $export['last_aired']               =  dateFormateForGridDate($nestedData['last_aired']);
        
        $data[] = $nestedData;
        $exportData[] = $export;
    }
    $json_data['rows']      = !isset($_REQUEST) || !count($_REQUEST) ? $data : $exportData;
    $json_data['page']      = $params['page'];
    $json_data['programs']  = createSortableArrayForJquery($newArrayPrograms);
    $json_data['checkedPrograms'] = $checkedPrograms;
    $json_data['records']   = $count;
    $_SESSION['export_refine_records']['rows'] = $exportData;
    echo json_encode($json_data);
}

function viewAiringsLayoutTfn($export_flag = 0, $request_arr = NULL) {
    ini_set('memory_limit', '8192M');
    $networks_array             = array();
    $data                       = array();
    $exp_data                   = array();
    $records_ids                = array();
    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');
    if($export_flag == 1){
        $requestData = $request_arr;
        $excel_id    = $requestData['excel_id'];
        $params      = getRequestDataForRefineFilters(1, $requestData);
    }else{
        $request = Slim::getInstance()->request();
        $query_string = $request->getBody();
        $requestData = (array)json_decode($query_string, TRUE);
        $params                     = getRequestDataForRefineFilters();
    }

    $sidx                       = $params['sidx']; // Custom code for a timing $params['sidx']
    $sord                       = $params['sord']; // Custom code for a timing $params['sord']
    $columns = array( 
        'network_name'  => 'network_alias', 
        'date_time'     => 'last_aired',
        'breaktype'     => 'breaktype',
        'phone_number'  => 'tfn',
        'web_address'   => 'url',
        'promo_code'    => 'promo_code',
        'verify'        => 'verify',
        'program_name'  => 'program',
        'thumbnail'     => 'thumbnail',
        'last_aired'    => 'start'
    );

    if ($params['refine_filter_opt'] == '800') {
        $array = getRefineTextWithStringFilters($params['refine_filter_opt_text'], $params['replaced']);
        $params['refine_filter_opt_text']  = $array['refine_filter_opt_text'];
        $where_refine_by = 'AND a.verified = 1 AND a.'.$array['colName'].'   LIKE "%' . $params['refine_filter_opt_text'] . '%"';
    } else if ($params['refine_filter_opt'] == 'url') {
        $where_refine_by = 'AND a.verified = 1 AND a.url LIKE "%' . $params['refine_filter_opt_text'] . '%"';
    }

    if($export_flag == 0){
        $export_order_by =   $columns[$sidx] ." ".$sord ;
        $pagenum = $params['page'];
        $params['export_order_by']      = $export_order_by;
        $params['limit_string']         = '';
        $result    = get_query_result('__query_display_airings_layout', $params, 'FETCH_OBJ');
        $count     = count($result);
        if ($count > 0) {
            $total_pages = 10;
          } else {
            $total_pages = 0;
          }
        if ($params['page'] > $total_pages) $params['page']=$total_pages;
        $start = $params['limit']*$params['page'] - $params['limit']; // do not put $limit*($page - 1)
        $params['limit_string'] = ' LIMIT '.$start.' , '.$params['limit'];
    } else {
        $params['export_order_by']      = 'd.start DESC';
        $params['limit_string']         = '';
    }
    $result    = get_query_result('__query_display_airings_layout', $params, 'FETCH_OBJ');
    $count     = count($result);
    
    if($result){
        foreach($result as $resultK => $resultV) {
            $no_record_found = 0;
            if(!in_array($resultV->network_code,$networks_array)) {
                array_push($networks_array,$resultV->network_code);
            }
            $query_params['creative_id'] = $resultV->creative_id;
            $query_params['network_id']  = $resultV->network_id;
            $query_params['where']       = $where_refine_by;
            if( strtotime($resultV->start) < strtotime('-10 day')) {
                $noRecords = getNoRecordIfNetworkConditions($query_params);
                if(empty($noRecords)) {
                    if ($params['refine_filter_opt'] == '800') {
                        if (strpos($resultV->master_tfn_num, $params['refine_filter_opt_text']) === false) {
                            $no_record_found = 1; // NA display
                        }
                    }
                }
            }
            $nestedData = array();  
            $nestedData['network_name']     = $export['network_name'] = $resultV->network_alias;
            $nestedData['network_name']     = $export['network_name'];
            $nestedData['network_code']     = $resultV->network_code;
            $nestedData['last_aired']       =  $resultV->start;
            $export['last_aired']           = dateFormateForGridDate($nestedData['last_aired']);
            // $nestedData['date_time']        = $export['last_aired'] = $resultV->last_aired; // $export['last_aired'] added not to change sequesce in export
            $nestedData['breaktype']        = $export['breaktype'] = $resultV->breaktype == 'N' ? 'National' : 'DPI';
            $nestedData['phone_number']     = $export['phone_number'] = $resultV->tfn;
            $nestedData['web_address']      = $export['web_address'] = $resultV->url;
            $nestedData['promo_code']       = $resultV->promo;
            $nestedData['verify']           = $resultV->verified == 1 ? 'Yes' : 'No';
            $nestedData['program_name']     = $export['program_name'] = $resultV->program;
            $nestedData['program_name']     = $nestedData['program_name'];
            // $nestedData['last_aired_old']   = $resultV->last_aired;
            $nestedData['video']            = $export['video'] = '';
            $nestedData['airing_id']        = $resultV->airing_id;
            $nestedData['creative_id']      = $resultV->creative_id;
            $nestedData['thumbnail']        = '';
            // $export['thumbnail']            = createImageLink($resultV->creative_id, $resultV->airing_id);
            $passing_params['airing_id']        = $resultV->airing_id;
            $passing_params['network_code']     = $resultV->network_code;

            if($export_flag == 1){
                if($no_record_found) {
                    $export['video']     = 'N/A';
                } else {
                    $export['video']                =  base64_encode("creative_id=".$resultV->creative_id."&airing_id=".$resultV->airing_id."&excel_id=".$excel_id."&date=".time()."&page=refine_page&refine_by=".$params['refine_filter_opt']."&search_by_tfn=".$params['refine_filter_opt_text']);
                }
                $query_string = base64_encode("creative_id=".$resultV->creative_id."&airing_id=".$resultV->airing_id."&date=".time()."&excel_id=".$excel_id."&page=refine_page&refine_by=".$params['refine_filter_opt']."&search_by_tfn=".$params['refine_filter_opt_text']);
                $export['thumbnail']   = 'http://'.HOST."/drmetrix/video/{$query_string}?video=2";
            }
            

            if($no_record_found) {
                $nestedData['video'] = 'N/A';
            } else {
                $nestedData['video'] = '<a href="javascript:void(0);"><i class="fa fa-play-circle-o fa-2x" onclick="displayThumbnail('.$resultV->airing_id.',\''.$resultV->network_code.'\',\'network_log_video\')"></i></a>';
            }
            $data[] = $nestedData;
            $exp_data[] = $export;
        }
    }
    if($export_flag == 1){
        return $exp_data;
    }else{
        $json_data['rows']      = $data;
        $json_data['page']      = $params['page'];
        $json_data['total']     = $total_pages;
        $json_data['records']   = $count;
        $json_data['status']    = 1;

        echo json_encode($json_data);
        exit;
    }
}


function addEntryToSearchLog($tab,$count,$search,$username){
    $db = getConnection();
    
    $tab_name = ($tab == 1) ? 'brand' : 'advertiser';
    $sql = sprintf(_SQL_INSERT_SEARCH_ENTRY,$tab_name,$count,$search,$username);
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function categorySqlCall($catIn){
        $db = getConnection();
        $sub_cat_id     = $catIn;
        $category['where'] = " AND sub_category_id IN ".$sub_cat_id;
        $category['where_string'] = " AND sub_category_id IN (".$sub_cat_id.")";
        $category['join'] = "  INNER JOIN categories cat ON (b.main_sub_category_id = cat.sub_category_id OR b.alt_sub_category_id = cat.sub_category_id)  "; 
        $category['join_string'] = "  INNER JOIN categories ON (brand.main_sub_category_id = categories.sub_category_id OR brand.alt_sub_category_id = categories.sub_category_id)  "; 
        return $category;
}

function categorySqlCallForCreative($catIn){
        $db = getConnection();
        $sub_cat_id     = $catIn;
        $category['where'] = " AND cat.sub_category_id IN ".$sub_cat_id;
        $category['join'] = "  INNER JOIN categories cat ON cat.sub_category_id IN (b.main_sub_category_id, b.alt_sub_category_id)  "; 
        return $category;
}

function getSummaryToggle(){
    $db     = getConnection();
    $params = array();
    $result  = get_query_result('__query_summary_log_value', $params, 'FETCH_OBJ');
    $_SESSION['summary_log'] =  $result[0]->value;
    return  $result[0]->value;
}

function getNetworksWithAllFilters(){
    $db = getConnection();
    $request = Slim::getInstance()->request();
    $requestData = json_decode($request->getBody());

    $params                 = array();
    $sd                     = $requestData->sd;
    $ed                     = $requestData->ed;
    $classification         = $requestData->c;
    $tab                    = $requestData->type;
    $cat                    = rtrim($requestData->cat,",");
    $cat                    = rtrim($cat,"all,");
    $catIn                  = '('.$cat.')';
    $uncheckedCatIn         = '('.rtrim($requestData->unchecked_category,",").')';
    $network_code           = isset($requestData->network_code) ? trim($requestData->network_code) : '';
    $_resp_type             = urldecode($requestData->responseType);
    $responseType           = "(".$_resp_type.")";
    $spanish                = urldecode($requestData->spanish);
    $lang_type              = $spanish == 0 ? '' : 'sp-';
    $brand_adv_id           = ($tab == 1) ? 'b.brand_id':'b.adv_id';
    $count_unchecked_cat    = $requestData->length_unchecked;
    $durations              = $requestData->creative_duration;
    $new_filter_opt         = isset($requestData->new_filter_opt) ? $requestData->new_filter_opt : 'none';

    $params['applied_ids']    = isset($requestData->applied_ids) && $requestData->applied_ids!= '' ? urldecode($requestData->applied_ids) : '';
    if(!isset($requestData->primary_tab)) {
        if($requestData->type == 1) {
            $requestData->primary_tab = 'brand';
        } else {
            $requestData->primary_tab = 'advertiser';
        }
    }
    $get_networks_from_cache = get_networks_from_cache($requestData);
    
    if ($get_networks_from_cache['status'] == 1) {
        $result         = $get_networks_from_cache['data'];
    } else {
        if($count_unchecked_cat <= CATEGORY_UNCHECKED_LIMIT && $count_unchecked_cat != 0){
            $categories                 = ' AND (b.main_sub_category_id NOT IN '.$uncheckedCatIn .' OR b.alt_sub_category_id NOT IN '.$uncheckedCatIn.') ';
        }else{
            $categories                 = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';
        }
       
        $brand_classification  = getBrandClassification($classification,$durations);
        
        $params['spanish']              = $spanish;
        $params['sd']                   = $sd;
        $params['ed']                   = $ed;
        $params['brand_classification'] = $brand_classification['brand_classification'];
        $params['duration']             = $brand_classification['duration_in'];
        $params['categories']           = $categories;
        $params['responseType']         = $responseType;
        $params['network_code']         = addslashes(urldecode($network_code));
        $params['categories']           = $categories;
        $params['new_filter_opt']       = $new_filter_opt;
        if ($tab == 0 ) {
            $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND adv.adv_id IN ('.$params['applied_ids'] .')' : '';
        } else  {
            if($requestData->primary_tab == 'advertiser') {
                $fetch_brands =  get_query_result('__query_get_brands_for_adv', $params, 'FETCH_OBJ');
                $params['applied_ids'] = $fetch_brands[0]->brand_ids;
            }
            $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND b.brand_id IN ('.$params['applied_ids'] .')' : '';
        }
       
        $networks_result     = get_query_result('__query_networks_with_all_filters', $params);
        $networks_array      = explode(',', $networks_result[0]['network_codes']);
        $result              = array_unique($networks_array);

        if ($get_networks_from_cache['status'] == 2) { //fill cache
            $clause                             = "start_date = {$sd} AND end_date = {$ed}";
            $no_of_days_to_cache                = 1;
            $sql = "UPDATE cached_response SET result = '".addslashes(json_encode($result))."', clause='$clause', cached_time='".date("Y-m-d H:i:s")."', expiry_time='".date("Y-m-d 23:59:59", strtotime("+$no_of_days_to_cache days"))."' WHERE component='ranking_network_popup'"; 
            execute_sql($sql);
        }
    }
    /*
    if($count_unchecked_cat <= CATEGORY_UNCHECKED_LIMIT && $count_unchecked_cat != 0){
        $categories                 = ' AND (b.main_sub_category_id NOT IN '.$uncheckedCatIn .' OR b.alt_sub_category_id NOT IN '.$uncheckedCatIn.') ';
    }else{
        $categories                 = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';
    }
   
    $brand_classification  = getBrandClassification($classification,$durations);
    
    $params['spanish']              = $spanish;
    $params['sd']                   = $sd;
    $params['ed']                   = $ed;
    $params['brand_classification'] = $brand_classification['brand_classification'];
    $params['duration']             = $brand_classification['duration_in'];
    $params['categories']           = $categories;
    $params['responseType']         = $responseType;
    $params['network_code']         = addslashes(urldecode($network_code));
    $params['categories']           = $categories;
    $params['new_filter_opt']       = $new_filter_opt;
   
    $networks_result     = get_query_result('__query_networks_with_all_filters', $params);
    $networks_array      = explode(',', $networks_result[0]['network_codes']);
    $result              = array_unique($networks_array);
    */

    $network_result  = get_query_result('__query_network_alias', $params);
    $return = array();
    foreach($network_result as $n1 => $n2){
        foreach($result as $k => $v){
            if($v == $n2['network_id']){
                $array['network_id']    = $n2['network_id'];
                $array['network_code']  = $n2['network_code'];
                $array['network_alias'] = $n2['network_alias'];
                $array['dpi']           = $n2['dpi'];
                $array['live_date']     = $n2['live_date'];
                $return[] = $array;
                break;
            }
        }
    }
    echo  json_encode(array('result' => $return, 'status'=>1));
}

function getBrandClassification($classification,$durations){
    $return_classification = array();
    $brand_classification  = ' AND c.class != "BRAND" ';
    $found                 = 0;
    $retail_cond           = '';
    $long                  = false;
    $short                 = false;
    $retailASONTVrankings = false;

    if($classification == '1') {
        $short = true;
    } else if ($classification == '6' || $classification == '7') {
        $long = true;
    } else if ($classification == '5') {
        $short = true;
        $classification_arr = explode(',', $classification);
        $brand_classification = get_classification_condition($classification_arr);
    } else if($classification != '1' && $classification != '6') {
        $classification_arr = explode(',', $classification);
        foreach ($classification_arr as $key => $value) {
            if($value <= 5) {
                if($value == 5) {
                    $retailASONTVrankings = true;
                }
                $short = true;
            }
        }
        $brand_classification = get_classification_condition($classification_arr);
    }

    if ($durations != 'all_short_duration'){ //strpos($durations,'all_short_duration') !== false
        $found = 1;
    }
    if($durations == 'all_short_duration'){// duration word cotains all_short_duration only on load
        $length_condition = ' AND c.length <= '.LENGTH;
        $network_query_length_condition = $length_condition;
    }else if($short && $found == 1){
        $durations = str_replace('%2C', ",", $durations);
        $durations = str_replace('all_short_duration,', '', $durations);
        if($durations == '' || empty($durations)) {
            $length_condition = ' AND c.length > 300 '.($retailASONTVrankings ? 'and b.exclude_short != 1' : '');
            $network_query_length_condition = ' AND c.length > 300 ';
        } else {
            $length_condition = ' AND c.length IN ('.$durations.') '.($retailASONTVrankings ? 'and b.exclude_short != 1' : '');
            $network_query_length_condition = ' AND c.length IN ('.$durations.') ';
        }
    }else if($short){
        if($durations == '' || empty($durations)) {
            $length_condition = ' AND c.length > 300 '.($retailASONTVrankings ? 'and b.exclude_short != 1' : '');
            $network_query_length_condition = '  AND c.length > 300 ';
        } else {
            $length_condition = ' AND c.length IN ('.$durations.') '.($retailASONTVrankings ? 'and b.exclude_short != 1' : '');
            $network_query_length_condition = '  AND c.length IN ('.$durations.')';
        }
    }else if($long){
        if($classification == '7') {
            $length_condition = ' and c.length > '.LENGTH.' and b.exclude_long != 1 and b.retail_report = 1';
            $network_query_length_condition = '  AND c.length > '.LENGTH;
        } else {
            $length_condition = ' AND c.length > '.LENGTH.' and b.exclude_long != 1';
            $network_query_length_condition = '  AND c.length > '.LENGTH;
        }
    }

    
    // if($classification == '3'){ // lead generation
    //     $brand_classification = ' and c.class = "DR" and c.type = "LEAD GEN"';
    // }else if($classification == '2'){ //Short-Form Products
    //     $brand_classification = ' and c.class = "DR" and c.type = "PRODUCT"';
    // }else if($classification == '4'){ //Brand DR
    //     $brand_classification = ' and c.class = "BRAND DR" and c.type in("LEAD GEN", "PRODUCT")';
    // }else if($classification == '5'){ //retail products short
    //     $brand_classification = ' and c.class IN ("DR", "BRAND DR") and c.type in("LEAD GEN", "PRODUCT") and b.retail_report = 1';
    // }else if($classification == '7'){ // long retail products
    //     $brand_classification = ' and c.length > '.LENGTH.' and b.retail_report = 1';
    // }


    $brand_classification    = $length_condition.$brand_classification.$retail_cond;
    $return_classification['length_condition']     = $network_query_length_condition;
    $return_classification['brand_classification'] = $brand_classification;
    $return_classification['duration_in']          = $durations;
    return $return_classification;

}

function cmp($a, $b)
{
    return (strcasecmp ($a['program'],$b['program']));
}


function custom_filter($sd,$ed,$tab,$c,$cat,$catIn,$val, $requestData = NULL){
    $db = getConnection();

    $cols = $order_search = $where_flag =  ' ';
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = $setAllPrograms =  $newArrayPrograms = array();

    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');
   
    $sidx                       = 'spend_index'; // for Brand 'hidden_spend_index'
    $sord                       = 'desc';
    $page                       = 1;
    $limit                      = 10;
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $refine_filter_opt          = isset($requestData['refine_filter_opt']) ? $requestData['refine_filter_opt'] : 'none';
    $refine_filter_opt_text     = isset($requestData['refine_filter_opt_text']) ? $requestData['refine_filter_opt_text'] : 'none';
  //  $search                     = $requestData['search'];
    $network_code               = isset($requestData['network_code']) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $network_id               = isset($requestData['network_id']) ? $requestData['network_id'] : '';
    $_resp_type                 = urldecode($requestData['responseType']);
    $responseType               = '('.$_resp_type.')';
    $spanish                    = urldecode($requestData['spanish']);
    $lang_type                  = $spanish == 0 ? '' : 'sp-';
    $brand_adv_id               = ($tab == 1) ? 'b.brand_id':'b.adv_id';
    $group_by_brand_adv_id      = ($tab == 1) ? 'b.brand_id':'b.adv_id';    
    $join_condition             = ($tab == 1) ? 'b.brand_id = r.brand_id':'b.adv_id = r.adv_id';
    $active_flag                = isset($requestData['flag']) ? $requestData['flag'] : '2';
    $word                       = ($tab == 1) ? 'brand_name' : 'display_name';
    // $count_unchecked_cat        = $requestData['length_unchecked'];
    $creative_durations         = urldecode($requestData['creative_duration']);
    $advOrBrandId               = $tab == 1 ? 'b.brand_id' : 'adv.adv_id';
    $brand_classification       = '';
    $refine_apply_filter        = isset($requestData['refine_apply_filter']) ? $requestData['refine_apply_filter'] : 0;
    $program_ids                = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $categories                 = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';

    if(DEFAULT_RESPONSE_TYPE == $responseType) {
        $responseType = '';
    } else {
        $responseType = ' AND '.$responseType;
    }

    if($c > 5){
        $active_col = 'long_active';
        $c_dir = 6;
    }else{
        $active_col = 'short_active';
        $c_dir = 1;
    }
    
    if($active_flag == 1){
        $where_flag = ' AND b.'.$active_col.' = 1 ';
        if ($tab == 0) {
            $where_flag = ' AND adv.'.$active_col.' = 1 ';
        }
    } else if($active_flag == 0){
        $where_flag = ' AND b.'.$active_col.' = 0 ';
        if ($tab == 0) {
            $where_flag = ' AND adv.'.$active_col.'= 0 ';
        }
    }
   
    $brand_classification  = getBrandClassification($c,$creative_durations);

    $cols = $cols.' b.'.$active_col .' as is_active_brand, adv.'.$active_col .' as is_active_adv';
    $cols .= ',b.main_sub_category_id, b.alt_sub_category_id';

    if($tab == 1){
        $columns = array( 
            'rank' =>  'rank', 
            'search' =>  'search', 
            'brand_name' => 'brand_name',
            'category_name'=>'category',
            'creative_count'=>'creative_count',
            'advertiser_name' => 'display_name',
            'creatives_count' => 'creatives_count',
            'airings' => 'airings',
            'spend_index' => 'spend_index',
            'hidden_spend_index' => 'spend_index',
            'national' => 'national',
            'local' => 'DPI',
            'asd' => 'asd',
            'networks' => 'networks',
            'hidden_category'=>'category',
            'hidden_creatives'=>'creative_count',
            'hidden_airings' => 'airings',
            'brand_name_search' => 'brand_name_search',
            'tracking' => 'tracking'
        );      
    }else{
        $columns = array( 
            'rank' =>  'rank', 
            'search' =>  'search', 
            'advertiser_name' => 'display_name',
            'no_of_brands' => 'no_of_brands',
            'category_name'=>'category',
            'airings' => 'airings',
            'spend_index' => 'spend_index',
            'national' => 'national',
            'local' => 'DPI',
            'asd' => 'asd',
            'networks' => 'networks',
            'hidden_brand'=>'no_of_brands',
            'hidden_airings' => 'airings',
            'adv_name_search' => 'adv_name_search',
            'tracking' => 'tracking'
        );
    }

    $export_order_by =   $columns[$sidx] ." ".$sord ;
    
    $params['advOrBrandId']         = $advOrBrandId;
    $params['spanish']              = $spanish;
    $params['cols']                 = $cols;
    $params['sd']                   = $sd;
    $params['ed']                   = $ed;
    $params['where_flag']           = $where_flag;
    $params['brand_classification'] = $brand_classification['brand_classification'];
   // $params['where_search']         = $where_search;
    $params['categories']           = $categories;
    $params['responseType']         = $responseType;
    $params['network_code']         = addslashes(urldecode($network_code));
    $params['network_id']           = $network_id;
    $params['export_order_by']      = $export_order_by;
    $params['new_filter_opt']       = $new_filter_opt;
    $params['refine_filter_opt']    = $refine_filter_opt;
    $params['refine_filter_opt_text']  = $refine_filter_opt_text;
    $params['refine_apply_filter']   = $refine_apply_filter;
    $params['program_ids']           = $program_ids;
    $programs                        = isset($requestData['programs']) ? $requestData['programs'] : array();
    $params['apply_filter_called']   = $apply_filter_called = isset($requestData['apply_filter_called']) ? $requestData['apply_filter_called'] : 0;
    $params['applied_ids']              = isset($requestData['applied_ids']) && $requestData['applied_ids']!= '' ? urldecode($requestData['applied_ids']) : '';
    if(!isset($requestData['primary_tab'])) {
        if($requestData['type'] == 1) {
            $requestData['primary_tab'] = 'brand';
        } else {
            $requestData['primary_tab'] = 'advertiser';
        }
    }
    // $requestData['primary_tab']      = isset($requestData['primary_tab']) ? $requestData['primary_tab'] : ($requestData['type'] == 1) ? 'brand' : 'advertiser';

    if ($tab == 0) {
        $advOrBrandId               = 'adv.adv_id';
        $params['advOrBrandId']     = $advOrBrandId;
        $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND adv.adv_id IN ('.$params['applied_ids'] .')' : '';
        $brand_or_adv_id = $advOrBrandId == 'adv.adv_id' ? 'adv_id' : 'brand_id';
        $sql = 'create temporary table temptable_creative('.$brand_or_adv_id.' int, count bigint);';
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result               = get_query_result('__query_summary_ranking_report', $params, 'FETCH_OBJ');
        // $result                     = processAdvRankingForCategory($result, $brand_result);
    } else  {
        if($requestData['primary_tab'] == 'advertiser') {
            $fetch_brands =  get_query_result('__query_get_brands_for_adv', $params, 'FETCH_OBJ');
            $params['applied_ids'] = $fetch_brands[0]->brand_ids;
        }
        $params['list_id_condition']     = $params['applied_ids'] != '' ? ' AND b.brand_id IN ('.$params['applied_ids'] .')' : '';
        $advOrBrandId = $tab == 1 ? 'b.brand_id' : 'adv.adv_id';
        $brand_or_adv_id = $advOrBrandId == 'adv.adv_id' ? 'adv_id' : 'brand_id';
        $sql = 'create temporary table temptable_creative('.$brand_or_adv_id.' int, count bigint);';
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result  = get_query_result('__query_summary_ranking_report', $params, 'FETCH_OBJ');
    }
    $sql = 'drop temporary table temptable_creative;';
    $stmt = $db->prepare($sql);
    $stmt->execute();

    $result = reorderResultForRanking ($result);
    
    $totalData = count($result);
    $totalFiltered = $totalData;
    $count = $totalData;

    /*if($search != ''){
        addEntryToSearchLog($tab,$search,$_SESSION['user_id'],$count);
    }*/
    $all_programs = $program_brand  = $setUniqueAllPrograms = $checkedPrograms = array();
    $program_id_array = explode(",",$program_ids);
    if($result){         
      foreach($result as $k => $v){
        if(isset($v->programs)) {
            $program_brand = explode("|",$v->programs);
            foreach($program_brand as $key => $value) {
                $program_ids = explode("===",$value);
                $all_programs[$program_ids[1]] = $program_ids[0].'***'.$v->network_id;;
            }
            $setAllPrograms = array_unique($all_programs);
        }
        foreach($setAllPrograms as $key => $value) {
            $arr = explode('***',$value);
            $newArrayPrograms[$key]['network_id'] = $arr[1];
            $newArrayPrograms[$key]['program']    = $arr[0];
            $newArrayPrograms[$key]['isSelected']  = true;
            if($apply_filter_called != 1) {
                array_push($checkedPrograms, $arr[0]);
            }
            if(empty($params['program_ids'])) {
                array_push($checkedPrograms, $arr[0]);
            }
        }
        if($v->asd != ''){
            $v->asd = $v->asd.' sec';
        }

        if($c >= 6){
           $v->national = 'NA';
           $v->local = 'NA';
           $v->asd = 'NA';
        }
      }
    }
    if($apply_filter_called == 1) {
        if(!empty($programs) && $programs != 'false') {
            foreach($programs as $key => $value) {
                foreach($value as $k => $v) {
                    if(in_array($k,$program_id_array)){
                        array_push($checkedPrograms, $v['program']);
                    }
                }
            }
        }
      
    }
    uasort($newArrayPrograms, "cmp");
    $checkedPrograms = array_unique($checkedPrograms);
    sort($checkedPrograms);
    $exp_data = array();
    if($tab == 1){
        $records_brand_ids      = array();
        $records_advertiser_ids = array();
        $rank = $spend_index = 0;

        foreach($result as $resultK => $resultV){
            if($rank==0) { $spend_index = $resultV->spend_index; $_SESSION['max_spend'] = $resultV->spend_index; }
            $spendIndexCalculate['projected_score'] = $resultV->spend_index;
            $spendIndexCalculate['classification']  = $c;
            $spendIndexCalculate['sum']             = $_SESSION['max_spend'] ;
            $resultV->spend_index                   = findSpendIndex($spendIndexCalculate);
            $resultV->spend_index_export            = findSpendIndex($spendIndexCalculate, 0);
            $resultV->networks                      = $resultV->networks ? $resultV->networks : 0;
            $excel_access = '<a id="export_loader_'.$resultV->ID.'" class="export-anchor" custom-onclick=exportResults('.$resultV->ID.',"'.$c.'",'.$tab.',"'.$val.'","'.$sd.'","'.$ed.'","'.$spanish.'","network"); onclick=exportResults('.$resultV->ID.',"'.$c.'",'.$tab.',"'.$val.'","'.$sd.'","'.$ed.'","'.$spanish.'","network");><img class="export-icon" src="/drmetrix/assets/img/export.png"></a>';

           /* if($user_access_type[0]['access_type'] == 'P' 
                && ($media_col == 'media_month' || $media_col == 'media_qtr' || $media_col == 'media_year' )){
                $excel_access = '<a id="export_loader_'.$resultV->ID.'" class="export-anchor"  ezmodal-target="#nobuttonsModal"><img class="export-icon" src="/drmetrix/assets/img/export.png"></a>';
            }*/
            $nestedData = $export = array();           
            $active_class = ($resultV->is_active_brand == 1) ? 'active_btn' : 'inactive_btn';
            $url_brand = "/drmetrix/brandDetail/".$resultV->ID."/brand/browse//";
            $url_adv = "/drmetrix/advDetail/".$resultV->adv_id."/adv/browse/";
            $nestedData['brand_name_search'] = $resultV->brand_name;
            //$export['brand_name_search']  = $resultV->brand_name;
            $nestedData['id']       = $nestedData['brand_id'] = $resultV->ID;
            $nestedData['adv_id']   = $resultV->adv_id;
            //$export['id']  = $resultV->ID;
            $nestedData['rank'] = ++$rank;
            $export['current_week']  = $nestedData['rank'];
            $nestedData['brand_name'] = $resultV->brand_name;
            $export['brand_name'] = $resultV->brand_name;
            $nestedData['creative_count'] = $resultV->creative_count ?  : 0;
            $export['creative_count'] = $resultV->creative_count ?  $resultV->creative_count : 0;
            $nestedData['is_active_brand'] = $resultV->is_active_brand ;
            $export['is_active_brand'] = $resultV->is_active_brand ;
            if(isset($resultV->main_sub_category_id)) {
                $resultV->category = get_category_names_by_ids($resultV->main_sub_category_id, $resultV->alt_sub_category_id);
            } else {
                $resultV->category = get_category_names_by_ids($resultV->alt_sub_category_id, $resultV->main_sub_category_id);
            }
            $string = $resultV->category;
            if(strlen($resultV->category) > STRING_LENGTH){
                $string = substr($resultV->category, 0, 23).'...';
            }
          // $nestedData['category_name'] = isset($resultV->category) ? '<i class="fa fa-caret-down float-right" style="color: #666665;"></i><a href="#" onclick="fetchList('.$resultV->ID.','.$tab.',\''.addslashes($resultV->category).'\');">'. $resultV->category.'</a><div class="cat_col_dropdown select" id="cat_col_dropdown_'.$resultV->ID.'" style="display:none;"></div>' :  '-' ;
            $nestedData['category_name'] = $resultV->category;
            $export['category']  = isset($resultV->category) ? $resultV->category : '-';
            //$nestedData['category_name'] = isset($resultV->category) ? $resultV->category :  '-' ;
            //$nestedData['advertiser_name'] = !empty($resultV->advertiser_name) ? '<span>'.$resultV->advertiser_name.'</span>' : '-' ;
            $nestedData['advertiser_name'] = $resultV->advertiser_name;
            $export['advertiser_name']  = !empty($resultV->advertiser_name) ? $resultV->advertiser_name : '-' ;
            $nestedData['hidden_creatives'] = $resultV->creative_count;
            $nestedData['hidden_category'] = $resultV->category;
            $nestedData['hidden_airings'] = $resultV->airings;
            $nestedData['brand_name_hidden'] = !empty($resultV->brand_name) ? $resultV->brand_name : '-' ;
            
            $nestedData['airings'] = $resultV->airings;
            $export['airings'] = $resultV->airings ? $resultV->airings : 0;

            $nestedData['hidden_spend_index'] = $resultV->spend_index_export ? : 0;

            // if($c > 5) {
            //     $nestedData['spend_index'] = $resultV->spend_index ? : 0;
            // }else {
                $nestedData['spend_index'] = $resultV->spend_index;
           // }
         
            $export['spend_index'] = $resultV->spend_index_export ? $resultV->spend_index_export : 0 ;
           // $nestedData['spend_index'] = $resultV->spend_index ? $resultV->spend_index : 0 ;
            $nestedData['national'] = $resultV->national ? $resultV->national : 0; 
            $nestedData['local'] = $resultV->local  ? $resultV->local : 0;
            $nestedData['asd'] = $resultV->asd ? $resultV->asd : '0 sec' ;
            $nestedData['total_weeks'] = $resultV->total_weeks ? $resultV->total_weeks : 0 ;
          
            if($active_col === 'short_active'){
                $export['national'] = $resultV->national ? $resultV->national : 0; 
                $export['local'] = $resultV->local  ? $resultV->local : 0;
                $export['asd'] = $resultV->asd ? $resultV->asd : '0 sec' ;
            }
            $export['total_weeks'] = $resultV->total_weeks ? $resultV->total_weeks : 0 ;
            $nestedData['networks'] = $resultV->networks ? $resultV->networks : '-' ;
            //$nestedData['tracking'] = $resultV->tracking_status == 'active' ? '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->ID.');"><i class="fa fa-eye blue-eye" title="Track"></i></a>' : '<i class="fa fa-eye-slash grey-eye" aria-hidden="true"></i>';
            if(isTrackingPresent('brand', $resultV->ID)) {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->ID.',\''.addslashes($resultV->brand_name).'\');"><i custom-attr="brand_'.$resultV->ID.'" class="fa fa-eye blue-eye" title="Track"></i></a>';
            } else {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->ID.',\''.addslashes($resultV->brand_name).'\');"><i custom-attr="brand_'.$resultV->ID.'" class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
            }

            array_push($records_brand_ids,$nestedData['id']);
            array_push($records_advertiser_ids,$nestedData['adv_id']);
            $data[] = $nestedData;
            $exp_data[] = $export;
        }
    }else{  
        $records_brand_ids            = array();
        $records_advertiser_ids       = array();
        $rank = $spend_index = 0;
        foreach($result as $resultK => $resultV){
            if($rank==0) { $spend_index = $resultV->spend_index;  $_SESSION['max_spend'] = $resultV->spend_index;}
            $spendIndexCalculate['projected_score'] = $resultV->spend_index;
            $spendIndexCalculate['classification']  = $c;
            $spendIndexCalculate['sum']             = $_SESSION['max_spend'] ;
            $resultV->spend_index                   = findSpendIndex($spendIndexCalculate);
            $resultV->spend_index_export            = findSpendIndex($spendIndexCalculate, 0);
            $nestedData=array();     
            $active_class = ($resultV->is_active_adv == 1) ? 'active_btn' : 'inactive_btn';
            $url_adv = "/drmetrix/advDetail/".$resultV->adv_id."/adv/browse/";
            $nestedData['id']       = $nestedData['adv_id'] = $resultV->ID;
            $nestedData['brand_id'] = $resultV->brand_id;
            //$nestedData['rank'] = $resultV->current_week;
            $nestedData['rank'] = ++$rank;
            $export['current_week']  = $nestedData['rank'];
            //$nestedData['advertiser_name'] = !empty($resultV->advertiser_name) ? '<i class="fa fa-circle" id="'.$active_class.'"></i><span>'.$resultV->advertiser_name.'</span>' : '-' ;
            $nestedData['advertiser_name'] = $resultV->advertiser_name;
            $nestedData['advertiser_name_hidden'] = !empty($resultV->advertiser_name) ? $resultV->advertiser_name : '-' ;
            $export['advertiser_name']  = !empty($resultV->advertiser_name) ? $resultV->advertiser_name : '-';
            $nestedData['adv_name_search'] = $resultV->advertiser_name;
            $nestedData['no_of_brands'] = !empty($resultV->no_of_brands) ? '<a href="#"><span id="adv_plus_'.$resultV->ID.'" class="toggle-icon-plus"><span class="icon-border icon-border-plus"></span></span></a><a href="#"  ><span class="toggle-icon-minus" id="adv_minus_'.$resultV->ID.'"><span class="icon-border icon-border-minus"></span></span></a><span>'.$resultV->no_of_brands.'</span>' : 0 ;
            $export['no_of_brands']  = !empty($resultV->no_of_brands) ? $resultV->no_of_brands : 0;
            $nestedData['is_active_adv'] = $resultV->is_active_adv ;
            $export['is_active_adv'] = $resultV->is_active_adv ;
            $nestedData['airings'] = $resultV->airings ? number_format($resultV->airings) : 0 ;
            $export['airings']  = $resultV->airings ? $resultV->airings : 0 ;
            $nestedData['hidden_brand'] = $resultV->no_of_brands;
            $nestedData['hidden_airings'] = $resultV->airings ;
            $nestedData['spend_index'] = $resultV->spend_index ? $resultV->spend_index : 0 ;
            $export['spend_index']  = $resultV->spend_index_export ? $resultV->spend_index_export : 0 ;
            $nestedData['national'] = $resultV->national ? $resultV->national : 0; 
            $nestedData['local'] = $resultV->local ? $resultV->local : 0; 
            $nestedData['asd'] = $resultV->asd ? $resultV->asd : '0 sec' ;
            $nestedData['total_weeks'] = $resultV->total_weeks ? $resultV->total_weeks : '-' ;
            if($active_col === 'short_active'){
                $export['national'] = $resultV->national ? $resultV->national : 0; 
                $export['local'] = $resultV->local ? $resultV->local : 0; 
                $export['asd'] = $resultV->asd ? $resultV->asd : '0 sec' ;
            }
            $export['total_weeks'] = $resultV->total_weeks ? $resultV->total_weeks : '-' ;
            $nestedData['networks'] = $resultV->networks ? '<span> '.$resultV->networks.'</span>' : 0 ;
            $nestedData['need_help'] = $resultV->need_help;

            if(isTrackingPresent('advertiser', $resultV->ID)) {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'advertiser\','.$resultV->ID.',\''.addslashes($resultV->advertiser_name).'\');"><i custom-attr="advertiser_'.$resultV->ID.'" class="fa fa-eye blue-eye" title="Track"></i></a>';
            } else {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'advertiser\','.$resultV->ID.',\''.addslashes($resultV->advertiser_name).'\');"><i custom-attr="advertiser_'.$resultV->ID.'" class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
            }
            array_push($records_brand_ids,$nestedData['brand_id']);
            array_push($records_advertiser_ids,$nestedData['id']);
            $data[] = $nestedData;
            $exp_data[] = $export;
        }
    }
   
    if($refine_apply_filter == 0 ) {
        $_SESSION['records_brand_ids']      = $records_brand_ids;
        $_SESSION['records_advertiser_ids'] = $records_advertiser_ids;
    }
  
    $session_apply_filter = $_SESSION['apply_filter_data'];
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['records']   = $count;
    $json_data['spend_index']= $spend_index;
    $json_data['programs']   = createSortableArrayForJquery($newArrayPrograms);
    $json_data['checkedPrograms'] = $checkedPrograms;
    $json_data['exp_data']  = $exp_data;
    $json_data['session_apply_filter'] = $session_apply_filter;
    $_SESSION['export']['rows']     = $exp_data;
    return $json_data;
    
}

function createSortableArrayForJquery($newArrayPrograms) {
    $newNewArray = [];
    $index = 0;
    foreach($newArrayPrograms as $key => $value) {
            $newNewArray[$index][$key] = $value;
            $index++;
       
    }  
    return $newNewArray;
}

function getProgramsOfNetwork() {
    $db = getConnection();
    $requestData = $raw_data = array();
    $all_programs = $program_brand  = $setAllPrograms = $newArrayPrograms = $checkedPrograms = array();
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);

    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $params = createParamsForGraph($requestData);

    $program_id_array  = explode(",",$params['program_ids']);
    $result            = get_query_result('__query_programs', $params, 'FETCH_OBJ');
    if($result){
      foreach($result as $k => $v){
            if(isset($v->programs)) {
                $program_brand = explode("|",$v->programs);
                foreach($program_brand as $key => $value) {
                    $program_ids = explode("===",$value);
                    $all_programs[$program_ids[1]] = $program_ids[0].'***'.$v->network_id;
                }
                $setAllPrograms = array_unique($all_programs);
            }
        }
        foreach($setAllPrograms as $key => $value) {
            $arr = explode('***',$value);
            $newArrayPrograms[$key]['network_id'] = $arr[1];
            $newArrayPrograms[$key]['program']    = $arr[0];
            // if(in_array($key,$program_id_array)) {
                array_push($checkedPrograms, $arr[0]);
            // }
        }
        uasort($newArrayPrograms, "cmp");
        $checkedPrograms = array_unique($checkedPrograms);
        sort($checkedPrograms);
    }
   $json_data['programs']           = createSortableArrayForJquery($newArrayPrograms);
   $json_data['checkedPrograms']    = $checkedPrograms;
   echo json_encode($json_data);
}

function getLifetimeYear($calender_result){
    foreach($calender_result as $y1 => $y2 ){
        $year_in[] = $y2->media_year;
    }
    $year_in = array_unique($year_in);
    
    $year_in = "'" . implode("','", $year_in) . "'";
    return  $year_in;    
}

//total airing for a brand
function totalAiringsBrand($sd,$ed,$brand_id){
    $db = getConnection();
    $sql = "SELECT b.brand_id as ID,count(a.creative_id) no_of_airings FROM airings a, brand b, creative c WHERE a.creative_id = c.creative_id and b.brand_id = c.brand_id AND a.end BETWEEN '".$sd." 00:00:00' AND '".$ed." 00:00:00' AND a.length <= 120 AND c.class != 'BRAND' AND b.brand_id = '".$brand_id."';";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    return $result[0]['no_of_airings'];
   /* $stmt = $db->prepare($sql);
    if ($stmt->execute()) {
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $result[0]['no_of_airings'];
    }*/
}
//total airing for a brand with date as new creative date
function totalAiringsNewBrand($sd,$ed,$brand_id){
    $db = getConnection();
    $sql = "SELECT b.brand_id as ID,count(a.creative_id) no_of_airings FROM airings a, brand b, creative c WHERE a.creative_id = c.creative_id and b.brand_id = c.brand_id AND b.first_detection BETWEEN '".$sd." 00:00:00' AND '".$ed." 00:00:00' AND a.length <= 120 AND c.class != 'BRAND' AND b.brand_id = '".$brand_id."';";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    return $result[0]['no_of_airings'];
    /*$stmt = $db->prepare($sql);
    if ($stmt->execute()) {
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $result[0]['no_of_airings'];
    }*/
}
   
//total airing for a brand with date as new creative date
function totalAiringsNewCreative($sd,$ed,$brand_id){
    $db = getConnection();
    $sql = "SELECT b.brand_id as ID,count(a.creative_id) no_of_airings FROM airings a, brand b, creative c WHERE a.creative_id = c.creative_id and b.brand_id = c.brand_id AND c.last_aired BETWEEN '".$sd." 00:00:00' AND '".$ed." 00:00:00' AND a.length <= 120 AND c.class != 'BRAND' AND b.brand_id = '".$brand_id."';";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    return $result[0]['no_of_airings'];
    /*$stmt = $db->prepare($sql);
    if ($stmt->execute()) {
        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
        return $result[0]['no_of_airings'];
    }*/
}
 
//total airing for a adv
function totalAiringsAdvertise($sd,$ed,$adv_id){
    $db = getConnection();
    $sql = "SELECT b.adv_id as ID,count(a.creative_id) no_of_airings FROM airings a, brand b, creative c WHERE a.creative_id = c.creative_id and b.brand_id = c.brand_id AND a.end BETWEEN '".$sd." 00:00:00' AND '".$ed." 00:00:00' AND a.length <= 120 AND c.class != 'BRAND' AND b.adv_id = '".$adv_id."';";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    return $result[0]['no_of_airings'];
    /*$stmt = $db->prepare($sql);
    if ($stmt->execute()) {
         $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
         return $result[0]['no_of_airings'];
    }*/
}


function retrieveRecords($tab,$sd,$ed,$cat){
    $result = $result_fields = '';
    $fields1 = ',r.brand_name,r.brand_id';
    $fields2 = ',rl.brand_name,rl.brand_id';
   
    //all short forms- it contains all brand classification except long form products
     $type1 = 'AND r.asd <= 120  AND c.class != "BRAND" AND c.type="Product"';
     $table1 = ($tab == 1) ? 'report_brand_short_form r , creative c': 'report_adv_short_form r , creative c';
     $where1 = ($tab == 1) ? 'r.brand_id = c.brand_id AND  r.to_date BETWEEN "'.$sd.'" AND "'.$ed.'"' : 'r.to_date BETWEEN "'.$sd.'" AND "'.$ed.'"';
     $group1 = ($tab == 1) ? 'GROUP BY r.brand_id': 'GROUP BY r.adv_id';
     $cols1 = ($tab == 1) ? $fields1 : '';
     
    $select_sql1 = "SELECT r.current_week,r.advertiser_name,r.total_airings,r.spend_index,r.asd,r.network,r.adv_id".$cols1."  FROM ".$table1." WHERE ".$where1." ".$type1. " ". $group1." ";
    
     
     //all long forms
     $type2 = 'AND rl.asd > 120 AND c.class = "DR" AND c.type="Product"';
     $table2 = ($tab == 1) ? 'report_brand_long_form rl , creative c': 'report_adv_long_form rl , creative c';
     $where2 = ($tab == 1) ? 'c.brand_id = rl.brand_id AND rl.to_date BETWEEN "'.$sd.'" AND "'.$ed.'"': 'rl.to_date BETWEEN "'.$sd.'" AND "'.$ed.'"';
     $group2 = ($tab == 1) ? 'GROUP BY rl.brand_id': 'GROUP BY rl.adv_id';
     $cols2 = ($tab == 1) ? $fields2 : '';
    
     if(!empty($cat)){
        $table1 .= ',category cat';
        $table2 .= ',category cat';
        $where1 .= ($tab == 1) ? ' AND cat.brand_id = r.brand_id AND cat.category_id IN '.$catIn : ' AND cat.brand_id = c.brand_id AND cat.category_id IN '.$catIn;
        $where2 .= ($tab == 1) ? ' AND cat.brand_id = r.brand_id AND cat.category_id IN '.$catIn : ' AND cat.brand_id = c.brand_id AND cat.category_id IN '.$catIn;
    }
    
    $select_sql2 = "SELECT rl.current_week,rl.advertiser_name,rl.total_airings,rl.spend_index,rl.asd,rl.network,rl.adv_id".$cols2." FROM ".$table2." WHERE ".$where2." ".$type2. " ". $group2;
     
    $selectCols = ($tab == 1) ? 'LEFT(s.brand_name,8) as short_brand_name,LEFT(s.advertiser_name,8) as short_advertiser_name,': 'LEFT(s.advertiser_name,8) as short_advertiser_name,';
     
    $select_sql = "SELECT ".$selectCols." s.*  FROM (".$select_sql1 ." UNION ".$select_sql2.")s ORDER BY s.spend_index DESC";
    
     try{
            $db = getConnection();
            $stmt = $db->prepare($select_sql);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);
            $where = ($tab == 1) ? ' r.brand_id':' r.adv_id';
            foreach($result as $key=>$value){
                if($value->asd <=120){
                    $sql = "SELECT national_total_airings,local_total_airings FROM ".$table1. " WHERE c.class != 'BRAND' AND ".$where."=".$value->brand_id." ".$group1;
                    $result_fields = execute_query_get_result($sql, 'FETCH_OBJ');
                    /*$stmt = $db->prepare($sql);
                    $stmt->execute();
                    $result_fields = $stmt->fetchAll(PDO::FETCH_OBJ);*/
                    if(!empty($result_fields)){
                        $value->national_total_airings = $result_fields[0]->national_total_airings;
                        $value->local_total_airings = $result_fields[0]->local_total_airings;
                    }else{
                        $value->national_total_airings = '-';
                        $value->local_total_airings = '-';
                    }
                }
            }
           return $result;
    } catch (Exception $ex) {
            return $result;
    }
}
 
function getNewCreatives($sd,$ed,$tab,$categories,$crtype,$restype,$cables){
    $condition = array();
    $cond = "";
    $joins = "";
    $flag = 0;
    
    $result=array();
    $brand_array = array();
    
    if(isset($categories)){
        $cat = rtrim($categories,",");
        $cat = rtrim($cat,"all,");
        $catIn = '('.$cat.')';
    }
   
    if (($key = array_search('all', $restype)) !== false) {
        unset($restype[$key]);
        $flag = 1;
    }
    
    $pos = strpos($categories, 'all'); 
    if ($pos !== false) {
        $catflag = 1;
    }
    
   if(isset($crtype)){
        if($crtype == 'Short-Form'){
           $cond  .= ' AND ar.length <= 120 ';
        }elseif($crtype == 'Long-Form') {
           $cond .= ' AND ar.length > 120 ';
        }
    }
    
    if((!empty($cat)) && !$catflag){
        $joins = 'INNER JOIN category ca ON ca.brand_id=br.brand_id';
        $cond  .= " AND  ca.category_id IN ".$catIn;
    }
    
   
    if(!empty($condition)){
        $cond = implode(" AND ",$condition);
    }
    
    if(isset($restype) && $flag!= 1){
        $resTemp = array();
        $cond .= " AND (";
        foreach($restype as $val){
            $resTemp[] = "ar.".$val." !='' ";
            $responseTypeCond[] = " ar.".$val." !=''";
            $cond .= " ar.".$val." !='' OR ";
        }
        $cond .= " 1 = 0)";
    }
    
    
    if($flag){
         $cond .= " AND ( ar.tfn !='' OR ar.url !='' OR ar.short_code !='' OR ar.app_name !='')";
    }
     
        //get total airings,price and other details

         $sql = "SELECT ar.length,LEFT(br.brand_name,15) as short_brand_name,br.brand_name,br.brand_id,cr.thumbnail,LEFT(cr.creative_name,15) as short_creative_name,"
             . "count( DISTINCT (ar.network_code)) as network,DATE_FORMAT(cr.first_detection,'%m/%d/%Y') as detected_on,sum(ar.length) as asd,"
             . "cr.creative_name,cr.creative_id,SUM(ar.".RATE_COLUMN.") as price,cr.payments,SUM(cr.ship) as ship,count(ar.creative_id) total_airings"
             . ", cr.price as creative_price FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id 
                INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE cr.first_detection >= '".$sd." 00:00:00' AND cr.first_detection <= '".$ed." 00:00:00' ".$cond." AND cr.class != 'BRAND' GROUP BY cr.creative_id ORDER BY cr.first_detection ASC";
    
        $db = getConnection();  
        $result = execute_query_get_result($sql, 'FETCH_OBJ');      
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
       
        if(!empty($result)){
             $no_of_airings = '';
            foreach($result as $k => $v){ 
                $v->price = number_format((float)$v->price, 2, '.',',');
                $duration = round($v->asd/$v->total_airings);
                $v->duration = $duration;
                
                
                if($v->creative_price == NULL || $v->creative_price == ''){
                    $v->creative_price = 'Lead Generation';
                }
                else if($v->payments == 'Infinite'){
                    $v->creative_price  = $v->creative_price;
                }else{
                    $v->creative_price = $v->payments.' of $'. $v->creative_price;
                }
                
                //find advertiser
                $select_adv = "SELECT b.adv_id,a.company_name,LEFT(a.company_name,15) as short_advertiser_name FROM brand b INNER JOIN advertiser a ON b.adv_id = a.adv_id AND b.brand_id = '".$v->brand_id."'";
                $stmt = $db->prepare($select_adv);
                $stmt->execute();
                $adv_result = $stmt->fetchAll(PDO::FETCH_OBJ);

                if(!empty($adv_result)) {
                    $v->advertiser_name = $adv_result[0]->company_name;
                    $v->short_advertiser_name = $adv_result[0]->short_advertiser_name;
                    $v->adv_id = $adv_result[0]->adv_id;
                }else{
                    $v->advertiser_name = '-';
                    $v->short_advertiser_name = '-';
                    $v->adv_id = '-';
                }
                
                //find national and local
                if($crtype != 'Long_Form'){
                   $last_week['sd'] = $sd;
                   $last_week['ed'] = $ed;
                   $no_of_airings = "  a.breaktype='N' AND";
                    if($v->length <=120){
                        array_push($brand_array,$v->brand_id);
                  }
                }
            }
            
             $brand_ids = implode(",",$brand_array);

           if($brand_ids!='') {
                $sql = "SELECT ar.length,count(ar.creative_id) as total_airings ,b.brand_id FROM brand b 
                INNER JOIN creative c ON c.brand_id = b.brand_id 
                INNER JOIN airings ar ON ar.creative_id = c.creative_id ".$joins."
                WHERE b.brand_id IN (".$brand_ids.") AND ar.breaktype = 'N' AND ar.length <= 120 AND c.first_detection >= '".$sd." 00:00:00' AND  c.first_detection  <'".$ed." 00:00:00' ".$cond ." AND c.class != 'BRAND' GROUP BY c.creative_id";

                $r = execute_query_get_result($sql, 'FETCH_OBJ');
                 /*$stmt = $db->prepare($sql);
                 $stmt->execute();
                 $r = $stmt->fetchAll(PDO::FETCH_OBJ);*/

                 $totalAirings = array();
                $sql = "SELECT b.brand_id,count(a.creative_id) no_of_airings FROM brand b INNER JOIN creative c ON b.brand_id = c.brand_id INNER JOIN airings a ON  a.creative_id = c.creative_id WHERE b.brand_id IN (".$brand_ids.") AND  a.length <= 120 AND b.first_detection >= '".$sd." 00:00:00' AND b.first_detection <= '".$ed." 00:00:00' AND c.class != 'BRAND' GROUP BY b.brand_id;";
                $totalAirings = execute_query_get_result($sql, 'FETCH_OBJ');
                 /*$stmt = $db->prepare($sql);
                 $stmt->execute();
                 $totalAirings = $stmt->fetchAll(PDO::FETCH_OBJ);*/
           }
           
            if(!empty($totalAirings)){
                foreach($totalAirings as $a1=>$a2){
                    foreach($r as $k1 => $v1){
                        if($a2->brand_id == $v1->brand_id){
                            $v1->totalAirings = $a2->no_of_airings;
                        }
                    }
                }
            }
        
            if(!empty($result) && !empty($r)){
                foreach($result as $key => $value){
                    foreach($r as $k2 => $v2){
                        if($value->brand_id == $v2->brand_id){
                            if(isset($v2->totalAirings)  && $v2->totalAirings!=0 && (!empty($r))){
                                $percent = ($v2->total_airings*100)/$v2->totalAirings;
                                $local = $value->national_total_airings = round($percent,2);
                                $value->local_total_airings = round((100 - $local),2);
                            }else{
                                $value->national_total_airings = '-';
                                $value->local_total_airings = '-';
                            }  
                        }
                    }
                }
            }
            
            if(!empty($result)){
                foreach($result as $key => $value){
                    if(!isset($value->national_total_airings)){
                         $value->national_total_airings = 'NA';
                         $value->local_total_airings = 'NA';
                    }
                }
            }
        }
       return $result;
}
    

//New campaign new brand section

function getNewBrands1($sd,$ed,$tab,$categories,$crtype,$restype,$cables,$col,$direction){
    $condition = array();
    $cond = "";
    $joins = "";
    $col ='';$direction='';
    $flag = 0;
    $catflag = 0;
    $brand_array = array();
   
    if(isset($categories)){
        $cat = rtrim($categories,",");
        $cat = rtrim($cat,"all,");
        $catIn = '('.$cat.')';
    }
   
    if (($key = array_search('all', $restype)) !== false) {
        unset($restype[$key]);
        $flag = 1;
    }
   
    $pos = strpos($categories, 'all'); 
    if ($pos !== false) {
        $catflag = 1;
    }
    
    if(isset($crtype)){
        if($crtype == 'Short-Form'){
           $cond  .= ' AND ar.length <= 120 ';
        }elseif($crtype == 'Long-Form') {
           $cond .= ' AND ar.length > 120 ';
        }
    }
    
    if((!empty($cat)) && !$catflag){
        $joins = 'INNER JOIN category ca ON ca.brand_id=br.brand_id';
        $cond  .= " AND  ca.category_id IN ".$catIn;
    }
   
    if(!empty($condition)){
        $cond .= implode(" AND ",$condition);
    }
    
    
    
    if(isset($restype) && $flag!= 1){
        $resTemp = array();
        foreach($restype as $val){
            $resTemp[] = "ar.".$val." !='' ";
            $responseTypeCond[] = " ar.".$val." !=''";
            $cond .= " OR ar.".$val." !=''";
        }
    }
  
    if($flag){
         $cond .= " AND (ar.tfn !='' OR ar.url !='' OR ar.short_code !='' OR ar.app_name !='')";
    }
    
    
    if(!empty($col)){ $orderBy = $cols[$col]; }else{$orderBy = 'br.first_detection';}
    if(empty($direction)){$direction = 'ASC';}
    
        //get total airings,price and other details
   $sql = "SELECT ar.length,LEFT(br.brand_name,15) as short_brand_name,br.brand_name,br.brand_id,cr.thumbnail,LEFT(cr.creative_name,15) as short_creative_name,"
             . "DATE_FORMAT(br.first_detection,'%m/%d/%Y') as detected_on,sum(ar.length) as duration,cr.payments,ar.length,"
             . "cr.creative_name,cr.creative_id,SUM(ar.".RATE_COLUMN.") as price,SUM(cr.ship) as ship,count(ar.creative_id) total_airings"
             . ", cr.price as creative_price FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id 
                INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE br.first_detection >= '".$sd." 00:00:00' AND  br.first_detection <= '".$ed." 00:00:00' ".$cond." AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER by ".$orderBy." ".$direction;
  
        $db = getConnection();  
        $result = execute_query_get_result($sql, 'FETCH_OBJ');      
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ)*/;
      
        if(!empty($result)){
              $no_of_airings = '';
            foreach($result as $k => $v){ 
                $v->price = number_format((float)$v->price, 2, '.',',');
                $v->ship = number_format((float)$v->ship, 2, '.',',');
                
                if($v->creative_price == NULL || $v->creative_price == ''){
                    $v->creative_price = 'Lead Generation';
                }
                else if($v->payments == 'Infinite'){
                    $v->creative_price  = $v->creative_price;
                }else{
                    $v->creative_price = $v->payments.' of $'. $v->creative_price;
                }

                
                //find advertiser
                $select_adv = "SELECT b.adv_id,a.company_name,LEFT(a.company_name,15) as short_advertiser_name FROM brand b INNER JOIN advertiser a ON b.adv_id = a.adv_id AND b.brand_id = '".$v->brand_id."'";
                $stmt = $db->prepare($select_adv);
                $stmt->execute();
                $adv_result = $stmt->fetchAll(PDO::FETCH_OBJ);

                if(!empty($adv_result)) {
                    $v->advertiser_name = $adv_result[0]->company_name;
                    $v->short_advertiser_name = $adv_result[0]->short_advertiser_name;
                    $v->adv_id = $adv_result[0]->adv_id;
                }else{
                    $v->advertiser_name = '-';
                    $v->short_advertiser_name = '-';
                    $v->adv_id = '-';
                }
                
                //find national and local
                if($crtype != 'Long_Form'){
                   $last_week['sd'] = $sd;
                   $last_week['ed'] = $ed;
                   $no_of_airings = "  a.breaktype='N' AND";
                    if($v->length <=120){
                        array_push($brand_array,$v->brand_id);
                  }
                }
            }
            
            $brand_ids = implode(",",$brand_array);

            if($brand_ids!=''){
                $sql = "SELECT ar.length,count(ar.creative_id) as total_airings ,b.brand_id FROM brand b 
                INNER JOIN creative c ON c.brand_id = b.brand_id 
                INNER JOIN airings ar ON ar.creative_id = c.creative_id ".$joins."
                WHERE b.brand_id IN (".$brand_ids.") AND ar.breaktype = 'N' AND ar.length <= 120 AND b.first_detection >= '".$sd." 00:00:00' AND  b.first_detection  <'".$ed." 00:00:00' ".$cond ." AND c.class != 'BRAND' GROUP BY b.brand_id;";
                $r = execute_query_get_result($sql, 'FETCH_OBJ');
                 /*$stmt = $db->prepare($sql);
                 $stmt->execute();
                 $r = $stmt->fetchAll(PDO::FETCH_OBJ)*/;

                 $totalAirings = array();
                $sql = "SELECT b.brand_id,count(a.creative_id) no_of_airings FROM brand b INNER JOIN creative c ON b.brand_id = c.brand_id INNER JOIN airings a ON  a.creative_id = c.creative_id WHERE b.brand_id IN (".$brand_ids.") AND  a.length <= 120 AND b.first_detection >= '".$sd." 00:00:00' AND b.first_detection <= '".$ed." 00:00:00' AND c.class != 'BRAND' GROUP BY b.brand_id;";
                $totalAirings = execute_query_get_result($sql, 'FETCH_OBJ');
                 /*$stmt = $db->prepare($sql);
                 $stmt->execute();
                 $totalAirings = $stmt->fetchAll(PDO::FETCH_OBJ);*/
            }
            if(!empty($totalAirings)){
                foreach($totalAirings as $a1=>$a2){
                    foreach($r as $k1 => $v1){
                        if($a2->brand_id == $v1->brand_id){
                            $v1->totalAirings = $a2->no_of_airings;
                        }
                    }
                }
            }
       
            if(!empty($result) && !empty($r)){
                foreach($result as $key => $value){
                    foreach($r as $k2 => $v2){
                        if($value->brand_id == $v2->brand_id){
                            if(isset($v2->totalAirings)  && $v2->totalAirings!=0 && (!empty($r))){
                                $percent = ($v2->total_airings*100)/$v2->totalAirings;
                                $local = $value->national_total_airings = round($percent,2);
                                $value->local_total_airings = round((100 - $local),2);
                            }else{
                                $value->national_total_airings = '-';
                                $value->local_total_airings = '-';
                            }  
                        }
                    }
                } 
            }
           
            if(!empty($result)){
                foreach($result as $key => $value){
                    if(!isset($value->national_total_airings)){
                         $value->national_total_airings = 'NA';
                         $value->local_total_airings = 'NA';
                    }
                }
            }
        }
        
      return $result;
}


function getNewBrandsInTesting($sd,$ed,$tab,$categories,$crtype,$restype,$cables,$dateType){
    $condition = array();
    $cond = "";
    $joins = "";
    $flag = 0;
    $catflag = $weeksInTesting = 0;
    $lastEd = $lastSd = "";
   
   // $result=array();
    
    if(isset($categories)){
        $cat = rtrim($categories,",");
        $cat = rtrim($cat,"all,");
        $catIn = '('.$cat.')';
    }
   
    if (($key = array_search('all', $restype)) !== false) {
        unset($restype[$key]);
        $flag = 1;
    }
    if (($key = array_search('All', $cables)) !== false) {
        unset($cables[$key]);
        $flag = 1;
    }
    $pos = strpos($categories, 'all'); 
    if ($pos !== false) {
        $catflag = 1;
    }
    
    if(isset($crtype)){
        if($crtype == 'Short-Form'){
           $cond  .= ' AND ar.length <= 120';
        }elseif($crtype == 'Long-Form') {
           $cond .= ' AND ar.length > 120';
        }
    }
    
    if((!empty($cat)) && !$catflag){
        $joins = 'INNER JOIN category ca ON ca.brand_id=br.brand_id';
        $cond  .= " AND  ca.category_id IN ".$catIn;
    }
    
    if(isset($cables) && !empty($cables)){
        $condition[] = " AND ar.network_code IN ('".implode("','",$cables)."')";
    }
    
    if(!empty($condition)){
        $cond .= implode(" AND ",$condition);
    }
    
    if(isset($restype) && $flag!= 1){
        $resTemp = array();
        foreach($restype as $val){
            $resTemp[] = "ar.".$val." !='' ";
            $responseTypeCond[] = " ar.".$val." !=''";
            $cond .= " AND ar.".$val." !=''";
        }
    }
    
    if($flag){
         $cond .= " AND ar.tfn !='' AND ar.url !='' AND ar.short_code !='' AND ar.app_name !=''";
    }
    

        //get highest score for all brands in testing status.
       
       $sql = "SELECT br.brand_id,SUM(ar.".RATE_COLUMN.") as projected_score"
              . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id 
    INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE ar.status='testing' ".$cond." AND  ar.status_date BETWEEN  '".$sd."' AND '".$ed."' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY `projected_score` DESC LIMIT 1;";
      
        $db = getConnection();   
        $highestScore = execute_query_get_result($sql, 'FETCH_OBJ');     
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $highestScore = $stmt->fetchAll(PDO::FETCH_OBJ);*/

        //get total airings,price and other details for brands testing status.
       $sql = "SELECT ar.length,LEFT(br.brand_name,15) as short_brand_name,LEFT(cr.creative_name,15) as short_creative_name,DATE_FORMAT(cr.last_aired,'%m/%d/%Y') as last_aired,br.brand_name,br.brand_id,cr.thumb,LEFT(cr.creative_name,15) as short_creative_name,"
              . "DATE_FORMAT(br.first_detection,'%m/%d/%Y') as detected_on,"
              . "cr.creative_name,cr.creative_id,SUM(ar.".RATE_COLUMN.") as price,count(ar.creative_id) total_airings,ar.status_date"
              . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id  INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE ar.status='testing' ".$cond." AND  ar.status_date BETWEEN  '".$sd."' AND '".$ed."' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY br.brand_name ASC;";
         $db = getConnection();   
         $result = execute_query_get_result($sql, 'FETCH_OBJ');      
         /*$stmt = $db->prepare($sql);
         $stmt->execute();
         $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
         foreach($result as $k => $v){
            if(!empty($highestScore) && $highestScore[0]->projected_score!=''){
                $spendIndex =  round((($v->price * 100)/$highestScore[0]->projected_score),2);
                $v->spend_index = $spendIndex;
            }else{
                $v->spend_index = 0;
            }
            
            //find weeks in testing. We have updated date through crons so we  can find difference between two dates easily.
            if(($v->status_date!=NULL) || ($v->status_date != '0000-00-00 00:00:00')){
                $currentDate = date("Y-m-d h:i:s");
                $datefrom = strtotime($v->status_date, 0);
                $dateto = strtotime($currentDate, 0);
                $difference = $dateto - $datefrom;
                $weeksInTesting = floor($difference / 604800);
            }
            
            $v->weeksInTesting = $weeksInTesting;
             //find advertiser
            $select_adv = "SELECT b.adv_id,a.company_name,LEFT(a.company_name,15) as short_advertiser_name FROM brand b INNER JOIN advertiser a ON b.adv_id = a.adv_id AND b.brand_id = '".$v->brand_id."'";
            $adv_result = execute_query_get_result($select_adv, 'FETCH_OBJ');
            /*$stmt = $db->prepare($select_adv);
            $stmt->execute();
            $adv_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/

            if(!empty($adv_result)) {
                $v->advertiser_name = $adv_result[0]->company_name;
                $v->short_advertiser_name = $adv_result[0]->short_advertiser_name;
                $v->adv_id = $adv_result[0]->adv_id;
            }else{
                $v->advertiser_name = '-';
                $v->short_advertiser_name = '-';
                $v->adv_id = '-';
            }
         }

         //calculate spend trends . If Last media week and custom filter then calculate spend index for last 6 days. If last media month then calculate spend index for last month.

            if($dateType == 0){
                $spendTrend = '0'; //neutral spend index
                $lastEd = strtotime("-6 day", strtotime($ed));
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime("-6 day", strtotime($sd));
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }elseif($dateType == 1 || $dateType == 3){
                $lastEd = strtotime("-6 day", strtotime($ed));
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime("-6 day", strtotime($sd));
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }elseif($dateType == 2){
                $lastEd = strtotime(($ed) .' -1 month');
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime(($sd).' -1 month');
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }

           // if($dateType != 0){
            $spendTrendsResult = calculateSpendTrends($joins,$cond,$lastSd,$lastEd);
  
            foreach($result as $k => $v){
                foreach($spendTrendsResult as $k1 => $v1){
                    if($v->brand_id == $v1->brand_id){
                        if($v->spend_index > $v1->spend_index){
                            $v->spend_trends = '-1'; //decrease in spend index
                            $v->spend_trends_value = $v1->spend_index;
                        }elseif($v->spend_index < $v1->spend_index){
                            $v->spend_trends = '1'; //increase in spend index
                            $v->spend_trends_value = $v1->spend_index;
                        }elseif($v->spend_index == $v1->spend_index){
                            $v->spend_trends = '0'; //neutral spend index
                            $v->spend_trends_value = $v1->spend_index;
                        }
                    }
                }

            }
         return $result; 
}

function calculateSpendTrends($joins,$cond,$lastSd,$lastEd){
     //get highest score for all brands in testing status.
   $sql = "SELECT br.brand_id,SUM(ar.".RATE_COLUMN.") as projected_score"
      . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id 
        INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE ar.status='testing' ".$cond." AND  ar.status_date BETWEEN  '".$lastSd." 00:00:00' AND '".$lastEd." 00:00:00' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY projected_score DESC  LIMIT 1;";
   
    $db = getConnection();    
    $highestScore = execute_query_get_result($sql, 'FETCH_OBJ');    
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $highestScore = $stmt->fetchAll(PDO::FETCH_OBJ);*/
   
     //get total airings,price and other details for brands testing status.
        $sql = "SELECT br.brand_id,SUM(ar.rate) as price"
               . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id  INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE ar.status='testing' ".$cond." AND  ar.end BETWEEN  '".$lastSd." 00:00:00' AND '".$lastEd." 00:00:00' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY br.first_detection DESC";

    $db = getConnection();   
    $result = execute_query_get_result($sql, 'FETCH_OBJ');      
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ)*/;
     foreach($result as $k => $v){
        if(!empty($highestScore) && $highestScore[0]->projected_score!=''){
            $spendIndex =  round((($v->price * 100)/$highestScore[0]->projected_score),2);
            $v->spend_index = $spendIndex;
        }else{
            $v->spend_index = 0;
        }
     }
     
     return $result;
}


function getNewBrandsInRollout($sd,$ed,$tab,$categories,$crtype,$restype,$cables,$dateType){
     $condition = array();
    $cond = "";
    $joins = "";
    $flag = 0;
    $catflag = $weeksInRollout = 0;
    $lastEd = $lastSd = "";
   
    if(isset($categories)){
        $cat = rtrim($categories,",");
        $cat = rtrim($cat,"all,");
        $catIn = '('.$cat.')';
    }
   
    if (($key = array_search('all', $restype)) !== false) {
        unset($restype[$key]);
        $flag = 1;
    }
    
    
    if (($key = array_search('All', $cables)) !== false) {
        unset($cables[$key]);
        $flag = 1;
    }
    
    $pos = strpos($categories, 'all'); 
    if ($pos !== false) {
        $catflag = 1;
    }
    
    if(isset($crtype)){
        if($crtype == 'Short-Form'){
           $cond  .= ' AND ar.length <= 120';
        }elseif($crtype == 'Long-Form') {
           $cond .= ' AND ar.length > 120';
        }
    }
    
    if((!empty($cat)) && !$catflag){
        $joins = 'INNER JOIN category ca ON ca.brand_id=br.brand_id';
        $cond  .= " AND  ca.category_id IN ".$catIn;
    }
    
    if(isset($cables) && !empty($cables)){
        $condition[] = " AND ar.network_code IN ('".implode("','",$cables)."')";
    }
    
    if(!empty($condition)){
        $cond .= implode(" AND ",$condition);
    }
    
    if(isset($restype) && $flag!= 1){
        $resTemp = array();
        foreach($restype as $val){
            $resTemp[] = "ar.".$val." !='' ";
            $responseTypeCond[] = " ar.".$val." !=''";
            $cond .= " AND ar.".$val." !=''";
        }
    }
    
    if($flag){
         $cond .= " AND ar.tfn !='' AND ar.url !='' AND ar.short_code !='' AND ar.app_name !=''";
    }
    

        //get highest score for all brands in testing status.
        $sql = "SELECT br.brand_id,SUM(ar.".RATE_COLUMN.") as projected_score"
              . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id 
                INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins."
                WHERE ar.status='rollout' ".$cond." AND  ar.status_date BETWEEN  '".$sd."' AND '".$ed."' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY `projected_score` DESC LIMIT 1";
        $db = getConnection();   
        $highestScore = execute_query_get_result($sql, 'FETCH_OBJ');    
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $highestScore = $stmt->fetchAll(PDO::FETCH_OBJ);*/

        //get total airings,price and other details for brands testing status.
        $sql = "SELECT ar.length,LEFT(br.brand_name,15) as short_brand_name,LEFT(cr.creative_name,15) as short_creative_name,DATE_FORMAT(cr.last_aired,'%m/%d/%Y') as last_aired,br.brand_name,br.brand_id,cr.thumb,LEFT(cr.creative_name,15) as short_creative_name,"
              . "DATE_FORMAT(br.first_detection,'%m/%d/%Y') as detected_on,"
              . "cr.creative_name,cr.creative_id,SUM(ar.rate) as price,count(ar.creative_id) total_airings,ar.status_date"
              . " FROM brand br INNER JOIN creative cr ON cr.brand_id = br.brand_id  INNER JOIN airings ar ON ar.creative_id = cr.creative_id ".$joins." WHERE ar.status='rollout' ".$cond." AND  ar.status_date BETWEEN  '".$sd."' AND '".$ed."' AND cr.class != 'BRAND' GROUP BY br.brand_id ORDER BY br.brand_name ASC";

         $db = getConnection();       
         $result = execute_query_get_result($sql, 'FETCH_OBJ'); 
         /*$stmt = $db->prepare($sql);
         $stmt->execute();
         $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
         foreach($result as $k => $v){
            if(!empty($highestScore) && $highestScore[0]->projected_score!=''){
                $spendIndex =  round((($v->price * 100)/$highestScore[0]->projected_score),2);
                $v->spend_index = $spendIndex;
            }else{
                $v->spend_index = 0;
            }
            
            //find weeks in testing. We have updated date through crons so we  can find difference between two dates easily.
            if(($v->status_date!=NULL) || ($v->status_date != '0000-00-00 00:00:00')){
                $currentDate = date("Y-m-d h:i:s");
                $datefrom = strtotime($v->status_date, 0);
                $dateto = strtotime($currentDate, 0);
                $difference = $dateto - $datefrom;
                $weeksInRollout = floor($difference / 604800);
            }
            
            $v->weeksInTesting = $weeksInRollout;
             //find advertiser
            $select_adv = "SELECT b.adv_id,a.company_name,LEFT(a.company_name,15) as short_advertiser_name FROM brand b INNER JOIN advertiser a ON b.adv_id = a.adv_id AND b.brand_id = '".$v->brand_id."'";
            $stmt = $db->prepare($select_adv);
            $stmt->execute();
            $adv_result = $stmt->fetchAll(PDO::FETCH_OBJ);

            if(!empty($adv_result)) {
                $v->advertiser_name = $adv_result[0]->company_name;
                $v->short_advertiser_name = $adv_result[0]->short_advertiser_name;
                $v->adv_id = $adv_result[0]->adv_id;
            }else{
                $v->advertiser_name = '-';
                $v->short_advertiser_name = '-';
                $v->adv_id = '-';
            }
         }

         //calculate spend trends . If Last media week and custom filter then calculate spend index for last 6 days. If last media month then calculate spend index for last month.

            if($dateType == 0){
                $spendTrend = '0'; //neutral spend index
                 $lastEd = strtotime("-6 day", strtotime($ed));
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime("-6 day", strtotime($sd));
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }elseif($dateType == 1 || $dateType == 3){
                $lastEd = strtotime("-6 day", strtotime($ed));
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime("-6 day", strtotime($sd));
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }elseif($dateType == 2){
                $lastEd = strtotime(($ed) .' -1 month');
                $lastEd = date('Y-m-d h:i:s',$lastEd);

                $lastSd = strtotime(($sd).' -1 month');
                $lastSd = date('Y-m-d h:i:s',$lastSd);
            }

            //if($dateType != 0){
                $spendTrendsResult = calculateSpendTrends($joins,$cond,$lastSd,$lastEd);
                foreach($result as $k => $v){
                    foreach($spendTrendsResult as $k1 => $v1){
                        if($v->brand_id == $v1->brand_id){
                            if($v->spend_index > $v1->spend_index){
                                $v->spend_trends = '-1'; //decrease in spend index
                                $v->spend_trends_value = $v1->spend_index;
                            }elseif($v->spend_index < $v1->spend_index){
                                $v->spend_trends = '1'; //increase in spend index
                                $v->spend_trends_value = $v1->spend_index;
                            }elseif($v->spend_index == $v1->spend_index){
                                $v->spend_trends = '0'; //neutral spend index
                                $v->spend_trends_value = $v1->spend_index;
                            }
                        }
                    }

                }
         return $result;
}



function ConnectToAuthy($mobile = null, $email = null, $country_code = null){
    
    if(is_null($mobile) && is_null($email)){
        $request = Slim::getInstance()->request();
        $user = json_decode($request->getBody());
        $mobile = str_replace("-","",$user->mobile);
        $country_code = 1;
        $email = '';
        $flag = 0;
    }else{
        $flag = 1;
    }
    
    // create a new cURL resource
    $ch = curl_init();
  // set URL and other appropriate options
    curl_setopt($ch, CURLOPT_URL, "http://".HOST."/drmetrix/api/authy-php-master/Authy.php");
    curl_setopt($ch, CURLOPT_POST, 1);
    $data = array('mobile' => $mobile, 'email' => $email, 'country_code'=>$country_code);
    curl_setopt($ch, CURLOPT_POSTFIELDS,$data );
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $server_output = curl_exec ($ch);
    $authy_id = (explode(":",$server_output));
    $authy_res = array();
    if(isset($authy_id[1])){
        if($flag){
            if(count($authy_id) == 2){
                $authy_res['authy_id'] = $authy_id[1];
            }else{
                $authy_res['error'] = 'Invalid number for selected country code';//$server_output;
            }
            
            return $authy_res;
        }else{
            echo json_encode(array('result'=>$authy_id[1], 'status'=>1,'IP'=>$_SERVER['REMOTE_ADDR']));
        }
        
    }else{
        if($flag){
            return $authy_res;
        }else{
            echo json_encode(array('result'=>"Authy Not Responding.."));
        }
        
    }
    curl_close($ch); 
}

function AddToDb($authy_id = null, $ip = null, $mobile = null){
    if(is_null($authy_id) && is_null($ip) && is_null($mobile)){
        $request = Slim::getInstance()->request();
        $user = json_decode($request->getBody());
        $id =  $user->id;
        $mobile = str_replace("-","",$user->mobile);
        $IP = $user->IP;
        $flag = 0;
    }else{
        $flag = 1;
        $id =  $authy_id;
        $mobile = str_replace("-","",$mobile);
        $IP = $ip;
    }
    

    $start_date = standardDateTimeFormat('Y-m-d H:i:s');
    $end_date = standardDateTimeFormat('Y-m-d H:i:s', strtotime("+30 days"));
    //check whether number and IP is there in database. If exist dont add into db.
    $select_sql = "SELECT * FROM authy_credentials WHERE IP = '".$IP."' AND mobile_number = '".$mobile."'";
     try {
            $db = getConnection();
            $stmt = $db->prepare($select_sql);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);
           
             if((!empty($result))){
                if($flag){
                    return true;
                }else{
                    echo json_encode(array('status'=>0));
                }
             }else{
                $sql = "INSERT INTO authy_credentials (IP,authy_id,mobile_number,start_date,end_date) VALUES ('".$IP."','".$id."','".$mobile."','".$start_date."','".$end_date."')";
                try {
                        $db = getConnection();
                        $stmt = $db->prepare($sql);
                        $stmt->execute();
                        if($flag){
                            return true;
                        }else{
                           echo json_encode(array('status'=>0));
                        }                        
                        $db = null;
                } catch(PDOException $e) {
                        echo '{"error":{"text":'. $e->getMessage() .'}}';
                }
             }
     } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function VerifyAuthy(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    $checkEulaFlag = 1;
    $token = $user->token;
    $id = $user->id;
    $mobile = $user->verify_mobile;
    $user_id = $user->user_id;
  //  $company_id = $user->company_id;
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "http://".HOST."/drmetrix/api/authy-php-master/Authy_verify.php");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS,"token=".$id.'_'.$token);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $server_output = curl_exec ($ch);
    curl_close($ch);
    $pos = strpos($server_output, 'Fatal');
    if($pos <= -1){
        //update last_login
        $sql = "SELECT *, concat(first_name, ' ', last_name) as full_name FROM user WHERE phone_number = :mobile AND user_id = :user_id";
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->bindParam("mobile", $mobile);
        $stmt->bindParam("user_id", $user_id);
        $stmt->execute();
        $user2 = $stmt->fetchAll(PDO::FETCH_OBJ);


        $sql = "UPDATE  user SET last_login = '".standardDateTimeFormat('Y-m-d H:i:s')."', authy_cookie = '".$server_output."' WHERE username = '".$user2[0]->username."' and password = '".$user2[0]->password."' ";
        $stmt = $db->prepare($sql);        
        $stmt->execute();

        setUserLogs($user2);

        if(empty($user2[0]->verify_date) || is_null($user2[0]->verify_date)){
            $sql = "UPDATE  user SET verify_date = '".standardDateTimeFormat('Y-m-d H:i:s')."' WHERE user_id = '".$user2[0]->user_id."'";
            $stmt = $db->prepare($sql);        
            $stmt->execute();
        }

        $db = null;
        $user_name = $user2[0]->username;
        $_SESSION[$user_name]       = 1;
        $_SESSION['user_id']        = $user2[0]->user_id;
        $_SESSION['role']           = $user2[0]->role;
        $_SESSION['loggedin_time']  = time();
        $_SESSION['username']       = $user_name;
        $_SESSION['company_id']     = $user2[0]->company_id;
        $_SESSION['full_name']      = $user2[0]->full_name;
        $_SESSION['assistant_admin']= $user2[0]->assistant_admin;
        $_SESSION['tracking_alert_subscribed'] = $user2[0]->tracking_alert_subscribed;
        $user_company = 0;
        if($user2[0]->role != 'superadmin'){
            $get_company_id = getUserCompany($user2[0]->user_id);
            $get_company_info = getCompanyInfoById($get_company_id);
            if($get_company_info[0]->network_tab){
                $user_company = 1;
            }
        }
        $_SESSION['access_network_tab'] = $user_company;
        //cookie to expire in 30 days
        if(!empty($user2[0]->timeout)){
            $timeout = $user2[0]->timeout;
        }else{
            $timeout = 30;
        }

        $exp_time = time() + 86400 * $timeout;
        setcookie($id, $server_output, $exp_time);
        if($user2[0]->role != 'superadmin') {
            $checkEulaFlag = getUserEulaFlag();
        }
        $company_id = getUserCompany($user2[0]->user_id);
        $_SESSION['company_id'] =  $company_id;
        $zoho_account_id = getCompanyInfo($company_id);
        if($user2[0]->role != 'superadmin') {
            $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
            APIManageZOHOAccount('authyAuthenticated',$company_details);
            $user_info                       = getUserInfoById($user2[0]->user_id);
            $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
            APIManageZOHOContact('authyAuthenticated',$user_details); 
        }
        $_SESSION['just_login'] = 1;
        echo json_encode(array('first_name'=>$user2[0]->first_name, 'last_name'=>$user2[0]->last_name, 'name'=>$user2[0]->first_name.' '.$user2[0]->last_name,'role'=>$user2[0]->role, 'user_id' => $user2[0]->user_id,'status'=>1,'eulaFlag'=>$checkEulaFlag,'user_company'=>$user_company,'contactemail'=>$user2[0]->username,'role'=>$user2[0]->role,'adsphere_blog_url'=>$user2[0]->adsphere_blog_url,'system_status_url'=>$user2[0]->system_status_url,'notification_build_url'=>$user2[0]->notification_build_url,'notification_new_count'=>$user2[0]->notification_new_count,'notification_new_clicked'=>$user2[0]->notification_new_clicked));
    }else{
        setLoginFailedLogs(array('username'=>'', 'password'=>'', 'user_id'=>$user_id, 'mobile'=>$mobile, 'token'=>$id.'_'.$token, 'msg'=>'Invalid Token.'));
        echo json_encode(array('result'=>$server_output, 'status'=>0));
    }
    
   
    
    //if verified is true then update token in db;
}

function getAuthyId(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $mobile = str_replace("-","",$user->verify_mobile);
    $sql = "SELECT * FROM authy_credentials WHERE IP = '".$user->IP."' AND mobile_number = '".$mobile."'";
    $currentDate = date("Y-m-d h:i:s");
    $result = array();
    try {
            $db = getConnection();
            $result = execute_query_get_result($sql, 'FETCH_OBJ'); 
            /*$stmt = $db->prepare($sql);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
            if(!empty($result)){
                //if((!empty($result[0]->otp)) && ($result[0]->otp == $user->token) && ($result[0]->end_date >= $currentDate)){
                if((!empty($result[0]->authy_id)) && ($result[0]->end_date >= $currentDate)){
                         echo json_encode(array('result'=>$result[0], 'status'=> 1));
                }else{
                         echo json_encode(array('result'=>$result[0], 'status'=> 0));
                }
            }
            $db = null;
    } catch(PDOException $e) {
           // echo '{"error":{"text":'. $e->getMessage() .'}}';
        echo json_encode(array('result'=>$result, 'status'=> 0));
    }
}

function updateThumb() {
    echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    
    $cronJob = new Slim_App_Crons_Thumbs();
    echo json_encode($cronJob->updateCreativeThumb());
    
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
}

function sayHello(){
    echo 'Hello';die();
}


function WeeklyRatailReportShortForm(){
   echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    
    $cronJob = new Slim_App_Crons_WeeklyRatailReportShortForm();
    $cronJob->renderPDFAndEmail();
    
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
}
/**
 * Function to create weekly report for brands of short form type
 */
function WeekReportShortFormBrand(){
     echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    
    $cronJob = new Slim_App_Crons_WeeklyReportShortFormBrand();
    $cronJob->retrieveData(); //retrieve current week data and update fields
    $cronJob->retrievePreviousWeek(); //retrieve get_airings_countcurrent week data and update fields
    $cronJob->retrieveMonthlyData(); //retrieve last month data and update fields
    $cronJob->retrieveNationalAirings();
    $cronJob->renderPDFAndEmail();
    
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
}

/**
 * Function to create weekly report for brands of long form type
 */
function WeekReportLongFormBrand(){
    
     echo PHP_EOL . '<br />Start=> Weekly report long form brand' . date('Ymd H:i:s') . PHP_EOL;
    
    $cronJob = new Slim_App_Crons_WeeklyReportLongFormBrand();
    $cronJob->retrieveData(); //retrieve current week data and update fields
    $cronJob->retrievePreviousWeek(); //retrieve current week data and update fields
    $cronJob->retrieveMonthlyData(); //retrieve last month data and update fields
    $cronJob->renderPDFAndEmail();
    
    echo PHP_EOL . '<br />END=>Weekly report long form brand ' . date('Ymd H:i:s') . PHP_EOL;
}

/**
 * Function to create weekly report for adv of short form type
 */
function WeekReportShortFormAdv(){
     echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    
    $cronJob = new Slim_App_Crons_WeeklyReportShortFormAdv();
    $cronJob->retrieveData(); //retrieve current week data and update fields
    $cronJob->retrievePreviousWeek(); //retrieve current week data and update fields
    $cronJob->retrieveNationalAirings();
    $cronJob->renderPDFAndEmail();
    
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
}


/**
 * Function to create weekly report for adv of long form type
 */
function WeekReportLongFormAdv(){
    echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    $cronJob = new Slim_App_Crons_WeeklyReportLongFormAdv();
    $cronJob->retrieveData(); //retrieve current week data and update fields
    $cronJob->retrievePreviousWeek(); //retrieve current week data and update fields
    $cronJob->renderPDFAndEmail();
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
   
}


/**
 * Function to run daily cron for changing creative status
 */
function DailyCreativeStatusUpdate(){
    echo PHP_EOL . '<br />Start=>' . date('Ymd H:i:s') . PHP_EOL;
    $cronJob = new Slim_App_Crons_DailyCreativeStatusUpdate();
    echo PHP_EOL . '<br />END=>' . date('Ymd H:i:s') . PHP_EOL;
}

function RankingReportWithNetwork(){
    $db = getConnection();  
   
    $params['sd'] = $_REQUEST['sd'];
    $params['ed'] = $_REQUEST['ed'];
   echo  date('Ymd H:i:s') ;
    $creative_ids = getCreativeIdForAllNetworks();
      echo  '<br>'.date('Ymd H:i:s') ;
    $params['creative_ids'] = $creative_ids;
    $records = get_query_result('__query_ranking_report_with_networks', $params, 'FETCH_ASSOC');
     echo  '<br>'.date('Ymd H:i:s') ;
}

function getCreativeIdForAllNetworks($creative_params){
   $db = getConnection();  
   
   $creative_array = array();
   
   $params['sd'] = $creative_params['sd'];
   $params['ed'] = $creative_params['ed'];
   
   $creatives_result  = get_query_result('__query_get_creative_id_all_networks', $params, 'FETCH_ASSOC');
   
   foreach($creatives_result as $key => $value){
        array_push($creative_array,$value['creative_id']);
   }
   
   $creative_ids = implode(",", $creative_array);
   
   return $creative_ids;
}

function LastMediaWeek(){
    $last_week      = Slim_App_Lib_Common::getLastMediaWeek();
    $lifetime       = getLifetimeDetails();
    echo json_encode(array('status'=>1, 'last_week'=>$last_week,'lifetime' => $lifetime));
}

function getAllMediaData(){
    $last_week      = Slim_App_Lib_Common::getLastMediaWeek();
    $lifetime       = getLifetimeDetails();

    $last_month     = getLastMediaMonth();
    $currentWeek    = getCurrentWeekDetails();
    $current_month  = getCurrentMediaMonth();

    $media_details  = getCurrentQuarter();
    $years          = get_all_years();
    foreach ($years as $year_key => $year) {
        $years[$year_key]['weeks'] = get_weeks_by_year($year_key);
        $years[$year_key]['months'] = get_months_by_year($year_key);
        $years[$year_key]['qtrs']  = get_qtrs_by_year($year_key);
    }

    $year           = $media_details[0]->media_year;
    $prev_qtr       = ($media_details[0]->media_qtr - 1);
    $month_start    = $media_details[0]->media_month;
    $quarter        = $media_details[0]->media_qtr;
    $current_year   = $media_details[0]->media_year;

    if($prev_qtr === 0){
        $prev_qtr = 4;
        $year = ($media_details[0]->media_year - 1);
        $last_quarter = getFirstAndLastDayOfPrevQtr($prev_qtr,$year);
    }else{
        $last_quarter = getFirstAndLastDayOfPrevQtr($prev_qtr,$year);
    }

    $current_quarter = getFirstAndLastDayOfCurrentQuarter($month_start, $quarter, $current_year);
        
    // echo json_encode(array('status'=>1, 'current_year' => $current_year, 'last_week'=>$last_week,'lifetime' => $lifetime, 'last_month' => $last_month, 'current_week' => $currentWeek, 'current_month' => $current_month, 'lst_quarter_no'=>$prev_qtr, 'last_quarter'=>$last_quarter, 'quarter' => $current_quarter, 'quarter_no' => $quarter, 'years'=>$years));
    $postArray =  array('status'=>1, 'current_year' => $current_year, 'last_week'=>$last_week,'lifetime' => $lifetime, 'last_month' => $last_month, 'current_week' => $currentWeek, 'current_month' => $current_month, 'lst_quarter_no'=>$prev_qtr, 'last_quarter'=>$last_quarter, 'quarter' => $current_quarter, 'quarter_no' => $quarter, 'years'=>$years);
    // $postArray = array('years' => $years);
    echo json_encode($postArray, JSON_NUMERIC_CHECK);
}

function CurrentWeek(){
    $currentWeek   = getCurrentWeekDetails();
    echo json_encode(array('status'=>1, 'current_week'=>$currentWeek));
}

function LastMediaQuarter($timestamp=false){
    $media_details  = getCurrentQuarter();
    
    $year           = $media_details[0]->media_year;
    $prev_qtr       = ($media_details[0]->media_qtr - 1);

    if($prev_qtr === 0){
        $prev_qtr = 4;
        $year = ($media_details[0]->media_year - 1);
        $last_quarter = getFirstAndLastDayOfPrevQtr($prev_qtr,$year);
    }else{
        $last_quarter = getFirstAndLastDayOfPrevQtr($prev_qtr,$year);
    }    
    echo json_encode(array('status'=>1,'quarter'=>$prev_qtr, 'last_quarter'=>$last_quarter));
}

function CurrentMediaQuarter($timestamp=false){
    $media_details  = getCurrentQuarter();

    $year           = $media_details[0]->media_year;
    $month_start    = $media_details[0]->media_month;
    $quarter        = $media_details[0]->media_qtr;

    $current_quarter = getFirstAndLastDayOfCurrentQuarter($month_start, $quarter, $year);
    echo json_encode(array('status'=>1,'quarter'=>$current_quarter,'quarter_no'=>$quarter));
}

function LastMediaYear(){
     $last_year = Slim_App_Lib_Common::getLastMediaYear();
    echo json_encode(array('status'=>1, 'last_year'=>$last_year));
}

function getFirstAndLastDayOfCurrentQuarter($month_start,$quarter,$year){
    $params['month_start'] = $month_start;
    $params['quarter'] = $quarter;
    $params['year'] = $year;
    
    $get_media_quarter_dates = get_query_result('__SQL_GET_CURRENT_QUARTER_DATES', $params, 'FETCH_OBJ');
    
    $start      =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->min_qtr_date));
    $start_db   =  date("m/d/Y",strtotime($get_media_quarter_dates[0]->min_qtr_date));
    
    $end        =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->max_qtr_date));
    $end_db     =  date("m/d/Y",strtotime($get_media_quarter_dates[0]->max_qtr_date));
    return array($start, $start_db, $end ,$end_db);
}

function getFirstAndLastDayOfPrevQtr($prev_qtr,$year){
    
    $params['prev_qtr'] = $prev_qtr;
    $params['year'] = $year;
    
    $get_media_quarter_dates = get_query_result('__SQL_GET_PREV_QUARTER_DATES', $params, 'FETCH_OBJ');

    $start      =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->min_qtr_date));
    $start_db   =  date("m/d/Y",strtotime($get_media_quarter_dates[0]->min_qtr_date));
    
    $end        =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->max_qtr_date));
    $end_db     =  date("m/d/Y",strtotime($get_media_quarter_dates[0]->max_qtr_date));
    return array($start, $start_db, $end ,$end_db);
}

function getFirstAndLastDayOfQuarter($month_start, $month_end, $year){
    $db = getConnection();  
    $get_first_last_quarter_date = sprintf(_SQL_GET_QUARTER_DATES,$month_start,$month_end,$year);
    $stmt = $db->prepare($get_first_last_quarter_date);
    $stmt->execute();
    $get_media_quarter_dates = $stmt->fetchAll(PDO::FETCH_OBJ);
    
    $start      =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->min_month_date));
    $start_db   =  date("M Y",strtotime($get_media_quarter_dates[0]->min_month_date));
    
    $end        =  date("Y-m-d",strtotime($get_media_quarter_dates[0]->max_month_date));
    $end_db     =  date("M Y",strtotime($get_media_quarter_dates[0]->max_month_date));
    return array($start, $start_db, $end ,$end_db);
    
}

function getMonthIdForMediaQuarter(){
    $month_arr      = array();
    $media_details  = getCurrentQuarter();
    $year           = $media_details[0]->media_year;
    $month_start    = ($media_details[0]->media_month-4);
    $month_end      = ($media_details[0]->media_month-4)+2;
    array_push($month_arr,$month_start);
    array_push($month_arr,($month_start+1));
    array_push($month_arr,($month_start+2));
    return array($month_arr,$year);
    
}

function getCurrentQuarter(){
    $db = getConnection();  
    $get_media_calendar_details = sprintf(_SQL_GET_CURRENT_CALENDAR_DETAILS);
    $retrieve_media_quarter = execute_query_get_result($get_media_calendar_details, 'FETCH_OBJ');            
    
    /*
    $stmt = $db->prepare($get_media_calendar_details);
    $stmt->execute();
    $retrieve_media_quarter = $stmt->fetchAll(PDO::FETCH_OBJ);
    */
    return $retrieve_media_quarter;
}

function LastMediaMonth(){
    $last_month = getLastMediaMonth();
    echo json_encode(array('status'=>1, 'last_month'=>$last_month));
}

function CurrentMediaMonth(){
    $current_month = getCurrentMediaMonth();
    echo json_encode(array('status'=>1, 'current_month'=>$current_month));
}

function getSession() {
    print_r($_SESSION);
}

function retreiveStreamingUrl($creative_url){
    //$video_api_server = 'http://video.drmetrix.com/';//VIDEO_STREAMING_URL;//'http://172.16.1.51:10110/';
   // $video_api_server = VIDEO_STREAMING_URL;//'http://172.16.1.51:10110/';
   $video_api_server = getVideoStreamingUrl();
    $ch = curl_init();
    // curl_setopt($ch, CURLOPT_URL, "http://video.drmetrix.com/api/v1/ads/$creative_url");
    $url = $video_api_server . "api/v1/ads/$creative_url";
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_NOSIGNAL, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT_MS, 15000);
    $server_output = curl_exec($ch);
    $curl_errno = curl_errno($ch);
    $curl_error = curl_error($ch);
    curl_close($ch);
    if ($curl_errno > 0) {
        APITimOut($url);
    } else {
        $json_a = json_decode($server_output, true);
        
    }

    /*if (!isset($json_a['html5_streaming_url']) || $json_a['html5_streaming_url'] == "") {
        APITimOut($url);
    }*/
    
    return $json_a;
}

function getVideo(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $json_a = retreiveStreamingUrl($user->adid);
    $stream = $json_a["html5_streaming_url"];
    echo json_encode(array('status'=>1, 'stream'=> $stream));
}

function getVideoRanking(){
    $request = Slim::getInstance()->request();
    $user = $request->getBody();  
    $get_video_id = $refine_params = $name_array =array();
    $url = '';
    $page =  'network_page';
    $refine_by  = $search_by_tfn =  $stream = $no_image = $msd_st = '';
    $msg = "This is a sample video and not specific to network";
    $response = explode("&",$user); 
    $resp_adid  = explode("=",$response[0]);
    $resp_ncode = explode("=",$response[1]);
    $resp_tab   = explode("=",$response[2]);
    $resp_sd    = explode("=",$response[3]);
    $resp_ed    = explode("=",$response[4]);
    $resp_image = explode("=",$response[5]);
    $resp_nid   = explode("=",urldecode($response[6]));
    $replaced = 0;
    if(isset($response[7])) {
        $page           =  'refine_page';
        $refine_by      = explode("=",$response[8]); // refine by
        $search_by_tfn  = explode("=",$response[9]); // refine by search text
        $refine_params  = array('page' => $page, 'refine_by' => $refine_by, 'search_by_tfn' => $search_by_tfn);
        if($refine_params['page'] == 'refine_page') {
            $refine_by   = $refine_params['refine_by'][1] == '800' ? 'tfn_num' : 'url';
            $refine_params['replaced'] = 0;
            if($refine_params['refine_by'][1]  == '800') {
                $refine_filter_opt_text_replaced    = getNumbersForAlphabets($search_by_tfn[1]);
                if($search_by_tfn[1] != $refine_filter_opt_text_replaced) {
                    $refine_params['replaced'] = 1;
                    $search_by_tfn[1] = $refine_filter_opt_text_replaced;
                }
            }
            $refine_array= getRefineTextWithStringFilters($search_by_tfn[1], $refine_params['replaced']);
            $refine_params['where'] = ' AND a.verified = 1 AND a.'.$refine_array['colName'] .' LIKE "%'.$refine_array['refine_filter_opt_text'].'%"';
        }
    }
    $resp_image = explode("=",$response[5]);
    $prev_date  = date('Y-m-d', strtotime(date('Y-m-d') .' -10 day'));
    $dateBegin  = date('Y-m-d', strtotime($resp_sd[1]));
    $dateEnd    = date('Y-m-d', strtotime($resp_ed[1]));
    $creative_id = $resp_adid[1];
    $copyToClipboardText = $displayBrandCreativeName = '';
    $company_info = getCompanyInfoById($_SESSION['company_id']);
    $downloadable = 1;

    if($resp_image[1] != 'network_log_thumbnil') {
        $getAdvertiserCompanyInfoSql = "SELECT adv.adv_id, adv.zoho_account_id, downloadable FROM airings a INNER JOIN brand b on a.brand_id = b.brand_id INNER JOIN advertiser adv ON adv.adv_id = b.adv_id WHERE a.airing_id = ".$resp_adid[1];
        $getAdvertiserCompanyInfo    = execute_query_get_result($getAdvertiserCompanyInfoSql);
        if($getAdvertiserCompanyInfo[0]['zoho_account_id'] == $company_info[0]->zoho_account_id){
            $downloadable = 1;
        } else {
            $downloadable = $getAdvertiserCompanyInfo[0]['downloadable'];
        }
    }
    
    if($resp_ncode[1] != 'All' && $resp_tab[1] != 'network') {
        $resp_nid = getNetworkIdByCode($resp_ncode[1]);
    } else {
        $resp_nid = $resp_nid[1];
    }
    if(isset($resp_image[1]) && !empty($resp_image[1]) && ($resp_image[1] == 'network_log_thumbnil' || $resp_image[1] == 'network_log_video')){
        // Here creative_id has airing_id for thumbinal use
        $actule_airing_id = $creative_id;
        if($resp_image[1] == 'network_log_video'){
            $airing_info = getAiringInfoById($actule_airing_id, $refine_params);
            $sub_msg = '';
            if(!empty($airing_info['result'])){
                $actule_airing_id = $airing_info['result'][0]->airing_id;
                $datetime = explode(' ',$airing_info['result'][0]->start);
                $broadcast_datetime = explode(' ',$airing_info['result'][0]->broadcast_start);
                $date = explode('-',$datetime[0]);
                $broadcast_date = explode('-',$broadcast_datetime[0]);
                if($airing_info['process'] != 1){
                    if($airing_info['process'] == 2)
                        $sub_msg = 'This is a sample video from the same network'.'</br>';
                    else
                        $sub_msg = $msg.'</br>';
                }
                // $msg = " captured on ".$airing_info['result'][0]->network_alias." on calendar day ".$date[1]."/".$date[2]."/".substr($date[0], -2)."   (broadcast day ".$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2).") at ".date('h:i A',strtotime($airing_info['result'][0]->start)) .' '.'ET';
                if($page == 'network_page') {
                    $displayDayMessage = 'broadcast day ' .$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2);
                } else {
                    $displayDayMessage = 'calendar day ' .$date[1]."/".$date[2]."/".substr($date[0], -2);
                }
                $msg = " captured on ".$airing_info['result'][0]->network_alias." on ".$displayDayMessage ." at ".date('h:i A',strtotime($airing_info['result'][0]->start)) .' '.'ET';
            }
            $json_a = retreiveStreamingUrl($actule_airing_id);
            if(!empty($airing_info['result'])) {
                $json_a = forCreativeVideo($json_a, $airing_info, $airing_info['result'][0]->creative_id);
                $stream = $json_a["html5_streaming_url"];
                $no_image = 0;
                $msd_st = "Video";
                if(isset($json_a["msg"])){
                    $msg = $json_a["msg"];
                    $sub_msg = '';
                    $msd_st = "";
                }
                $video      = base64_encode("creative_id=".$airing_info['result'][0]->creative_id."&airing_id=".$actule_airing_id."&date=".time());
                if($page ==  'refine_page') {
                    $video      = base64_encode("creative_id=".$airing_info['result'][0]->creative_id."&airing_id=".$actule_airing_id."&page=refine_page&refine_by=".$refine_params['refine_by'][1]."&search_by_tfn=".$refine_params["search_by_tfn"][1]."&date=".time());
                }

                $url        = "http://".HOST.'/drmetrix/video/'.$video.'?video=1';
                $copyToClipboardText        = 'Brand: '.$airing_info['result'][0]->brand_name. PHP_EOL . 'Creative: '.$airing_info['result'][0]->creative_name . ' -  '.$airing_info['result'][0]->length.' sec' .PHP_EOL . 'Link: '.$url;  
                $name_array = array('brand_name' => $airing_info['result'][0]->brand_name , 'creative_name' => $airing_info['result'][0]->creative_name);
            }
        }else{
            $airing_detail = getActulAiringInfoById($actule_airing_id);
            $json_a = retreiveStreamingUrl($actule_airing_id);
            $stream = "/drmetrix/assets/img/no_image.png";
            $no_image = 1;
            $sub_msg = '';
            $msd_st = '';
            $msg='';
            $copyToClipboardText='';
            if(!empty($json_a["ocr_image_url"])){     
                if(@getimagesize($json_a["ocr_image_url"])) {
                    $stream = $json_a["ocr_image_url"];
                    $no_image = 0;
                    if(!isset($json_a["msg"])){
                        $msd_st = "Image";
                        $sub_msg = 'This is an image from actual airing'.'</br>';
                        $datetime = explode(' ',$airing_detail['result'][0]->start);
                        $broadcast_datetime = explode(' ',$airing_detail['result'][0]->broadcast_start);
                        $date = explode('-',$datetime[0]);
                        $broadcast_date = explode('-',$broadcast_datetime[0]);
                        // $msg = " captured on ".$airing_detail['result'][0]->network_alias." on calendar day ".$date[1]."/".$date[2]."/".substr($date[0], -2)."   (broadcast day ".$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2).") at ".date('h:i A',strtotime($airing_detail['result'][0]->start)) .' '.'ET';

                        if($page == 'network_page') {
                            $displayDayMessage = 'broadcast day ' .$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2);
                        } else {
                            $displayDayMessage = 'calendar day ' .$date[1]."/".$date[2]."/".substr($date[0], -2);
                        }
                        $msg = " captured on ".$airing_detail['result'][0]->network_alias." on ".$displayDayMessage." at ".date('h:i A',strtotime($airing_detail['result'][0]->start)) .' '.'ET';
                    }else{
                        $msg='This is a sample image and not specific to network.';
                    }
                } 
                $url = createImageLink_ranking($airing_detail['result'][0]->creative_id, $actule_airing_id);
                if($page ==  'refine_page') {
                    $query_string = base64_encode("creative_id=".$airing_detail['result'][0]->creative_id."&airing_id=".$actule_airing_id."&date=" . time()."&page=refine_page&refine_by=".$refine_params['refine_by'][1]."&search_by_tfn=".$refine_params["search_by_tfn"][1]);
                    $url          =  'http://' . HOST . "/drmetrix/video/{$query_string}?video=2";

                    // $video      = base64_encode("creative_id=".$airing_info['result'][0]->creative_id."&airing_id=".$actule_airing_id."date=" . time()."&page=refine_page&refine_by=".$refine_params['refine_by'][1]."&search_by_tfn=".$refine_params["search_by_tfn"][1]."&date=".time());
                }

                $copyToClipboardText        = 'Brand: '.$airing_detail['result'][0]->brand_name. PHP_EOL . 'Creative: '.$airing_detail['result'][0]->creative_name . ' - '.$airing_detail['result'][0]->length.' sec' .PHP_EOL . 'Link: '.$url;  
                $name_array = array('brand_name' => $airing_detail['result'][0]->brand_name , 'creative_name' => $airing_detail['result'][0]->creative_name);
            }
        }
        $displayBrandCreativeName   = retreiveBrandCreativeName($name_array);
        if($stream != '/drmetrix/assets/img/no_image.png' && $stream != "") { // if no stream for thumbnail
            echo json_encode(array('status'=>1, 'stream'=> $stream,'no_image'=>$no_image,'msg'=>$sub_msg.$msd_st.$msg,'adid'=>$actule_airing_id,'url'=> $copyToClipboardText,'downloadable' => $downloadable, 'displayNames' => $displayBrandCreativeName));
        } else if($stream == "") { //no stream for video
            echo json_encode(array('status'=>0, 'stream'=> $stream,'no_image'=>$no_image,'adid'=>$actule_airing_id));
        } else {
            echo json_encode(array('status'=>1, 'stream'=> $stream,'no_image'=>$no_image,'adid'=>$actule_airing_id));
        }
    }else{
        $tab = $resp_tab[1];
        $final_str = $for_clipboard = ''; 
        if(!empty($resp_ncode[1])){
            if($tab == 'ranking'){
                $resp_ncode[1] = "'".addslashes($resp_ncode[1])."'";
                $for_clipboard .= $resp_nid;
            }else if($tab == 'network'){
                $final_str = $for_clipboard = '';
                $network_code_arr = explode(',',urldecode($resp_ncode[1]));
                foreach ($network_code_arr as $key => $value) {
                    $code_arr = explode('==',$value);
                    if(isset($code_arr[1])){
                        $final_str .= "'".getNetworkCodeByAlias($code_arr[1])."',";
                        $for_clipboard .= $code_arr[0].",";
                    }else{
                        $final_str .= "'".getNetworkCodeByAlias($code_arr[0])."',";
                    }
                }
                $resp_ncode[1] = rtrim($final_str, ',');
            } 
        }
        $get_video_id = getCreativeVideoId($resp_adid[1],$resp_nid,$resp_tab[1], $refine_params);
        // $get_video_id = getCreativeVideoId($resp_adid[1],$resp_ncode[1],$resp_tab[1]);
        $video = base64_encode("creative_id=".$creative_id."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode(trim(rtrim($for_clipboard, ','), "'")));
        $url="http://".HOST.'/drmetrix/video/'.$video.'?video=1';
        if(!empty($get_video_id)){
            $copyToClipboardText        =  'Brand: '.$get_video_id[0]->brand_name. PHP_EOL . 'Creative: '.$get_video_id[0]->creative_name . ' - '.$get_video_id[0]->length.' sec' . PHP_EOL . 'Link: ' .$url ;

            $name_array = array('brand_name' => $get_video_id[0]->brand_name , 'creative_name' => $get_video_id[0]->creative_name);
            $displayBrandCreativeName   = retreiveBrandCreativeName($name_array);
            
            $resp_adid[1] = $get_video_id[0]->airing_id;
            $datetime = explode(' ',$get_video_id[0]->start);
            $date = explode('-',$datetime[0]);
            $time = explode(':',$datetime[1]);
            $video_detail = $get_video_id[0]->network_alias." on calendar day ".$date[1]."/".$date[2]."/".substr($date[0], -2)." at ".date('h:i A',strtotime($get_video_id[0]->start)) .' ET';
            $msg = "Video captured on ".$video_detail ;
            $network_code = explode("=",$response[1]);
            $network_alias = getNetworkAliasByCode($resp_ncode[1],$tab);
            $flag = false;
            if($tab == 'network' && is_array($network_alias) && !empty($network_alias)){
                if(!in_array($get_video_id[0]->network_alias, $network_alias)){
                    $flag = true;
                }
            }else if(isset($network_alias) && !empty($network_alias) && $network_alias){      
                if($network_alias != $get_video_id[0]->network_alias ){   
                     $flag = true;
                }
            }           
            if($flag){ //class='grid-block align-center'      
                $msg = "<span>There are no airing videos in the past 10 days for the chosen network.<br>This copy was captured on ".$video_detail."</span>";
            }
        }
        $json_a = retreiveStreamingUrl($resp_adid[1]);
        $json_a = forCreativeVideo($json_a,$get_video_id, $creative_id); 
        if(isset($json_a["msg"]))
            $msg = $json_a["msg"];
        if(isset($json_a['adid']))
            $resp_adid[1] = $json_a['adid'];

        $stream = $json_a["html5_streaming_url"];
        echo json_encode(array('status'=>1, 'stream'=> $stream, 'msg'=>$msg,'adid'=>$resp_adid[1], 'url'=> $copyToClipboardText,'downloadable' => $downloadable, 'displayNames' => $displayBrandCreativeName));
    }
}

function checkVideoDownloadsCount() {
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $user_video_downloads_limit = 0;

    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $adid  = $requestData['adid'];

    $params['adid']             = $adid;
    $params['created_date']     = customDate('Y-m-d H:i:s');

    $company_result  = get_query_result('__query_check_company_video_downloads_limit', $params, 'FETCH_OBJ');

    if(!empty($company_result)) {
        $company_video_downloads_limit = $company_result[0]->video_download_limit;
    }

    $user_result  = get_query_result('__query_check_count_video_downloads', $params, 'FETCH_OBJ');
    if(!empty($user_result)) {
        $user_video_downloads_limit = $user_result[0]->count_video_downloads;
    }
    
    $creative_info = getCreativeInfoByAiring($adid);
    
    $download_from = HOST;

    if($user_video_downloads_limit >= $company_video_downloads_limit){
        echo json_encode(array('status'=>0));        
    }else {
        echo json_encode(array('status'=>1, 'creative_id'=> $creative_info[0]->creative_id, 'download_from' => $download_from));  
    }
}


function logoutUser(){
    session_unset();
    session_destroy();
    echo json_encode(array('status'=>1));
}

function resetPassword() {
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $sql = "SELECT * FROM user WHERE passphrase = :passphrase;";
    try {
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->bindParam("passphrase", $user->passphrase);
        //$stmt->bindParam("password", $user->password);
        $stmt->execute();
        $user2 = $stmt->fetchAll(PDO::FETCH_OBJ);
        
        if(!empty($user2)){
            $user2['status'] = 1;
            $sql = "UPDATE user SET password = :password, passphrase = '' WHERE passphrase = :passphrase";
            $stmt = $db->prepare($sql);
            //$stmt->bindParam("username", $user->username);
            $stmt->bindParam("password", $user->password);
            $stmt->bindParam("passphrase", $user->passphrase);
            $stmt->execute();
            adsphereauthenticationUpdate($user2[0]->user_id);
            echo json_encode($user2);
        }else{
            echo json_encode(array('status'=>0));
        }
        $db = null;
    } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function newAccountEmail(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    
    $passphrase = date('Y-m-d-H:i:s'); //2015-06-30 12:40:27
    $resetLink = 'http://'.HOST.'/drmetrix/#!/resetPassword/'.urlencode($passphrase);

    $sql = "UPDATE user SET passphrase='".$passphrase."' WHERE email='".addslashes($user->username)."'";
    $db = getConnection();
    $stmt = $db->prepare($sql);
    $stmt->execute();    

    $sql = "SELECT zoho_contact_id from user  WHERE username='".addslashes($user->username)."'";
    $get_user_info = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $get_user_info = $stmt->fetchAll(PDO::FETCH_OBJ);*/

    $user_details['zoho_contact_id'] = $get_user_info[0]->zoho_contact_id;
    $user_details['activation_link'] = urlencode($resetLink);
    APIManageZOHOContact("newUserActivationLink",$user_details);

    /*if($user->type == 'user'){
        $get_admin = "SELECT concat(first_name,' ',last_name) as name from user where user_id = (SELECT admin_id from admin_user Where user_id = (SELECT `user_id` FROM `user` WHERE username='".addslashes($user->username)."'))";
        $stmt = $db->prepare($get_admin);
        $stmt->execute();
        $admin_info = $stmt->fetchAll(PDO::FETCH_OBJ);
        $admin_name = !empty($admin_info[0]->name) ?  $admin_info[0]->name : $user->company_name;

        $name = 'Welcome '. $user->name;
        $msg = 'An AdSphere account has been created for you by '.$admin_name.'. Your username is your email address which is '.addslashes($user->username).'.<br/><br/>';
        $sub = 'New User Account created';

    }else{
        $get_admin_name = "SELECT concat(first_name,' ',last_name) as name from user  WHERE username='".addslashes($user->username)."'";
        $stmt = $db->prepare($get_admin_name);
        $stmt->execute();
        $admin_info = $stmt->fetchAll(PDO::FETCH_OBJ);
        $admin_name = !empty($admin_info[0]->name) ?  'Welcome '.$admin_info[0]->name : $user->company_name;
        
        $name = $admin_name;
        $msg =  'An AdSphere admin account has been created for you by DRMetrix. Your username is your email address which is '.addslashes($user->username).'.<br/><br/>';
        $sub = 'New Admin Account created';
    }*/
    

    
    /*//echo json_encode(array('status'=>1,'url'=>$resetLink )); return false;
    $subject = $sub;
    $message =  $name.',<br/><br/>';
    $message .= $msg;
    $message .= 'To set your password for the first time, please click the following link which is for one time use only:';
    $message .= '<br/><br/>URL: <a href="'.$resetLink.'">'.$resetLink . '<a/><br/><br/>';
    $message .= 'Once your password is set and you log on to AdSphere for the first time, you will be asked to provide the DRMetrix token/passcode from Authy.  This code will be sent to you via text message upon login.  You will be required to re-enter a new token every 30 days and/or when logging in from a new browser for the first time.<br/><br/>
    You should have also received a text message with a link to setup the free AUTHY app on your smart phone. This is optional and most of our customers skip this step. The app is only necessary should you find yourself in need of an Authy code when you do not have cell service or the ability to receive text messages to your mobile device.<br/><br/>
    To login to the AdSphere system in future, please bookmark <a href="adsphere.drmetrix.com">adsphere.drmetrix.com</a> or choose "AdSphere" from the login drop down on the front page of <a href="drmetrix.com">drmetrix.com</a><br/><br/>
    Another important email has been sent to you with the subject "Getting started with AdSphere". If you find any of these emails in your spam folder, please ask your company email guru to kindly white list the domain "drmetrix.com" and please consider adding our email addresses to your safe user list.<br/><br/>
    Should you ever need assistance, please email <a href="mailto:support@drmetrix.com">support@drmetrix.com</a><br><br><br>
    Thank you,<br>
    DRMetrix';
   
    $headers = 'From: info@drmetrix.com' . "\r\n" .
                'MIME-Version: 1.0' . "\r\n" .
                'Content-type: text/html; charset=iso-8859-1' . "\r\n";
    require 'PHPMailer/class.phpmailer.php';
    try {
            $mail = new PHPMailer(); //New instance, with exceptions enabled
            $mail->IsSendmail();  // tell the class to use Sendmail            
            $body = $message;
            $to = $user->username;
            $mail->SetFrom('info@drmetrix.com', 'DRMetrix');
            $mail->AddAddress($to);
            $mail->Subject  = $subject;
            $mail->AltBody    = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
            $mail->WordWrap   = 80; // set word wrap
            $mail->MsgHTML($body);
            $mail->IsHTML(true); // send as HTML
            $mail->Send();
            echo json_encode(array('status'=>1));
    } catch (phpmailerException $e) {
            echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }*/

}

function regeneratePassword(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody()); 
    $passphrase = date('Y-m-d-H:i:s'); 
    $get_user = "SELECT username,zoho_contact_id,concat(first_name,' ',last_name) as name  from user WHERE user_id = '".$user->user_id."'";
    $db = getConnection();
    $stmt = $db->prepare($get_user);
    $stmt->execute();
    $get_user_detail = $stmt->fetchAll(PDO::FETCH_OBJ);
    $user_details=array();
    $user_details['zoho_contact_id'] = $get_user_detail[0]->zoho_contact_id;
    APIManageZOHOContact("resendEmail",$user_details);
    echo json_encode(array('status'=>1));
}
function forgotPassword() {
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
        
    $sql = "SELECT * FROM user WHERE Email = :username;";
    try {
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->bindParam("username", $user->username);
        $stmt->execute();
        $user2 = $stmt->fetchAll(PDO::FETCH_OBJ);        
        if($user2){
            $user2['status'] = 1;
            $passphrase = date('Y-m-d-H:i:s'); //2015-06-30 12:40:27
            $get_result = passphreasForUser($user2[0]->user_id);
            if(empty($get_result[0]->passphrase)){
                $sql = "UPDATE user SET passphrase='".$passphrase."' WHERE email=:username";
                $stmt = $db->prepare($sql);
                $stmt->bindParam("username", $user->username);
                $stmt->execute();
            }else{
                $passphrase = $get_result[0]->passphrase;
            }
            echo json_encode($user2);
            $resetLink = 'http://'.HOST.'/drmetrix/#!/resetPassword/'.urlencode($passphrase);
            forgotPasswdMail($user->username, $resetLink);
        }else{
            echo json_encode(array('status'=>0));
        }
        $db = null;
    } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function chkUser() {
    $onProduction = HOST == ADSPHERE;
    $request                    = Slim::getInstance()->request();
    $user                       = json_decode($request->getBody());
    $status                     = '';
    $sql                        = "
    SELECT user.*, concat(user.first_name, ' ', user.last_name) as full_name,  user.company_id as admin_company_id, company.company_name, company.id as company_id, company.network_tab, IF(u.username IS NULL, user.username, u.username) as admin_name, admin_user.admin_id, user.assistant_admin
    FROM `user`
    LEFT JOIN admin_user on user.user_id=admin_user.user_id
    LEFT JOIN user u ON u.user_id=admin_user.admin_id
    LEFT JOIN pricing ON admin_user.admin_id=pricing.user_id OR user.user_id=pricing.user_id
    LEFT JOIN company ON pricing.company_id=company.id 
    WHERE 
    user.username = '{$user->username}' and user.password = '{$user->password}'";
    $_SESSION['version']        =  defined('BETA_VERSION') ? BETA_VERSION : VERSION;

    try {
        $db         = getConnection();
        $user2      = execute_query_get_result($sql, 'FETCH_OBJ');
        $status     = (isset($user2) && !empty($user2)) ? $user2[0]->status : '';
        $role       = (isset($user2) && !empty($user2)) ? $user2[0]->role : '';
        $user_id    = $_SESSION['user_id'] = (isset($user2) && !empty($user2)) ? $user2[0]->user_id : '';
        $_SESSION['admin_id'] = $_SESSION['user_id'];
        if($role == 'user'){
            $_SESSION['admin_id'] = (isset($user2) && !empty($user2)) ? $user2[0]->admin_id : '';
        }

        $user_company = 0;
        $user_eula_flag_check = array();

        if(isset($user2[0]->user_id))
            $user_eula_flag_check = $user2[0]->eula_flag;

        $flag = 0;
        if($role == 'user'){
            $adminDetails = checkAdminStatus($user2);
        } else if($role == 'admin'){
            $adminDetails = $user2[0];
        }
        if($role && $role != 'superadmin'){
            $admin_status = $adminDetails->status;
            $admin_email = $adminDetails->email;
            $get_company_id = $adminDetails->company_id;
            $admin_name = ucwords($adminDetails->first_name.' '.$adminDetails->last_name);
            if ($status == 'active'){
                $status = $adminDetails->status;
            }
        }
        if($status == 'active' ||  $role == 'superadmin'){
            $new_user = 0;  
            $authy_flag = 0;
            $server = explode(':',$_SERVER['HTTP_HOST']);
            if($server[0] != "localhost") {
                if($user->username != EMIL_BYPASS){
                    $authy_flag = !isset($_COOKIE[$user2[0]->authy_id]);
                }
            }
            
            if( isset($user_eula_flag_check[0]['eula_flag']) && $user_eula_flag_check[0]['eula_flag'] == '0'){
                $authy_flag =  1;
            }
          
            if($authy_flag) {
                $new_user = 1;
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, "http://".HOST."/drmetrix/api/authy-php-master/sendSMS.php?authy_user_id=" . $user2[0]->authy_id);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                $server_output = curl_exec ($ch);   
                curl_close($ch);
                if($server_output != 1){
                    echo json_encode(array('status'=>1,'new_user'=>$new_user));
                }else{
                    echo json_encode(array('status'=>1,'new_user'=>$new_user,'mobile'=>$user2[0]->phone_number,'authy_id'=>$user2[0]->authy_id,'user_id'=>$user_id,'company_id'=>$user2[0]->company_id,'assistant_admin'=>$user2[0]->assistant_admin));
                }                
            }else{
                $last_login = standardDateTimeFormat('Y-m-d H:i:s');

                if($user2[0]->role != 'superadmin'){
                    if($user2[0]->role == 'admin'){
                        $get_company_id = $user2[0]->admin_company_id;
                    }
                    $get_company_info = getCompanyInfoById($get_company_id);
                    if($get_company_info[0]->network_tab){
                        $user_company = 1;
                    }
                }

                $_SESSION['access_network_tab'] = $user_company;
                $sql = "UPDATE  user SET last_login = '".$last_login."' WHERE username = :username and Password = :password;";
                $stmt = $db->prepare($sql);
                $stmt->bindParam("username", $user->username);
                $stmt->bindParam("password", $user->password);
                $stmt->execute();
                if($user2[0]->role != 'superadmin')
                    setUserLogs($user2);
                $db = null;
                $_SESSION[$user->username] = 1;
                $_SESSION['username'] =  $user->username;
                $_SESSION['full_name'] = $user2[0]->full_name;
                $_SESSION['company_id'] =  $user2[0]->company_id;
                $_SESSION['company_name'] =  $user2[0]->company_name;
                $_SESSION['user_id'] = $user2[0]->user_id;
                $_SESSION['assistant_admin'] = $user2[0]->assistant_admin;
                $_SESSION['role'] = $user2[0]->role;
                $_SESSION['lastLoginTime'] = $last_login;
                $_SESSION['loggedin_time'] = time();
                $_SESSION['tracking_alert_subscribed'] = $user2[0]->tracking_alert_subscribed;
                setTrackingDataIntoSession();
                if($user2[0]->role == 'superadmin'){
                    $checkEulaFlag = 1;
                }else{
                    $checkEulaFlag = getUserEulaFlag();
                }
                $_SESSION['just_login'] =  1;

                $server = explode(':',$_SERVER['HTTP_HOST']);
                if( $server[0] != "localhost" && empty($user2[0]->company_id) ){
                    $to = ZOHO_ADSPHERE_DISCREPANCY_EMAIL_RECIPIENTS;
                    $message = 'Pricing table Data Inconsistency occured for User ' . $user2[0]->user_id . ' => ' . $user->username . ' from ' . $user2[0]->company_id . ' : ' . $user2[0]->company_name;
                    $subject = 'Company ID is missing for ADS User';
                    custom_email($to, $subject, $message);
                }
                $roles_array[] = $user2[0]->role;
                if ($user2[0]->network_tab == 1) {
                    $roles_array[] = 'network';
                }

                if( $user2[0]->role != 'superadmin' && !$onProduction ){
                    $get_company_info = getCompanyInfoById($get_company_id);
                    if(!$get_company_info[0]->staging_access){
                        $flag = 2;
                        echo json_encode(array('status'=>0, 'response'=>'inactive', 'admin_email'=>$admin_email, 'admin_status'=>$admin_status, 'admin_name'=>$admin_name,'flag'=>$flag));
                        exit;
                    }
                }
                echo json_encode(array('first_name'=>$user2[0]->first_name, 'last_name'=>$user2[0]->last_name, 'name'=>$user2[0]->first_name.' '.$user2[0]->last_name,'role'=>$user2[0]->role, 'roles' => $roles_array, 'user_id' => $user2[0]->user_id,'status'=>1,'company_name' => $user2[0]->company_name, 'new_user'=>$new_user,'last_login'=>$last_login,'session_login' => $_SESSION['lastLoginTime'],'eulaFlag'=>$checkEulaFlag,'user_company'=>$user_company,'contactemail'=>$user2[0]->username,'company_id' =>$user2[0]->company_id,'admin_id' =>$_SESSION['admin_id'],'assistant_admin'=>$user2[0]->assistant_admin,'adsphere_blog_url'=>$user2[0]->adsphere_blog_url,'system_status_url'=>$user2[0]->system_status_url,'notification_build_url'=>$user2[0]->notification_build_url,'notification_new_count'=>$user2[0]->notification_new_count,'notification_new_clicked'=>$user2[0]->notification_new_clicked, 'SYSTEM_STATUS_URL'=>SYSTEM_STATUS_URL, 'ADSPHERE_BLOG_URL'=>ADSPHERE_BLOG_URL));
            }
        }else if($status == 'inactive'){
            if($role == 'user'){
                if($admin_status == 'active'){
                    if(!isset($get_company_info)){
                        $get_company_info = getCompanyInfoById($get_company_id);
                    }
                    $company_status = 0;
                    if(!$onProduction && $get_company_info[0]->staging_access){
                        $company_status = 1;
                    }
                    if( $onProduction || (!$onProduction && $company_status == 1) ){
                        $flag = 1;
                    }
                }
                echo json_encode(array('status'=>0, 'response'=>'inactive', 'admin_email'=>$admin_email, 'admin_status'=>$admin_status, 'admin_name'=>$admin_name,'flag'=>$flag));
            }
            else if($role == 'admin'){
              echo json_encode(array('status'=>0, 'response'=>'inactive','flag'=>$flag));
            }
        } else if($status == 'deleted') {
            echo json_encode(array('status'=>0, 'response'=>'deleted','flag'=>$flag));
        }else{
            setLoginFailedLogs(array('username'=>$user->username, 'password'=>$user->password, 'user_id'=>'', 'mobile'=>'', 'token'=>'', 'msg'=>'Invalid Username/Password.'));
            echo json_encode(array('status'=>0, 'response'=>''));
        }
    } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function getCreative(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $sql = "select c.*, brand_name, company_name, c.type,c.class,c.length,c.first_detection ,c.last_aired CreativeLastAired, if(c.is_active, 'Yes', 'No') IsCreativeActive, b.adv_id, main_category, main_sub_category
            from category ct, creative c left join brand b on b.brand_id = c.brand_id left join advertiser a on a.adv_id = b.adv_id
            where c.creative_id = '".$user->id."' and ct.brand_id = b.brand_id AND c.class != 'BRAND';";
    try {
        $db = getConnection();
        $wines = execute_query_get_result($sql, 'FETCH_OBJ');
       /* $stmt = $db->prepare($sql);
        $stmt->bindParam("id", $user->id);
        $stmt->execute();
        $wines = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $db = null;
        $wines[0]->status = 1;
        echo json_encode($wines);
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function findAdvertiser($categories,$cnt){
       $advertisers = array();
       $classification = false;
       $where = ' WHERE  a.adv_id !="'.$categories[0]->adv_id.'" AND ';
          //find advertisers
       $sql = "SELECT a.adv_id, a.company_name
                    FROM advertiser a
                    INNER JOIN brand b ON b.adv_id = a.adv_id
                    INNER JOIN category ct ON ct.brand_id = b.brand_id";
       if($cnt == 1){
         $where .= "  ct.main_category =  '".$categories[0]->main_category."' ";
       }else if($cnt > 1 && $cnt <=3){
           foreach($categories as $c1 => $c2){
               $where .= " ct.main_category =  '".$c2->main_category."' OR ";
           } 
           
           $where = rtrim($where," OR ");
       }else{
           //find advertisers of lead generation,brandDR/Dr,Product        
           $classification = true;
           $classificationList = findClassification($categories);
           foreach($classificationList as $cl1 => $cl2){
                array_push($advertisers,$cl2['adv_id']);
           }
           
       }
        $sql = $sql . $where;
        if(!$classification){
            $db = getConnection();
            $advs = execute_query_get_result($sql, 'FETCH_ASSOC');
            /*$stmt = $db->prepare($sql);
            $stmt->execute();
            $advs = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
        
            foreach($advs as $a1 => $a2){
                array_push($advertisers,$a2['adv_id']);
            }
        }
        return $advertisers;
    
}

function findClassification($categories){
    $brand_arr = $categories_arr = $compare_arr = array();
    $category = '';
    $db = getConnection();
    foreach($categories as $c1 => $c2){
         array_push($categories_arr,$c2->main_category);
     }
     
     if(!empty($categories_arr)){
         foreach($categories_arr as $a => $b){
             $category .=  "'".$b."'," ;
         }
     }
     $category = rtrim($category ,",");
    
    $sql = "SELECT brand_id FROM brand WHERE adv_id = (".$categories[0]->adv_id.")";
    $brand_results = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $brand_results = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
    
    foreach($brand_results as $c1 => $c2){
         array_push($brand_arr,$c2['brand_id']);
     }
     
     if(!empty($brand_arr)){
         $brandIds = implode(",",$brand_arr);
     }
     
    //find lead generation creatives
    $sqlLeadGen = "SELECT DISTINCT(b.brand_id),adv.adv_id,c.type,c.creative_id, sum(c.price) as spend FROM 
brand b INNER JOIN advertiser adv
 ON adv.adv_id = b.adv_id
 INNER JOIN creative c ON c.brand_id = b.brand_id
 INNER JOIN category cat ON cat.brand_id = b.brand_id 
WHERE b.brand_id NOT IN (".$brandIds.")
 AND cat.main_category IN (".$category.") AND c.type = 'Lead Gen' AND c.price IS NOT NULL AND c.class != 'BRAND' GROUP by b.brand_id ORDER BY spend DESC LIMIT 5;";
     $stmt = $db->prepare($sqlLeadGen);
     $stmt->execute();
     $leadGenResults = $stmt->fetchAll(PDO::FETCH_ASSOC);
     
     //find product creatives
      $sqlProduct = "SELECT DISTINCT(b.brand_id),adv.adv_id,c.type,c.creative_id, sum(c.price) as spend FROM 
brand b INNER JOIN advertiser adv
 ON adv.adv_id = b.adv_id
 INNER JOIN creative c ON c.brand_id = b.brand_id
 INNER JOIN category cat ON cat.brand_id = b.brand_id 
WHERE b.brand_id NOT IN (".$brandIds.")
 AND cat.main_category IN (".$category.") AND c.type = 'Product' AND c.price IS NOT NULL AND c.class != 'BRAND' GROUP by b.brand_id ORDER BY spend DESC LIMIT 5;";
     $stmt = $db->prepare($sqlProduct);
     $stmt->execute();
     $productResults = $stmt->fetchAll(PDO::FETCH_ASSOC);
     
     //find DR/Brand Dr creatives
      $sqlBrandDr = "SELECT DISTINCT(b.brand_id),adv.adv_id,c.type,c.creative_id, sum(c.price) as spend FROM 
brand b INNER JOIN advertiser adv
 ON adv.adv_id = b.adv_id
 INNER JOIN creative c ON c.brand_id = b.brand_id
 INNER JOIN category cat ON cat.brand_id = b.brand_id 
WHERE b.brand_id NOT IN (".$brandIds.")
 AND cat.main_category IN (".$category.") AND (c.class = 'DR' OR c.class = 'BRAND DR') AND c.price IS NOT NULL AND c.class != 'BRAND' GROUP by b.brand_id ORDER BY spend DESC LIMIT 5;";
     $stmt = $db->prepare($sqlBrandDr);
     $stmt->execute();
     $brandDrResults = $stmt->fetchAll(PDO::FETCH_ASSOC);
     
     //find long form creatives
      $sqlLongForm = "SELECT DISTINCT(b.brand_id),adv.adv_id,c.type,c.creative_id, sum(c.price) as spend FROM 
brand b INNER JOIN advertiser adv
 ON adv.adv_id = b.adv_id
 INNER JOIN creative c ON c.brand_id = b.brand_id
 INNER JOIN category cat ON cat.brand_id = b.brand_id 
WHERE b.brand_id NOT IN (".$brandIds.")
 AND cat.main_category IN (".$category.") AND c.length > 120 AND c.price IS NOT NULL AND c.class != 'BRAND' GROUP by b.brand_id ORDER BY spend DESC LIMIT 5;";
     $stmt = $db->prepare($sqlLongForm);
     $stmt->execute();
     $longFormResults = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
     array_push($compare_arr,$leadGenResults[0]['spend']);
     array_push($compare_arr,$productResults[0]['spend']);
     array_push($compare_arr,$brandDrResults[0]['spend']);
     array_push($compare_arr,$longFormResults[0]['spend']);
         
     
     $value = max($compare_arr);
     $key = array_search($value, $compare_arr);
     
     switch($key){
         case 0 : $adv_list = $leadGenResults; break;
         case 1 : $adv_list = $productResults; break;
         case 2 : $adv_list = $brandDrResults; break;
         case 3 : $adv_list = $longFormResults; break;
     }
     
     return $adv_list;
}

function findCreatives($advertiserId,$brandId){
   $sql = "SELECT type,class,creative_id FROM creative WHERE brand_id ='".$brandId."' AND class != 'BRAND';";
    try {
        $db = getConnection();
        $creative_details = execute_query_get_result($sql, 'FETCH_OBJ');
       /* $stmt = $db->prepare($sql);
        $stmt->bindParam("id", $user->id);
        $stmt->execute();
        $creative_details = $stmt->fetchAll(PDO::FETCH_OBJ);*/
                
                if($creative_details->type != '' || $creative_details->class != ''){
                    if($creative_details->type == 'Lead Gen'){
                        $countLeadGenQuery = "SELECT count(creative_id) as cnt FROM creative WHERE brand_id ='".$brandId."' AND type = 'Lead Gen' AND class != 'BRAND';";
                        $countLeadGenResult = execute_query_get_result($countLeadGenQuery, 'FETCH_OBJ');
                        /*$stmt = $db->prepare($countLeadGenQuery);
                        $stmt->execute();
                        $countLeadGenResult = $stmt->fetchAll(PDO::FETCH_OBJ);*/
                    }
                    
                    if($creative_details->type == 'Product'){
                        $countProductQuery = "SELECT count(creative_id)  as cnt FROM creative WHERE brand_id ='".$brandId."' AND type = 'Product' AND class != 'BRAND';";
                        $countProductResult = execute_query_get_result($countProductQuery, 'FETCH_OBJ');
                        /*$stmt = $db->prepare($countProductQuery);
                        $stmt->execute();
                        $countProductResult = $stmt->fetchAll(PDO::FETCH_OBJ);*/
                    }
                    
                    if($creative_details->class == 'DR' || $creative_details->class == 'BRAND DR'){
                        $countClassQuery = "SELECT count(creative_id) as cnt FROM creative WHERE brand_id ='".$brandId."' AND (class = 'BRAND DR' OR class = 'DR');";
                        $countClassResult = execute_query_get_result($countClassQuery, 'FETCH_OBJ');
                        /*$stmt = $db->prepare($countClassQuery);
                        $stmt->execute();
                        $countClassResult = $stmt->fetchAll(PDO::FETCH_OBJ);*/
                    }
                    $arrTest = array(
                        array( "Lead Gen" => 1, "b" => $countLeadGenResult ),
                        array( "Product" => 2, "b" => $countProductResult ),
                        array( "DR" => 3, "b" => $countClassResult )
                    );
                    
                    $value = maxValueInArray($arrTest, "b");
                }
        $db = null;
        echo json_encode(array('status'=>1, 'result'=>$wines));
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }   
}

function maxValueInArray($array, $keyToSearch)
{
    $currentMax = NULL;
    foreach($array as $arr)
    {
        foreach($arr as $key => $value)
        {
            if ($key == $keyToSearch && ($value >= $currentMax))
            {
                $currentMax = $value;
            }
        }
    }

    return $currentMax;
}
function getCatBrands(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    $from = $user->cat_id ? ', brand b, category ct' : '';
    $where = $user->cat_id ? 'and ct.brand_id = b.brand_id and b.brand_id = c.brand_id and ct.category_id = '.$user->cat_id : '';
    $operator = $user->type == 'short' ? '<= 120' : '> 120';
    $limit = $user->batch == -1 ? '' : "LIMIT $user->from, $user->batch";

    $sql = "select * from brands b, category c
            where c.brand_id = b.brand_id and category
            order by c.last_aired $limit;";
    try {
        $db = getConnection();
        $wines = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        //$stmt->bindParam("id", $user->id);
        $stmt->execute();
        $wines = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $db = null;
        echo json_encode(array('status'=>1, 'result'=>$wines));
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function UpdateSummaryLog(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $_SESSION['summary_log'] = $user->val;
    //$sql = "UPDATE configs SET value =  '".$user->val."' WHERE name = 'SUMMARY_TOGGLE'";
    try {
        $db = getConnection();
      //  $stmt = $db->prepare($sql);
      //  $stmt->execute();
        
        $db = null;
        echo json_encode(array('status'=>$user->val));
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}


function getParentCategoryName($category_id){
        $getCategoryName = "SELECT main_category,main_sub_category FROM category where category_id='".$category_id."'";
        $category_name = array();
        try {
        $db = getConnection();
        $category_name = execute_query_get_result($getCategoryName, 'FETCH_ASSOC');
        /*$stmt = $db->prepare($getCategoryName);
        $stmt->execute();
        $category_name = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
                
        }catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
        return $category_name;
}

function getRelCreatives(){
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    $limit = $user->batch == -1 ? '' : "LIMIT $user->from, $user->batch";
    $sql = "select c.* from creative c, related_creatives rc where rc.related_creative_id = c.creative_id and rc.creative_id = '".$user->id."' 
            order by creative_name $limit;";
    try {
        $db = getConnection();
        $wines = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->bindParam("id", $user->id);
        $stmt->execute();
        $wines = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $db = null;
        echo json_encode(array('status'=>1, 'result'=>$wines));
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }   
}

function findTooltips($wines){
    $db = getConnection();
    $short_brand = $long_brand = array();

    //find total airings
   foreach($wines as $wr1 => $wr2){
      if($wr2->length <= 120){
           array_push($short_brand,$wr2->brand_id);
       }else{
           array_push($long_brand,$wr2->brand_id);
       }
   }

   if(!empty($short_brand)){
       $short_brand_ids = implode(",",$short_brand);
   }

   if(!empty($long_brand)){
        $long_brand_ids = implode(",",$long_brand);
   }


    if(!empty($short_brand)){
        $sqlAirings = "SELECT parent_id,sum(nat_airings) as sum_nat_airings,sum(loc_airings) as sum_loc_airings FROM summary_short WHERE parent_id IN (".$short_brand_ids.") AND parent_type = 'brand' GROUP by parent_id";
        $short_airings = execute_query_get_result($sqlAirings, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sqlAirings);
        $stmt->execute();
        $short_airings = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    }

    if(!empty($long_brand)){
        $sqlAirings = "SELECT parent_id,sum(airings) as no_of_airings FROM summary_long WHERE parent_id IN (".$long_brand_ids.") AND parent_type = 'brand' GROUP by parent_id";
        $long_airings = execute_query_get_result($sqlAirings, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sqlAirings);
        $stmt->execute();
        $long_airings = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    }


    if(!empty($short_airings) || !empty($long_airings)){
        foreach($wines as $k => $v){
            if($v->length <= 120){
                foreach($short_airings as $b1 => $b2){
                        if($b2->parent_id == $v->brand_id){
                            $v->no_of_airings = $b2->sum_nat_airings+$b2->sum_loc_airings;
                            $v->no_of_airings = number_format($v->no_of_airings);
                        }
                }
            }else{
                if(!empty($long_airings)){
                    foreach($long_airings as $b1 => $b2){
                        if($b2->parent_id == $v->brand_id){
                            $v->no_of_airings = number_format($b2->no_of_airings);
                        }
                    }
                }
            }
        }

        return $wines;
 }         
}


function findToolTipsForCreatives($wines,$type){
    $db = getConnection();
    $creative_array = array();
    foreach($wines as $c1 => $c2){
        array_push($creative_array, $c2->creative_id);
    }

    if(!empty($creative_array)){
        $cretive_ids = implode(",",$creative_array);

     //$sqlAirings = "SELECT creative_id,count(airing_id) as no_of_airings FROM airings WHERE creative_id IN (".$cretive_ids.") AND length $operator GROUP by creative_id";
        if( $type == 'short'){
            $sqlAirings = "SELECT group_id,sum(nat_airings) as sum_nat_airings,sum(loc_airings) as sum_loc_airings FROM summary_short WHERE group_id IN (".$cretive_ids.") AND group_type = 'creative' GROUP by group_id";
        }else{
            $sqlAirings = "SELECT group_id,sum(airings) as no_of_airings FROM summary_long WHERE group_id IN (".$cretive_ids.") AND group_type = 'creative' GROUP by group_id";
        }
        $airings = execute_query_get_result($sqlAirings, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sqlAirings);
        $stmt->execute();
        $airings = $stmt->fetchAll(PDO::FETCH_OBJ);*/

        if( $type == 'short'){
            foreach($airings as $k => $v){
                $v->no_of_airings = $v->sum_nat_airings+$v->sum_loc_airings;
                $v->no_of_airings = number_format($v->no_of_airings);
            }
        }else{
            foreach($airings as $k => $v){
                $v->no_of_airings = number_format($v->no_of_airings);
            } 
        }

        foreach($wines as $c1 => $c2){
            foreach($airings as $a1 => $a2){
                if($c2->creative_id == $a2->group_id ){
                    $c2->no_of_airings = $a2->no_of_airings;
                }
            }
        }
    }
    
    return $wines;
        
}

function getCategoryList(){
     $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());

    //$sql_get_main_categories = sprintf(_SQL_GET_MAIN_CATEGORIES);

    try {
        /*$db = getConnection();
        $stmt = $db->prepare($sql_get_main_categories);
        $stmt->execute();
        $main_category_result = $stmt->fetchAll(PDO::FETCH_OBJ);
        for($intW=0; $intW < count($main_category_result); $intW++)
        {
            $category_id = $main_category_result[$intW]->category_id;
            $main_category_result[$intW]->subcategory = getSubCategoriesList($category_id);
        }*/
        //$db = null;

        $main_category_result = getAllCategories();

        //check for category tracking data
        $category_data_flag = false;
        if (!isset($_SESSION['tracking_data'])) {
            $tracking_data      = 'No Data';
        } else {
            $tracking_data      = $_SESSION['tracking_data'];
        }
        if($tracking_data != "No Data") {
            if(isset($tracking_data['category'])) {
                $cats           = $tracking_data['category'];
                if(count($cats) > 0) {
                    $category_data_flag = true;
                }
            } else {
                $category_data_flag = false;
            }
        } else {
            $category_data_flag = false;
        }

        echo json_encode(array('result'=>$main_category_result, 'status'=>(count($main_category_result)?1:2), 'category_data_flag'=>$category_data_flag, 'total_count' => count($main_category_result)));
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

    
function getSubCategoriesList($category_id){
    $sql_get_sub_categories = sprintf(_SQL_GET_SUB_CATEGORIES,$category_id);

    try {
        $db = getConnection();
        $wines = execute_query_get_result($sql_get_sub_categories, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql_get_sub_categories);
        $stmt->execute();
        $wines = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $db = null;
        return $wines;
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }   
     
}

function updateCreativeThumbnails() {
    $cronJob = new Slim_App_Crons_Thumbnails();
    echo json_encode($cronJob->updateCreativeThumb());
}


function getServer() {
    $server = 'http://localhost/drmetrix';
    return $server;
}

function forgotPasswdMail($email, $resetLink) {
    $subject = 'DRMetrix - Reset Password Link';
    $message = 'Hi,<br/><br/>';
    $message .= 'Click below link to reset your password:<br/><br/>';
    $message .= $resetLink . '<br/><br/>';
    $message .= 'Thank You.<br/>';
    $message .= 'Support Team';

    $headers = 'From: info@drmetrix.com' . "\r\n" .
                'MIME-Version: 1.0' . "\r\n" .
                'Content-type: text/html; charset=iso-8859-1' . "\r\n";

    require 'PHPMailer/class.phpmailer.php';

    try {
          $mail = new PHPMailer(); //New instance, with exceptions enabled

      $body = $message;
      $mail->IsSendmail();     
      $to = $email;
      $mail->AddAddress($to);
      $mail->addBCC('pravin.sapkal@v2solutions.com');
      $mail->addBCC('manisha.badwaik@v2solutions.com');
      $mail->addBCC('ashwini.rewatkar@v2solutions.com');
      $mail->addBCC('brent.peterson@drmetrix.com');
      $mail->addBCC('joseph.gray@drmetrix.com');

      $mail->SetFrom('info@drmetrix.com', 'DRMetrix');
      $mail->Subject  = $subject;
      $mail->AltBody    = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
      $mail->WordWrap   = 80; // set word wrap
      $mail->MsgHTML($body);
      $mail->IsHTML(true); // send as HTML
      $mail->Send();
    } catch (phpmailerException $e) {
    }

}

function checkIP(){
    $IP = $_SERVER['REMOTE_ADDR'];
    
    $select_sql = "SELECT * FROM authy_credentials WHERE IP = '".$IP."' AND end_date > '".standardDateTimeFormat("Y-m-d H:i:s")."'";
     
     try {
            $db = getConnection();
            $result = execute_query_get_result($select_sql, 'FETCH_OBJ');
            /*$stmt = $db->prepare($select_sql);
            $stmt->execute();
            $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
           
             if((!empty($result))){
                echo json_encode(array('status'=>1));
             }else{
                echo json_encode(array('status'=>0));
             }
     } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function getDayPartArray($day_short){
    $dow = $day_detail = array();

    $day_detail = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday');

    $day_list = str_split($day_short);

    foreach($day_list as $key =>$val){
        if($val == $day_detail[$key][0]){
            $dow[$day_detail[$key]] = substr($day_detail[$key], 0,3);
        }
    }
    $dow['total'] = 'total';
    return $dow;
}

function setUserLogs($user){
    $db = getConnection();
    $create_date = standardDateTimeFormat("Y-m-d H:i:s");
    $IP = $_SERVER['REMOTE_ADDR'];
    $user_agent = $_SERVER ['HTTP_USER_AGENT'];
    $sql = "INSERT INTO  `user_logs` SET user_id = '".$user[0]->user_id."', ip_address='".$IP."', user_agent='".$user_agent."', created_at ='".$create_date."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    inactiveUserLoginAlertEmail($user,$IP);
    $user_details['user_login_count'] = getUserLoginCount($user[0]->user_id);
    $user_info                       = getUserInfoById($user[0]->user_id);
    $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
    $user_details['user_last_login'] = isoDateFormatForZoho($create_date);
    APIManageZOHOContact('userLoginManage',$user_details);
}

function setLoginFailedLogs($data){
    $db = getConnection();
    $create_date = standardDateTimeFormat("Y-m-d H:i:s");
    $IP = $_SERVER['REMOTE_ADDR'];
    $sql = "INSERT INTO `login_failed_logs` SET username='".$data['username']."', password='".$data['password']."', user_id=".($data['user_id']>0 ? $data['user_id'] : 'NULL').", mobile='".$data['mobile']."', token='".$data['token']."', ip_address='".$IP."', msg='".$data['msg']."', created_at='".$create_date."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function getUserLoginDetials(){
    $db = getConnection();
    $sql = "SELECT      
                u.user_id,
                company_name, 
                ud.admin_id,
                u.username,
                u.client,
                u.account_owner,
                u.role,
                u.country_code,
                CONCAT(u.first_name,' ',u.last_name) as name,
                count(ul.user_id) as login_count,
                u.phone_number, 
                u.assistant_admin,
                IF(u.adsphere_authenticate ='1', 'Yes','No') as Adshphere_Authicated,
                IF(u.verify_date is null ,'No','Yes') as Authy_Authicated,
                u.last_login,
                u.status,
                IF(c.eula_flag = '1', 'Yes','No') as company_eula_flag,
                u.eula_ip,
                u.eula_datetime,
                IF(ud.admin_id is null, u.user_id,ud.admin_id) as SortingID
            FROM 
                user u 
            LEFT JOIN 
                admin_user ud on ud.user_id = u.user_id 
            LEFT JOIN 
                user m on m.user_id = ud.admin_id 
            LEFT JOIN 
                pricing pc on pc.user_id=u.user_id 
            LEFT JOIN 
                company c on c.id=pc.company_id 
            LEFT JOIN
                user_logs ul on ul.user_id = u.user_id
            GROUP BY 
                ul.user_id,u.user_id
            ORDER BY 
                SortingID,company_name DESC";

    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
   /* $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
    $final_array = array();
    foreach($result as $k => $v){
        if($v['role'] == 'superadmin'){
            $v['company_eula_flag'] = '-';            
        }
        if(!empty($v['admin_id'])){
            $sql = "SELECT c.company_name, c.eula_flag, u.status, u.client from user u INNER JOIN company c on c.id=u.company_id WHERE u.user_id = '".$v['admin_id']."'";
            $comp_name = execute_query_get_result($sql, 'FETCH_ASSOC');
            /*$stmt = $db->prepare($sql);
            $stmt->execute();
            $comp_name = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
            if(!empty($comp_name)){
                $v['company_name'] =  ''; $v['company_eula_flag'] = 'No'; 
                if(isset($comp_name[0]['company_name']))
                    $v['company_name'] = $comp_name[0]['company_name'];

                $v['client'] = $comp_name[0]['client'];//'-';

                if(isset($comp_name[0]['eula_flag']))
                    $v['company_eula_flag'] = $comp_name[0]['eula_flag'] ? 'Yes' : 'No';

                if($comp_name[0]['status'] == 'inactive'){
                     $v['status'] = $comp_name[0]['status'];
                }
                /*if(isset($comp_name[0]['status'])){
                    if($comp_name[0]['status'] == 'active'){
                         $v['status'] = $comp_name[0]['status'];
                    }else if($comp_name[0]['status'] == 'inactive'){
                         $v['status'] = $comp_name[0]['status'];
                    }
                }*/
            }
        }
       $final_array[] = $v;
    }
    return $final_array;
}
function userListAccessTypeUpdate($admin_id, $access_type, $monthly_cap){
    $db = getConnection();
    $sql  = "SELECT u.user_id FROM user as u INNER JOIN admin_user au ON au.user_id = u.user_id WHERE au.admin_id = '".$admin_id."'";    
    //$result = execute_query_get_result($sql, 'FETCH_NUM');
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_NUM);
    $user_list = array();
    foreach ($result as $key => $value) {
        $user_list[] = $value[0];
    }
    $list = implode(',',$user_list);
    $user_monthly_cap = 'NULL';
    if(!empty($monthly_cap)){
        $user_monthly_cap = $monthly_cap;
    }
    
    if(!empty($list)){
        $update = "UPDATE user SET access_type = '".$access_type."', monthly_cap = ".$user_monthly_cap." WHERE user_id IN (".$list.")";
        $stmt = $db->prepare($update);
        $stmt->execute();
    }
}

function updateSingleUserAccessType($admin_id,$user_id){
    $db = getConnection();
    $sql = "SELECT access_type, monthly_cap FROM user WHERE user_id = '".$admin_id."'";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);*/
    $user_monthly_cap = 'NULL';
    if(!empty($result[0]['monthly_cap'])){
        $user_monthly_cap = $result[0]['monthly_cap'];
    }

    $update = "UPDATE user SET access_type = '".$result[0]['access_type']."', monthly_cap = ".$user_monthly_cap." WHERE user_id = '".$user_id."'";
    $stmt = $db->prepare($update);
    $stmt->execute();
}

function userAccessInfo($type = NULL){
    $db = getConnection();
    $user_id = $_SESSION['user_id'];
    $sql = "SELECT access_type, monthly_cap FROM user WHERE user_id = '".$user_id."'";
    $result = execute_query_get_result($sql, 'FETCH_ASSOC');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC)*/;
    if(is_null($type)){
        $access = $result[0]['access_type'];
        echo json_encode(array('status'=>1, 'access'=>$access));
    }else{
        return $result;
    }
}

function updateDownloadCount(){
    $db = getConnection();
    $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : $_REQUEST['user_id'];
    $sql = "UPDATE user SET download_count = download_count + 1 WHERE user_id = '".$user_id."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function insertRecordCount($record_count,$date_range,$title){
    $db = getConnection();
    $user_id = $_SESSION['user_id'];
    $current_date = date('Y-m-d');
    $insert = "INSERT INTO data_tracking SET user_id = '".$user_id."', filter='".$date_range."', record_count='".$record_count."', created_date = '".$current_date."', file_name='".$title.'.xls'."'";   
    $stmt = $db->prepare($insert);
    $stmt->execute();

}

function getNetworksListWithFilters(){
    ini_set('memory_limit','2192M');
    // show( ini_get('memory_limit'));
    $data = $result = array();
    $network_arr = array();
    $nestedData=array();
    $requestData = $raw_data = $network_array = array();
    $all_programs = $program_brand  = $setUniqueAllPrograms = $checkedPrograms = $setAllPrograms = array();
    $db = getConnection();

    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $where_category = '';
    $_order_by      = ' n.network_alias ';
    $c              = urldecode($requestData['c']);
    $tab            = $requestData['tab'];
    $val            = $requestData['val'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $id             = ($tab == 'brand' || $tab == 'adv') ? $requestData['brand_id'] :  $requestData['creative_id'];
    $responseType   = "(".urldecode($requestData['responseType']).")";
    $spanish        = urldecode($requestData['spanish']);
    $lang_type      = $spanish == 0 ? '' : 'sp-';
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $join_category  = 'INNER JOIN categories cat ON (b.main_sub_category_id = cat.sub_category_id OR b.alt_sub_category_id = cat.sub_category_id)';
    $new_filter_opt = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $day_filter = $requestData['day'] !== 'all_day' ? 'AND d.start_weekday IN ('. urldecode($requestData['day']).')' : '';
    $hour_filter = $requestData['hour'] !== 'all_hour' ? 'AND d.start_hour IN ('. urldecode($requestData['hour']).')' : '';
    $dayparts_filter = $requestData['dayparts'] !== 'all_dayparts' ? 'AND d.gen_daypart_id IN ('. urldecode($requestData['dayparts']).')' : '';
    $network_filter = $requestData['network_ids'] !== '' ? 'AND d.network_id IN ('. urldecode($requestData['network_ids']).')' : '';
    $program_filter = $requestData['program_ids'] !== '' ? 'AND d.airing_id IN ('. urldecode($requestData['program_ids']).')' : '';
    $program_ids   = isset($requestData['program_ids']) ? urldecode($requestData['program_ids']) : '';

    if(!empty($cat)){
        $category= categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    }
    $conditions     = getFilterConditions($tab,$c);

    $params_fetch_networks['responseType']            = $responseType;
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['join_category']           = $join_category;
    $params_fetch_networks['where_category']          = $where_category;
    $params_fetch_networks['cr_type']                 = $conditions['cr_type'];
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['order_by']                = $_order_by;
    $params_fetch_networks['start_date']              = $sd;
    $params_fetch_networks['end_date']                = $ed;
    $params_fetch_networks['id']                      = $id;
    $params_fetch_networks['tab']                     = $tab;
    $params_fetch_networks['new_filter_opt']          = $new_filter_opt;
    $params_fetch_networks['program_ids']             = $program_ids;
    $params_fetch_networks['network_filter']          = $network_filter;
    $params_fetch_networks['custome_filter']          = $day_filter.$hour_filter.$dayparts_filter.$network_filter;
    $result  = get_query_result('__query_display_networks_list', $params_fetch_networks, 'FETCH_OBJ');

    $result2  = get_query_result('__query_display_network_programs_list', $params_fetch_networks, 'FETCH_ASSOC');
    if($result2){
        $i = 0;
        // foreach($result2 as $network_key => $network_value) {
        //     if(!multi_in_array($network_value['network_id'], $network_array)) {
        //         $network_array[$i]['dpi']               = $network_value['dpi'];
        //         $network_array[$i]['network_alias']     = $network_value['network_alias'];
        //         $network_array[$i]['network_code']      = $network_value['network_code'];
        //         $network_array[$i]['network_id']        = $network_value['network_id'];
        //         $network_array[$i]['network_name']      = $network_value['network_name'];
        //         $i++;
        //     }
        // }
        // $result = $network_array;
        foreach($result2 as $k => $v){
            $setAllPrograms[$v['program_id']]['network_id'] =  $v['network_id'];
            $setAllPrograms[$v['program_id']]['program']    =  $v['program'];
        }
    }
   

    foreach($setAllPrograms as $key => $value) {
        array_push($checkedPrograms,$value['program']);
    }
    
    $duplicated=null;
    $duplicateClass = [];
    uasort($setAllPrograms, "cmp");
    $checkedPrograms = array_unique($checkedPrograms);
    sort($checkedPrograms);
    if(!empty($result)){
        echo json_encode(array('resp_code'=>1, 'result'=>$result, 'programs'=>createSortableArrayForJquery($setAllPrograms), 'checkedPrograms' => $checkedPrograms, 'duplicate' => $duplicateClass));
    }else{
        echo json_encode(array('resp_code'=>0));
    }
    exit;

}
function multi_in_array($value, $array)
{
    foreach ($array AS $item)
    {
        if (!is_array($item))
        {
            if ($item == $value)
            {
                return true;
            }
            continue;
        }

        if (in_array($value, $item))
        {
            return true;
        }
        else if (multi_in_array($value, $item))
        {
            return true;
        }
    }
    return false;
}
  
function getNetworksList(){
    ini_set('memory_limit','2192M');
    // show( ini_get('memory_limit'));
    $data = $result = array();
    $network_arr = array();
    $nestedData=array();   
    $requestData = $raw_data = array();
    $network_array = array();
    $all_programs = $program_brand  = $setUniqueAllPrograms = $checkedPrograms = $setAllPrograms = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();       
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $where_category = '';
    $_order_by      = ' n.network_alias ';    
    $c              = urldecode($requestData['c']);  
    $tab            = $requestData['tab'];  
    $val            = $requestData['val'];
    $sd             = $requestData['sd'];
    $ed             = $requestData['ed'];
    $id             = $tab == 'brand' ? $requestData['brand_id'] :  $requestData['creative_id'];
    $responseType   = "(".urldecode($requestData['responseType']).")";
    $spanish        = urldecode($requestData['spanish']);
    $lang_type      = $spanish == 0 ? '' : 'sp-';
    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';
    $network_ids    = isset($requestData['network_ids']) ? $requestData['network_ids'] : '';  
    $program_ids    = isset($requestData['program_ids']) ? urldecode($requestData['program_ids']) : '';  
    $join_category  = 'INNER JOIN categories cat ON (b.main_sub_category_id = cat.sub_category_id OR b.alt_sub_category_id = cat.sub_category_id)';
    $new_filter_opt = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $program_id_array =  isset($requestData['program_ids']) ? explode(",",urldecode($requestData['program_ids'])) : [];  
    $networkIds =  isset($requestData['network_ids']) ? urldecode($requestData['network_ids']) : '';
    $checkedProgramArray = [];
    
    $program_array = [];
    if(!empty($cat)){
        $category= categorySqlCall($catIn);
        $join_category  = $category['join'];
        $where_category = $category['where'];
    }    
      
    $conditions     = getFilterConditions($tab,$c);
        
    $params_fetch_networks['responseType']            = $responseType;
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['join_category']           = $join_category;
    $params_fetch_networks['where_category']          = $where_category;
    $params_fetch_networks['cr_type']                 = $conditions['cr_type'];
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['order_by']                = $_order_by;
    $params_fetch_networks['start_date']              = $sd;
    $params_fetch_networks['end_date']                = $ed;
    $params_fetch_networks['id']                      = $id;
    $params_fetch_networks['tab']                     = $tab;
    $params_fetch_networks['new_filter_opt']          = $new_filter_opt;
    $params_fetch_networks['network_filter']          = !empty($networkIds) ? 'AND d.network_id IN ('. $networkIds.')' : '';
    $params_fetch_networks['program_filter']          = isset($requestData['program_ids']) ? 'AND d.program_id IN ('. urldecode($requestData['program_ids']).')' : '';
    $params_fetch_networks['program_ids']             = isset($requestData['program_ids']) ?  urldecode($requestData['program_ids']) : '';
    $result  = get_query_result('__query_display_networks_list', $params_fetch_networks, 'FETCH_OBJ');

    $result2  = get_query_result('__query_display_network_programs_list', $params_fetch_networks, 'FETCH_ASSOC');
    $result3 = [];
    if(!empty($program_ids)) {
        $result3  = get_query_result('__query_checked_programs_list', $params_fetch_networks, 'FETCH_ASSOC');
    } 
    if($result2){
        $i = 0;
        // foreach($result2 as $network_key => $network_value) {
        //         if(!multi_in_array($network_value['network_id'], $network_array)) {
        //             $network_array[$i]['dpi']               = $network_value['dpi'];
        //             $network_array[$i]['network_alias']     = $network_value['network_alias'];
        //             $network_array[$i]['network_code']      = $network_value['network_code'];
        //             $network_array[$i]['network_id']        = $network_value['network_id'];
        //             $network_array[$i]['network_name']      = $network_value['network_name'];
        //             $i++;
        //     }
        // }
        // $result = $network_array;
        foreach($result2 as $k => $v){
            $setAllPrograms[$v['program_id']]['network_id'] =  $v['network_id'];
            $setAllPrograms[$v['program_id']]['program']    =  $v['program'];
        }
    }


    if($result3){
        foreach($result3 as $k => $v){
                array_push($checkedProgramArray,$v['program']);
        }
    }

    foreach($setAllPrograms as $key => $value) {
        if(!empty($program_ids)) {
            if(in_array($value['program'],$checkedProgramArray )) {
                array_push($checkedPrograms,$value['program']);
            }
        } else {
            array_push($checkedPrograms,$value['program']);
        }
    }
    
    $duplicated=null;
    $duplicateClass = [];
    uasort($setAllPrograms, "cmp");
    $checkedPrograms = array_unique($checkedPrograms);
    sort($checkedPrograms);
    if(!empty($result)){                
        echo json_encode(array('resp_code'=>1, 'result'=>$result, 'programs'=>createSortableArrayForJquery($setAllPrograms), 'checkedPrograms' => $checkedPrograms, 'duplicate' => $duplicateClass));
    }else{
        echo json_encode(array('resp_code'=>0));
    }
    exit;

}

function getCreativeNetworksList(){
    $requestData = $raw_data = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();       
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }    
    
   /* $params_fetch_networks['responseType']            = $responseType;
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['join_category']           = $join_category;
    $params_fetch_networks['where_category']          = $where_category;
    $params_fetch_networks['cr_type']                 = $conditions['cr_type'];
    $params_fetch_networks['summary_calendar_type']   = $date_filters['summary_calendar_type'];
    $params_fetch_networks['calendar_id']             = $calendar_id;
    $params_fetch_networks['spanish']                 = $spanish;
    $params_fetch_networks['order_by']                = $_order_by;
    $params_fetch_networks['start_date']              = $sd;
    $params_fetch_networks['end_date']                = $ed;
    $params_fetch_networks['id']                      = $id;
    $params_fetch_networks['tab']                     = $tab;
        
$result  = get_query_result('__query_display_networks_list', $params_fetch_networks, 'FETCH_OBJ');
*/

    
    $sql = "SELECT n.network_alias, a.network_code FROM `airings` as a INNER JOIN network n ON n.network_code = a.network_code WHERE a.`creative_id` = '".$requestData['creative_id']."' AND a.`start` >= '".$requestData['sd']." 00:00:00' And end <= '".$requestData['ed']." 23:59:59' GROUP BY a.network_code ORDER BY n.network_alias";
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    if(!empty($result)){                
        echo json_encode(array('resp_code'=>1, 'result'=>$result));
    }else{
        echo json_encode(array('resp_code'=>0));
    }
}

function getAllCreativeAiringWithBrakeType($cid,$sd,$ed){
    $db = getConnection();
    $sql= "SELECT a.network_code, count(a.airing_id) as airings, sum(a.length), a.breakType FROM `airings` as a INNER JOIN network n ON n.network_code = a.network_code WHERE a.`creative_id` = '".$cid."' AND a.`start` >= '".$sd." 00:00:00' And end <= '".$ed." 23:59:59' group by a.network_code, breakType";
   $result = execute_query_get_result($sql, 'FETCH_OBJ');
   /* $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $result;
}

function getAllCreativesArings($cid,$sd,$ed,$type,$orderBy = ''){
     $db = getConnection();
     $field = '';
    if($type == 'count'){
        $group_by = ' group by a.network_code';
    }else if($type == 'breakType'){
        $field = " ,a.breakType";
        $group_by = ' group by a.network_code, a.breakType';
    }else if($type == 'grid'){
        $group_by = ' group by a.network_code '.$orderBy;
    }   

    $sql = "SELECT n.network_alias, a.network_code, count(a.airing_id) as airing_count, sum(a.length) as duration ".$field." FROM `airings` as a INNER JOIN network n ON n.network_code = a.network_code WHERE a.`creative_id` = '".$cid."' AND a.`start` >= '".$sd." 00:00:00' And end <= '".$ed." 23:59:59' ".PREVIOUSDATE." AND start_year IS NOT NULL AND start_weekday IS NOT NULL AND start_hour IS NOT NULL ".$group_by;
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $result;    
}

function detailExportReport(){
    ini_set('memory_limit','2048M');
    $requestData = $raw_data = array();
    
    $db = getConnection();
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();    
    $set_one = explode('&', $query_string);
    
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $networks       = is_array($_POST['networks']) ? $_POST['networks'] : urldecode($requestData['networks']) ;
    $program_ids    = isset($_POST['programs_ids']) ? urldecode($_POST['programs_ids']) : '';
    $hours          = $_POST['hod'] ;
    $days           = $_POST['dow'] ;
    $dayparts       = $_POST['dayparts'] ;
    $network_ids    = $_POST['network_id'];
    $network_string = is_array($networks) ? implode_call($networks, true) : $networks;
    $network_id     = is_array($network_ids) ? implode_call($network_ids, true) : $network_ids;
    $day_string     = is_array($days) ? implode_call($days)     : $days;
    $hours_string   = is_array($hours)    ? implode_call($hours)    : $hours;
    $dayparts_string= is_array($dayparts)    ? implode_call($dayparts)    : $dayparts;
    if ($requestData['timespan'] == 'lifetime'){
        $lifetime = getLifetimeDetails();
        $requestData['from_date'] = $lifetime['start_date'];
        $requestData['to_date'] = $lifetime['end_date'];
    }

    $date_range     = urldecode($requestData['date_range_str']);
    $creative_duration = $requestData['creative_duration'];
    $new_filter_opt             = isset($requestData['new_filter_opt']) ? $requestData['new_filter_opt'] : 'none';
    $classification = urldecode($requestData['c']);
    $cat = rtrim(urldecode($requestData['cat_id']),",");
    $cat = rtrim($cat,"all,");
    $catIn = '('.$cat.')';

    $brand_classification  = getBrandClassification($classification,$creative_duration);

    if(!is_array($networks) && $networks != 'all_networks'){
       $network_string = "'".getNetworkCodeByAlias($networks)."'";
    }
    
    if ($requestData['timespan'] == 'lifetime'){
        $lifetime = getLifetimeDetails();
        $requestData['from_date'] = $lifetime['start_date'];
        $requestData['to_date'] = $lifetime['end_date'];
    }
   
    // if($requestData['cat_id'] != 'all'){
    //     $category = categorySqlCall(trim(urldecode($requestData['cat_id']), ',)'));
    //     $params_excel_export['category_condition'] = $category['where_string'];
    // } else {
    //     $params_excel_export['category_condition'] = '';
    // }

    $cat            = rtrim(urldecode($requestData['cat_id']),",");
    $cat            = rtrim($cat,"all,");
    $catIn          = '('.$cat.')';

    $params_excel_export['category_condition'] = $requestData['cat_id'] == 'all' ? '' : ' AND ( b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn. ')';
    
    if (isset($requestData['responseType'])){
        $params_excel_export['responseType_condition'] = ' AND (' . urldecode($requestData['responseType']) .") ";
        $params_excel_export['responseType']           = urldecode($requestData['responseType']);
    } else {
        $params_excel_export['responseType_condition'] = $params_excel_export['responseType'] = '';
    }
    
    $date_range = urldecode($requestData['date_range_str']);
    $formatted_date1 = str_replace(' - ', ' ',$date_range);
    
    if ($requestData['inc_cmw'] == 1) {
        $params =       [];
        $result        = get_query_result('__query_get_current_media_week', $params, 'FETCH_OBJ');
      
        $params_excel_export['current_sd']  = $result[0]->media_week_start;
        $params_excel_export['current_ed']  = date('Y-m-d', strtotime('+1 day'));
        
        if ($requestData['day_type'] == 'broadcast') {
            $params_excel_export['current_sd'] = $params_excel_export['current_sd']. ' 06:00:01';
            $params_excel_export['current_ed'] =  $params_excel_export['current_ed']. ' 05:59:59';
        }else{
            $params_excel_export['current_sd'] = $params_excel_export['current_sd']. ' 00:00:00';
            $params_excel_export['current_ed'] =  $params_excel_export['current_ed']. ' 23:59:59';
        }
    }
    
    $sd = explode('/',urldecode($requestData['from_date']));
    $ed = explode('/',urldecode($requestData['to_date']));
    $from_date  = $sd[2].'-'.$sd[0].'-'.$sd[1];
    $to_date    = $ed[2].'-'.$ed[0].'-'.$ed[1];

    $params_excel_export['from_date'] = $from_date;
    $params_excel_export['to_date']   = $to_date;
 
    if ($requestData['day_type'] == 'broadcast') {
        $to_date = date('Y-m-d', strtotime($to_date . " +1 day"));
    }
    
    if ($requestData['day_type'] == 'broadcast') {
        $start_column = 'IF(TIME(d.start) BETWEEN "00:00:00" AND "06:00:00", d.start - INTERVAL 1 DAY, d.start) as start';
        $end_column = 'IF(TIME(d.end) BETWEEN "00:00:00" AND "06:00:00", d.end - INTERVAL 1 DAY, d.end) as end';
                       
        $from_date  = $from_date . ' 06:00:00';        
        $to_date    = $to_date . ' 05:59:59';
       
    } else {
        $start_column = 'd.start';
        $end_column = 'd.end';        
        $from_date  = $from_date . ' 00:00:00';
        $to_date    = $to_date . ' 23:59:59';
    }

    if($requestData['screen'] == 'three'){
        $params_excel_export['breaktype'] = '';

        if($requestData['c'] > 5){
            //only to revert check condition
        } else {
            $breaktype      = urldecode($requestData['breaktype']);
            if($breaktype == '#cd3b36'){
                $params_excel_export['breaktype'] = 'N';
            }else if($breaktype == '#3064a0'){
                $params_excel_export['breaktype'] ='L';
            }
        }
        if(isset($requestData['dp_day']) && !empty($requestData['dp_day'])){
            $rosDay     = urldecode($requestData['dp_day']);
            $rosDay     = explode('-',$rosDay);
            $rosDay     = substr($rosDay[0],0,1).'-'.substr($rosDay[1],0,1);
        }else{
            $rosDay     = '';
        }
        if(isset($requestData['dp_time']) && !empty($requestData['dp_time'])){
            $rosTime    = urldecode($requestData['dp_time']);
            $rosTime    = explode('-',$rosTime);
            $rosTime1   = explode(' ', $rosTime[0]);
            $rosTime2   = explode(' ', $rosTime[1]);
            
            $rosTime_new1 = explode(':', $rosTime1[0]);
            $rosTime_new2 = explode(':', $rosTime2[1]);
            
            $rosTime    = $rosTime_new1[0].''.substr($rosTime1[1],0,1).'-'.$rosTime_new2[0].''.substr($rosTime2[2],0,1);
            
        }else{
            $rosTime    = '';
        }
        if($requestData['report_length'] == 'short'){
            $params_excel_export['name'] = urldecode($requestData['name']).' - '.urldecode($requestData['networks']).' - '.$rosDay.' '.$rosTime;
        }else{
            $params_excel_export['name'] = urldecode($requestData['name']).' - '.urldecode($requestData['networks']);
        }
    }elseif($requestData['screen'] == 'two'){
        $breaktype      = isset($requestData['breaktype']) ? $requestData['breaktype'] : '';
        $params_excel_export['breaktype'] =''; // we will not require breaktype on screen 2
        
        $params_excel_export['name'] = urldecode($requestData['name']).' - '.urldecode($requestData['networks']);
    }else{
        $params_excel_export['breaktype'] ='';
        $params_excel_export['name'] = urldecode($requestData['name']);
    }
    

    $excel_B1_cell_name = $params_excel_export['name'];
    if($requestData['screen'] == 'two' || $requestData['screen'] == 'three'){
        $title_name = getBrandCreativeName($requestData['ssvbi'], $requestData['ssvci']);
        $creative_name='';
        if(isset($title_name['creative_name'])){
            $creative_name = " | Creative - ".$title_name['creative_name'];
            $requestData['excel_for'] = "creative";
            $requestData['excel_for_id'] = $requestData['ssvci'];
        }
        $excel_B1_cell_name = "Brand - ".$title_name['brand_name']." | Network - ".urldecode($requestData['ssvnc']).$creative_name;
    }
    
    $id_condition = " c.{$requestData['excel_for']}_id = {$requestData['excel_for_id']}";    
    
    $params_excel_export['spanish']             = urldecode($requestData['spanish']);
    $params_excel_export['user_id']             = $user_id = $_SESSION['user_id'];
    $params_excel_export['requested_on']        = standardDateTimeFormat('Y-m-d H:i:s');
    $params_excel_export['id_condition']        = $id_condition;
    $params_excel_export['report_length_condition'] = ($creative_duration != 'all_short_duration' && !isset($creative_duration)) ? ($requestData['report_length'] == 'short')  ? ' AND a.length <= ' . LENGTH : ' AND  a.length > ' . LENGTH : '';
    $params_excel_export['day_type']            = $requestData['day_type'];
    $params_excel_export['timespan']            = $requestData['timespan'];
    $params_excel_export['report_length_type']  = $requestData['report_length'];
    $params_excel_export['report_length']       = $requestData['report_length'];
    $params_excel_export['excel_for']           = $params_excel_export['area'] = $requestData['excel_for'];
    $params_excel_export['excel_for_id']        = $requestData['excel_for_id'];
    $params_excel_export['report_type']         = $requestData['report_type'];
    $params_excel_export['from_date_condition'] = $from_date; 
    $params_excel_export['to_date_condition']   = $to_date;
    $params_excel_export['inc_cmw']             = $requestData['inc_cmw'];
    $params_excel_export['dow']                 = 'DATE_FORMAT(d.start_date, "%a")';
    $params_excel_export['start_column']        = $start_column;
    $params_excel_export['end_column']          = $end_column;
    $params_excel_export['classification']      = $classification;
    $params_excel_export['brand_classification']= $brand_classification['brand_classification'];
    $params_excel_export['new_filter_opt']      = $new_filter_opt;
    $params_excel_export['program_ids']         = $program_ids;
    
    if (isset($requestData['screen']) && $requestData['screen'] != '') {
        $params_excel_export['screen']          = $requestData['screen'];
    }
    else{
        $params_excel_export['screen']          = '';
    }
    
    
    if (isset($requestData['count']) && $requestData['count'] == 1) {
        $params_excel_export['count']               = 1;
    } else {
        $params_excel_export['count']               = 0;
    }
    
    $params_excel_export['date_range_str']      = $formatted_date1;
    $params_excel_export['networks']            = $network_string;
    $params_excel_export['network_ids']         =  $params_excel_export['network_id'] = $network_id;
    $params_excel_export['hours']               = $hours_string;
    $params_excel_export['days']                = $day_string;
    $params_excel_export['dayparts']            = $dayparts_string;
    $params_excel_export['email_alert']         = $requestData['check_email_alert'];
    $params_excel_export['inc_cmw']             = $requestData['inc_cmw'];
    $params_excel_export['rosDayTime']          = isset($requestData['rosDayTime']) ? urldecode($requestData['rosDayTime']) : '';
    //$params_excel_export['breaktype']           = $requestData['breaktype'];

    $requestData['network_ids']                 = str_replace("'","",$network_string);
    $requestData['hod']                         = $hours_string;
    $requestData['dow']                         = $day_string;
    $requestData['dayparts']                    = $dayparts_string;
    $requestData['brand_id']                    = $requestData['excel_for_id'];
    $requestData['type']                        = $requestData['report_type'];
    $requestData['sd']                          = $params_excel_export['sd'] = date_format(new DateTime(urldecode($requestData['from_date'])),"Y-m-d");
    $requestData['ed']                          = $params_excel_export['ed'] = date_format(new DateTime(urldecode($requestData['to_date'])),"Y-m-d");
    $requestData['category_ids']                = $_REQUEST['cat_id'];
    $requestData['media_date_range']            =  addslashes($_REQUEST['date_range_str']);
    $requestData['header_text']                 = $params_excel_export['name'];
    $requestData['email_alert']                 = $requestData['check_email_alert'];
    $requestData['responseType']                = urldecode($requestData['responseType']);

    $params_excel_export['brand_id']             = $requestData['brand_id'];

    if ($requestData['timespan'] == 'lifetime'){
        $lt_date = explode(' - ',$_REQUEST['date_range_str']);
        $requestData['media_date_range'] =  "Lifetime - ".$requestData['from_date'] .' thru '.$requestData['to_date'];//$lt_date[1];
    }else{
        $requestData['media_date_range'] =  addslashes($_REQUEST['date_range_str']);
    }

    $params_excel_export['count']               = 1;
    if ($requestData['report_type'] == 'summary') {
        $rows  = get_query_result('__query_excel_export_summary', $params_excel_export, 'FETCH_ASSOC');
    } elseif ($requestData['report_type'] == 'airing_detail') {
        $rows  = get_query_result('__query_excel_export_airing', $params_excel_export, 'FETCH_ASSOC');
    }
  
    if (count($rows) < 1) {
        $no_of_rows = 0;
    } else {
        if ($params_excel_export['count'] == 1) {
            $no_of_rows = $rows[0]['count'];
        } else {
            $no_of_rows = count($rows);
        }
    }
    $params_excel_export['count']               = 0;
    if ($requestData['report_type'] == 'summary') {
        $query = __query_excel_export_summary($params_excel_export);
        if(($requestData['area'] == 'brand' || $requestData['area'] == 'adv' || $requestData['area'] == 'creative') && $requestData['screen'] == 'one' ){
            $query_net = __query_excel_export_summary_network($params_excel_export);
            $query = $query.'==='.$query_net;
            $query_programs = __query_get_programs_view_for_network($params_excel_export);
            $query = $query.'==='.$query_programs;
        }
       
    } elseif ($requestData['report_type'] == 'airing_detail') { 
        $query = __query_excel_export_airing($params_excel_export);
    }
    $requestData['no_of_rows'] = $no_of_rows;
    
    $requestData['query']      = $query;
    
    if ($no_of_rows < MAX_NO_OF_RECORDS_FOR_EXCEL) {
        $array['size'] = 'small';
    } else {
        $array['size'] = 'large';
    }
    
   $params_excel_export['no_of_records']    = $no_of_rows;
   $params_excel_export['network_ids']      = trim($network_string,"'");
   $params_excel_export['rosDay']           = '';
   $params_excel_export['rosTime']          = '';

   $array['file_name']  = getFileNameFromExcelReportTables($params_excel_export);

    if (isset($requestData['count']) && $requestData['count'] == 1) {
        echo json_encode($array); 
        return;
    }
    
    $requestData['status']      = 'queued';

   // $find       = array("{", "%7B", "}", "%7D", "'");
    $file_name = urlDecode($requestData['filename']);
    $file_name = cleanFileName($file_name);
   // $file_name = str_replace($find, "", $file_name);
   
    //  $requestData['file_path']   = NULL;
    $requestData['file_path']   = '{'.(addslashes($file_name)).'}' ;
    $requestData['progress']    = 0;
    $requestData['task_initiated_on'] = '0000-00-00 00:00:00';
    $requestData['task_completed_on'] = '0000-00-00 00:00:00';

   // $db_obj = addExcelExportInfo($requestData);
    //$last_insert_export_id = $db_obj->lastInsertId();

   // $array['last_inserted_expord_id'] = $last_insert_export_id;
    addExcelExportInfo($requestData);
    updateDownloadsCountInZoho($user_id);

    if (isset($requestData['ask_alt']) && $requestData['ask_alt'] != 2) {
        updateDontAskMe($requestData['ask_alt']);
    }
    echo json_encode($array); 
}

function excelVideo(){
    $refine_params = $excelInfo = array();
    $request = Slim::getInstance()->request();
    $user = json_decode($request->getBody());
    $decode = base64_decode($user->adid);
    parse_str($decode, $output);
    $get_param = explode('&',$decode);
    $replaced  = 0;
    // $creative_id = explode('=',$get_param[0]);
    // $airing_id = explode('=',$get_param[1]);

    $creative_id = $output['creative_id'];
    $airing_id   = $output['airing_id'];
    $excel_id    = isset($output['excel_id']) ? $output['excel_id'] : '';

    if($excel_id != '' && $excel_id != 0) {
        $excelInfo   = getExcelInformation($excel_id);
    }
    
    $excel_date  = $output['date'];
    // $get_class = getCreativeClassificationType($creative_id[1]);
    $get_class = getCreativeClassificationType($creative_id);
    // $video = $creative_id[1];  
    $video = $creative_id;  
    // $actule_airing_id = $airing_id[1];
    $actule_airing_id = $airing_id;
    $msg = 'This is a sample video and not specific to network.';
    $downloadable = 1;
    $display_page = $displayBrandCreativeName = $refine_page_str = '';
    $company_info = [];
    if(isset($_SESSION['company_id'])){
        $company_info = getCompanyInfoById($_SESSION['company_id']);
    }
    // if(isset($get_param[3])){
        // $page           = explode('=',$get_param[3]);
        // $display_page   = $page[1];
        if (array_key_exists("page",$output)) {
            $display_page   = $output['page'];
        }
        
    // }
    if($display_page != 'Thumbnail') {
        $getAdvertiserCompanyInfoSql = "SELECT adv.adv_id, adv.zoho_account_id, downloadable FROM airings a INNER JOIN brand b on a.brand_id = b.brand_id INNER JOIN advertiser adv ON adv.adv_id = b.adv_id WHERE a.airing_id = ".$creative_id;
        $getAdvertiserCompanyInfo    = execute_query_get_result($getAdvertiserCompanyInfoSql);
        if(!empty($getAdvertiserCompanyInfo)) {
            if(!empty($company_info)) {
                if($getAdvertiserCompanyInfo[0]['zoho_account_id'] == $company_info[0]->zoho_account_id){
                    $downloadable = 1;
                } else {
                    $downloadable = $getAdvertiserCompanyInfo[0]['downloadable'];
                }
            }else{
                $downloadable   = $getAdvertiserCompanyInfo[0]['downloadable'];
            }
        }
    }
  
    // if(isset($get_param[2])){
    if (array_key_exists("date",$output) && isset($output['date'])) {
        $c_date = time();//strtotime(date('m-d-Y'));
        // $e_date = explode('=',$get_param[2]); //strtotime(date('m-d-Y', $get_param[2]));
        // $datediff = $c_date - $e_date[1];
        $datediff = $c_date - $output['date'];
        $day_used = floor($datediff/(60*60*24));
        if($day_used < 30 ){
            // if( isset($get_param[3])) {
            //     $refine_page = explode('=',$get_param[3]);
            //     $refine_page_str = $refine_page[1];
            // }
            if (array_key_exists("page",$output)) {
                $refine_page_str   = $output['page'];
            }
            if(isset($output['network_code']) && $display_page != 'Thumbnail' && $refine_page_str != 'refine_page'){
                if($user->optid == 1){                    
                    //if($day_used < 10){                        
                        $final_str = '';
                        $network_code = explode('=',$get_param[4]);
                        $for_clipboard = base64_decode($network_code[1]);
                        $network_code_arr = explode(',',base64_decode($network_code[1]));
                        foreach ($network_code_arr as $key => $value) {
                            $final_str .= "'".addslashes($value)."',";
                        }
                        $network_code = rtrim($final_str, ',');
                        $tab = 'ranking';
                        if(is_array($network_code) && count($network_code) > 1){
                            $tab = 'network';

                        }
                        $get_video_id = getCreativeVideoId($creative_id,$network_code,$tab); 
                        $video= base64_encode("creative_id=".$creative_id."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($for_clipboard));
                        $url="http://".HOST.'/drmetrix/video/'.$video.'?video=1';
                        $link_title = 'Video';
                        if(!empty($get_video_id)){
                            $video = $get_video_id[0]->airing_id;
                            $datetime = explode(' ',$get_video_id[0]->start);
                            $date = explode('-',$datetime[0]);
                            $time = explode(':',$datetime[1]);
                            $msg = "Video captured on ".$get_video_id[0]->network_alias." on calendar day  ".$date[1]."/".$date[2]."/".substr($date[0], -2)." at ".date('h:i A',strtotime($get_video_id[0]->start)) .' '.'ET';
                            $copyToClipboardText        = 'Brand: '.$get_video_id[0]->brand_name. PHP_EOL . 'Creative: '.$get_video_id[0]->creative_name . ' - '.$get_video_id[0]->length.' sec' .PHP_EOL . 'Link: '.$url;

                            $name_array = array('brand_name' => $get_video_id[0]->brand_name , 'creative_name' => $get_video_id[0]->creative_name);
                            $displayBrandCreativeName   = retreiveBrandCreativeName($name_array);

                        }
                    //}
                    $json_a = retreiveStreamingUrl($video);
                    $json_a = forCreativeVideo($json_a, $get_video_id, $creative_id); 
    
                    if(isset($json_a["msg"]))
                        $msg = $json_a["msg"];

                    $stream = $json_a["html5_streaming_url"];
                    echo json_encode(array('status'=>3, 'stream'=> $stream,'ctype'=>$get_class[0]->class,'msg'=>$msg,'url'=> $copyToClipboardText,'adid'=> $creative_id, 'downloadable' =>$downloadable, 'displayNames' => $displayBrandCreativeName));
                }
            }else{
                // if(isset($get_param)empty($refine_params)) {
                    if( $refine_page_str == 'refine_page') {
                        // $refine_page = explode('=',$get_param[3]);
                        // if($refine_page == 'refine_page') {
                            $refine_by = $output['refine_by'];
                            $refine_search = $output['search_by_tfn'];
                            // $refine_by     = $refine_by == '800' ? 'tfn_num' : 'url';
                            $refine_params  = array('page' => $refine_page_str, 'refine_by' => $refine_by, 'search_by_tfn' => $refine_search);
                            $refine_params['replaced'] = 0;
                            if($refine_by  == '800') {
                                $refine_filter_opt_text_replaced    = getNumbersForAlphabets($refine_search);
                                if($refine_search != $refine_filter_opt_text_replaced) {
                                    $refine_params['replaced'] = 1;
                                    $refine_search = $refine_filter_opt_text_replaced;
                                }
                            }
                            $refine_array= getRefineTextWithStringFilters($refine_search, $refine_params['replaced']);
                            $refine_params['where'] = ' AND a.verified = 1 AND a.'.$refine_array['colName'] .' LIKE "%'.$refine_array['refine_filter_opt_text'].'%"';
                        }
                    // }
                // }
                $airing_info = getAiringInfoById($airing_id, $refine_params);
                $sub_msg = '';
                if(!empty($airing_info['result'])){
                    $airing_id = $airing_info['result'][0]->airing_id;
                    $datetime = explode(' ',$airing_info['result'][0]->start);
                    $broadcast_datetime = explode(' ',$airing_info['result'][0]->broadcast_start);
                    $date = explode('-',$datetime[0]);
                    $broadcast_date = explode('-',$broadcast_datetime[0]);
                    if($airing_info['process'] != 1){
                        if($airing_info['process'] == 2)
                            $sub_msg = 'This is a sample video from the same network'.'</br>';
                        else
                            $sub_msg = $msg.'</br>';
                    }
                    if(!empty($excelInfo)) {
                        if($excelInfo['day_type'] == 'broadcast') {
                            $display_message = ' broadcast day '.$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2) ;
                        } else {
                            $display_message = ' calendar day '.$date[1]."/".$date[2]."/".substr($date[0], -2) ;
                        }
                    } else {
                        if(empty($refine_params)) { //refine log page
                            // if($excelInfo['day_type'] == 'broadcast') {
                            $display_message = ' broadcast day '.$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2) ;
                        } else { //network log page
                            $display_message = ' calendar day '.$date[1]."/".$date[2]."/".substr($date[0], -2) ;
                         }
                    }
                    // if(empty($refine_params)) { //refine log page
                    //     // if($excelInfo['day_type'] == 'broadcast') {
                    //     $display_message = ' broadcast day '.$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2) ;
                    // } else { //network log page
                    //     $display_message = ' calendar day '.$date[1]."/".$date[2]."/".substr($date[0], -2) ;
                    // }
                    // }
                    $json_a = retreiveStreamingUrl($airing_id);
                    $json_a = forCreativeVideo($json_a, $airing_info, $creative_id);
                    $video= base64_encode("creative_id=".$creative_id."&airing_id=".$actule_airing_id."&date=".time());
                    if(!empty($excelInfo)) {
                        $video = base64_encode("creative_id=".$creative_id."&airing_id=".$actule_airing_id."&date=".time()."&excel_id=".$excel_id);
                    }
                    if(!empty($excelInfo) && !empty($refine_params)) {
                        $video = base64_encode("creative_id=".$creative_id."&airing_id=".$actule_airing_id."&date=".time()."&excel_id=".$excel_id."&page=refine_page&refine_by=".$output['refine_by']."&search_by_tfn=".$output['search_by_tfn']);
                    }
                    if(empty($excelInfo) && !empty($refine_params)) {
                        $video = base64_encode("creative_id=".$creative_id."&airing_id=".$actule_airing_id."&date=".time()."&page=refine_page&refine_by=".$output['refine_by']."&search_by_tfn=".$output['search_by_tfn']);
                    }

                    $url="http://".HOST.'/drmetrix/video/'.$video.'?video=1';
                    $msg = " captured on ".$airing_info['result'][0]->network_alias." on ".$display_message. " at ".date('h:i A',strtotime($airing_info['result'][0]->start)) .' '.'ET';
                    $copyToClipboardText        = 'Brand: '.$airing_info['result'][0]->brand_name. PHP_EOL . 'Creative: '.$airing_info['result'][0]->creative_name . ' - '.$airing_info['result'][0]->length.' sec' .PHP_EOL . 'Link: '.$url;

                    $name_array = array('brand_name' => $airing_info['result'][0]->brand_name , 'creative_name' => $airing_info['result'][0]->creative_name);
                    $displayBrandCreativeName   = retreiveBrandCreativeName($name_array);
                }/*else{
                    $airing_id[1] = $creative_id[1];
                }*/
                $link_title = 'Video';
                if($user->optid == 1){
                    $stream = $json_a["html5_streaming_url"];
                    $no_image = 0;  
                    $msd_st = "Video";  
                    if(isset($json_a["msg"])){
                        $msg = $json_a["msg"];
                        $sub_msg = '';
                        $msd_st = "";
                    }                
                }else{
                    $airing_detail = getActulAiringInfoById($actule_airing_id);
                    $json_a = retreiveStreamingUrl($actule_airing_id);
                    // $url = createImageLink_ranking($creative_id, $actule_airing_id);
                    if(!empty($refine_params)) {
                        $query_string = base64_encode("creative_id=$creative_id&airing_id=$actule_airing_id&date=" . time()."&excel_id=".$excel_id."&page=refine_page&refine_by=".$output['refine_by']."&search_by_tfn=".$output['search_by_tfn']);
                        $url = 'http://' . HOST . "/drmetrix/video/{$query_string}?video=2";
                    } else if(!empty($excelInfo)) {
                        $query_string = base64_encode("creative_id=$creative_id&airing_id=$actule_airing_id&date=" . time()."&excel_id=$excel_id");
                        $url = 'http://' . HOST . "/drmetrix/video/{$query_string}?video=2";
                    } else {
                        $url = createImageLink_ranking($creative_id, $actule_airing_id);
                    }
                    $link_title = 'Thumbnail';
                    //$json_a = forCreativeVideo($json_a, $airing_info, $creative_id[1]);
                    $stream = "/drmetrix/assets/img/no_image.png";
                    $no_image = 1;
                    $sub_msg = '';
                    $msd_st = '';
                    $msg='';
                    if(!empty($json_a["ocr_image_url"])){     
                        if (@getimagesize($json_a["ocr_image_url"])) {
                            $stream = $json_a["ocr_image_url"];
                            $no_image = 0;
                            if(!isset($json_a["msg"])){
                                $msd_st = "Image";
                                $sub_msg = 'This is an image from actual airing'.'</br>';
                                $datetime = explode(' ',$airing_detail['result'][0]->start);
                                $broadcast_datetime = explode(' ',$airing_detail['result'][0]->broadcast_start);
                                $date = explode('-',$datetime[0]);
                                $broadcast_date = explode('-',$broadcast_datetime[0]);
                                // $msg = " captured on ".$airing_detail['result'][0]->network_alias." on ".$date[1]."/".$date[2]."/".substr($date[0], -2)." at ".date('h:i A',strtotime($airing_detail['result'][0]->start)) .' '.'ET';

                                if(!empty($excelInfo)) {
                                    if($excelInfo['day_type'] == 'broadcast') {
                                        $display_message = ' broadcast day '.$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2) ; 
                                    } else {
                                        $display_message = ' calendar day '.$date[1]."/".$date[2]."/".substr($date[0], -2) ; 
                                    }
                                } else {
                                    if(empty($refine_params)) { //refine log page
                                        // if($excelInfo['day_type'] == 'broadcast') {
                                        $display_message = ' broadcast day '.$broadcast_date[1]."/".$broadcast_date[2]."/".substr($broadcast_date[0], -2) ;
                                    } else { //network log page
                                        $display_message = ' calendar day '.$date[1]."/".$date[2]."/".substr($date[0], -2) ;
                                     }
                                }

                                $msg = " captured on ".$airing_detail['result'][0]->network_alias." on  ".$display_message." at ".date('h:i A',strtotime($airing_detail['result'][0]->start)) .' '.'ET';
                            }else{
                                $msg='This is a sample image and not specific to network.';
                            }
                        } 
                        $name_array                 = array('brand_name' => $airing_detail['result'][0]->brand_name , 'creative_name' => $airing_detail['result'][0]->creative_name);
                        $displayBrandCreativeName   = retreiveBrandCreativeName($name_array);
                        $copyToClipboardText        = 'Brand: '.$airing_detail['result'][0]->brand_name. PHP_EOL . 'Creative: '.$airing_detail['result'][0]->creative_name . ' - '.$airing_detail['result'][0]->length.' sec' .PHP_EOL . 'Link: '.$url;
                    }
                }
                 echo json_encode(array('status'=>1, 'stream'=> $stream,'no_image'=>$no_image,'msg'=>$sub_msg.$msd_st.$msg,'url'=> $copyToClipboardText,'adid'=> $creative_id, 'downloadable' =>$downloadable, 'displayNames' => $displayBrandCreativeName));
            }            
        }else{
            echo json_encode(array('status'=>4, 'stream'=>'expire'));
        }
    }else{
        echo json_encode(array('status'=>0, 'stream'=> 'param_issue'));
    }
}


function getCreativeClassificationType($creative_id){
    $db = getConnection();
    $sql = "SELECT class from creative WHERE creative_id = '".$creative_id."';";
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $result;
 
} 
function excelReportNetworkGridList(){
    $export = 1;
    $requestData = array();

    $requestData['c']                   =  urldecode($_REQUEST['c']);
    $requestData['cat']                 =  $_REQUEST['cat'];
    $requestData['tab']                 =  $_REQUEST['tab'];
    $requestData['val']                 =  $_REQUEST['val'];
    $requestData['sd']                  =  $_REQUEST['sd'];
    $requestData['ed']                  =  $_REQUEST['ed'];
    $requestData['responseType']        =  $_REQUEST['responseType'];
    $requestData['spanish']             =  $_REQUEST['spanish'];
    $requestData['cat_id']              =  $_REQUEST['cat_id'];
    $requestData['type']                =  $_REQUEST['type'];
    $requestData['excel_for']           =  $_REQUEST['type'];
    $requestData['creative_duration']   = isset($_REQUEST['creative_duration']) ? $_REQUEST['creative_duration'] : '';
    $requestData['network_code']        = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $requestData['network_id']          = isset($_REQUEST['network_id']) ? $_REQUEST['network_id'] : '';
    $requestData['type_parent_data']    =  json_decode($_REQUEST['type_data'],true);
    $requestData['category_ids']        =  addslashes($_REQUEST['cat_list']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    $requestData['brandOrCrId']         =  $_REQUEST['brandOrCrId'];
    $requestData['networkTab']          =  $_REQUEST['networkTab'];
    $requestData['unchecked_category']  =  $_REQUEST['unchecked_category'];
    $requestData['length_unchecked']    =  $_REQUEST['length_unchecked'];
    $requestData['breaktype']           =  $_REQUEST['breaktype'];
    
    $sd     = date_format(new DateTime(($requestData['sd'])),"m/d/Y");
    $ed     = date_format(new DateTime(($requestData['ed'])),"m/d/Y");
    $sd_n   = date_format(new DateTime(($requestData['sd'])),"m-d-Y");
    $ed_n   = date_format(new DateTime(($requestData['ed'])),"m-d-Y");

    $requestData['day_type']    = "NA";
    $requestData['timespan']    = "NA";
    $requestData['inc_cmw']     = "NA";
    $requestData['status']      = "completed";

    $user_id = $_SESSION['user_id'];
  
    $objPHPExcel = new PHPExcel();   
    $styleHeader = styleHeaderAdvBrandExcel();

    $styleSubHeader =styleSubHeaderAdvBrandExcel();
    $styleRows = styleRowsExcel();
    $styleDataRows = styleHorizontalCenterAlignmentExcel();
    $styleNameRows =  styleHorizontalLeftAlignmentExcel(); 
    $styleArray = styleExcel();
    $styleRowsCat = styleRowsCatExcel();

     $styleRowsBrand = styleRowsExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $i = 3;
    $flag = 1;

      $col_arr_j = array();
    $notFormattedKeys = ['Brands_ids','advertiser_hidden','Brand','Creative','Creatives','Brands','_id','_creative_count_hidden','Hidden_creatives_count','tracking','_creatives__spend_index','_creatives__airings','Video','thumbnail','advertiser_name'];

    if ($requestData['tab'] == "brand") { //for creatives

        $i++;
        $requestData['brand_id']    =  $_REQUEST['rowId'];        

        $data_list = networkBrandCreatives($requestData);
        $no_of_rows = count($data_list);
        $requestData['no_of_rows'] = $no_of_rows;
        foreach($data_list['rows'] as $key => $val) {
            foreach($val as $index => $value) { 
                    if(!in_array($index , $notFormattedKeys)) {
                            if($index != 'Total Dollars_spend_index' && $index != 'Airings_airings') {
                                $data_list['rows'][$key][$index]  = ROUND($data_list['rows'][$key][$index] , 0);
                            }
                            $data_list['rows'][$key][$index] = filter_var($data_list['rows'][$key][$index], FILTER_SANITIZE_NUMBER_INT);
                        }
            }   
        }
      
        if ($no_of_rows < MAX_NO_OF_RECORDS_FOR_EXCEL) {    
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Brand - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][0]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)));      
            $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);
            //if($requestData['c'] <= 5){

                $cr_ids = explode(',',$requestData['network_code']);
                $type_parent_str = 'Networks - '.  sizeof($cr_ids);
                $nt_no = 2;
                $row = 3;

                foreach($cr_ids as $cr){
                    $type_parent_str .= ' | '. $cr . ' - ' . $requestData['type_parent_data'][$nt_no];
                    $nt_no++;
                }


                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
                
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A3','Creatives');
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B3','Language');
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C3','Video');
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('A')->setAutoSize(true);
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('B')->setAutoSize(true);
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('C')->setAutoSize(true);
                
                $nt_no = 3;
                $col_arr = array('A','B','C','D','E','F','G','H','I','J','K','L');
                $col = 3;
                foreach($cr_ids as $cr){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $cr);
                    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$nt_no])->setAutoSize(true);
                    $nt_no++;
                }
                if($requestData['networkTab'] === 'spend_index'){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Total Dollars');
                }else{
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Airings');
                }
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$nt_no])->setAutoSize(true);
                $merge_count = 3 + count($cr_ids);
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:".$col_arr[$merge_count]."1");
                $objPHPExcel->getActiveSheet()->getStyle("A1:".$col_arr[$merge_count]."1")->applyFromArray($styleHeader);   

                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:".$col_arr[$merge_count]."2");
                $objPHPExcel->getActiveSheet()->getStyle("A2:".$col_arr[$merge_count]."2")->applyFromArray($styleSubHeader);
                
                $objPHPExcel->getActiveSheet()->getStyle("A3:".$col_arr[$merge_count]."3")->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A3:".$col_arr[$merge_count]."3")->applyFromArray($styleRows);

                if(!empty($data_list)){

                    $col = 1;
                    $row = 4;
                    foreach($data_list as $key => $val){

                        for ($l=0; $l < count($val); $l++) {
                            $nt_no =3;
                            $val[$l]['language'] = $val[$l]['language'] == 0 ? 'EN' : 'ES';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$row,$val[$l]['Creative']);
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$row, $val[$l]['language']);
                            // $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$row,$val[$l]['Language']);
                            
                            if ($val[$l]['thumbnail']) {
                                $url = HOST.'/drmetrix/video/'.$val[$l]['Video'].'?video=1';
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$i, 'Play');
                                $objPHPExcel->getActiveSheet()->getStyle('C'.$i)->getFont()->setColor( $phpColor );
                                $objPHPExcel->setActiveSheetIndex(0)->getCell('C'.$i)->getHyperlink('Play')->setUrl('http://'.$url);
                            } 
                           
                            foreach($cr_ids as $cr){
                                if($requestData['networkTab'] === 'spend_index'){
                                      //set column to number format 
                                 $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                    $val_tab = '_spend_index';
                                }else{
                                      //set column to number format 
                                $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                    $val_tab = '_airings';
                                }
                               
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$row, $val[$l][$cr.$val_tab]);
                                $nt_no++;
                            }
                            
                            if($requestData['networkTab'] === 'spend_index'){
                                
                              //set column to number format 
                              $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$row, $val[$l]['Total Dollars'.$val_tab]);
                            }else{
                                
                              //set column to number format 
                              $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$row, $val[$l]['Airings'.$val_tab]);
                            }
                            $objPHPExcel->getActiveSheet()->getStyle("A".$row.":".$col_arr[$merge_count].$row)->applyFromArray($styleArray, False);
                            $objPHPExcel->getActiveSheet()->getStyle("D".$row.":".$col_arr[$merge_count].$row)->applyFromArray($styleDataRows, False);
                            $row++;
                            $i++;
                        }
                    }
                
                }else{
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':I'.$i);
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                    $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                    );
                }
            //}            
            $sheet_name = 'Creatives List';

        }else{
            $requestData['status'] = "inprogress";
            $flag = 0;
            
        }
        $title = str_replace("xxxxxx","&",'DRM Network Report '.clean($requestData['type_parent_data'][0])).' All Creatives '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        
        
    }elseif($requestData['tab'] == "adv") { //for creatives
    
        $i++;
        $requestData['adv_id']    =  $_REQUEST['rowId'];        
        $branddata_list = displayAiringsBrandsWithNetworks(1,$requestData['brandOrCrId']);
        
//        print_r($data_list);exit;
        $no_of_rows = count($branddata_list);
        $requestData['no_of_rows'] = $no_of_rows;
        if ($no_of_rows < MAX_NO_OF_RECORDS_FOR_EXCEL) {    
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][0]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)));      
            $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);

                $network_ids = explode(',',$requestData['network_code']);
                $type_parent_str = 'Networks - '.  sizeof($network_ids);
                $nt_no = 3;
                $row = 3;

                foreach($network_ids as $network){
                    $type_parent_str .= ' | '. $network . ' - ' . $requestData['type_parent_data'][$nt_no];
                    $nt_no++;
                }


                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
                
                $merge_count = 3 + count($network_ids);
                $col_arr = array('A','B','C','D','E','F','G','H','I','J','K','L');
                
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('A')->setAutoSize(true);
                $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('B')->setAutoSize(true);
                
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:".$col_arr[$merge_count]."1");
                $objPHPExcel->getActiveSheet()->getStyle("A1:".$col_arr[$merge_count]."1")->applyFromArray($styleHeader);   

                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:".$col_arr[$merge_count]."2");
                $objPHPExcel->getActiveSheet()->getStyle("A2:".$col_arr[$merge_count]."2")->applyFromArray($styleSubHeader);
                
                $objPHPExcel->getActiveSheet()->getStyle("A3:".$col_arr[$merge_count]."3")->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A3:".$col_arr[$merge_count]."3")->applyFromArray($styleRows);
            
                
                //show($network_ids);
                foreach($branddata_list as $key => $val) {
                    foreach($val as $index => $value) { 
                            if(!in_array($index , $notFormattedKeys)) {
                                $branddata_list[$key][$index] = filter_var($branddata_list[$key][$index], FILTER_SANITIZE_NUMBER_INT);
                            }
                            
                    }   
                }
                
                if(!empty($branddata_list)){
                    $col = 3;
                    $nt_no = 3;
                    foreach($branddata_list as $key => $val){
                        
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$col,'Brand');
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$col,'Creatives');
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$col,'');
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B'.$col.':C'.$col);
                        foreach($network_ids as $network){
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $network);
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$nt_no])->setAutoSize(true);
                            $nt_no++;
                        }
                        
                        if($requestData['networkTab'] === 'spend_index'){
                                 //set column to number format 
                                 $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Total Dollars');
                        }else{
                                 //set column to number format 
                                 $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Airings');
                        }
                        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$nt_no])->setAutoSize(true);
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleArray, False);
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleRows);
                        
                        $nt_no = 3;
                        $col++;
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$col,$val['Brand']);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$col,$val['Creatives']);
                        //set column to number format 
                        $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$col,'');

                        foreach($network_ids as $network){
                            if($requestData['networkTab'] === 'spend_index'){
                                $val_tab = '_spend_index';
                            }else{
                                $val_tab = '_airings';
                            }
                        
                            
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $val[$network.$val_tab]);
                            $nt_no++;
                        }


                        if($requestData['networkTab'] === 'spend_index'){
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $val['Total Dollars'.$val_tab]);
                        }else{
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $val['Airings'.$val_tab]);
                        }
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleArray, False);
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleRows);
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B'.$col.':C'.$col);
                        $col++;
                        //getting creatives ids by brand id
                        $requestData['brand_id']    =  $val['id'];
                        $creative_id = getCreativeDataByBrandId($requestData['brand_id']);
                        $cr_ids = array();
                        foreach($creative_id as $id){
                            $cr_ids[] =  $id->creative_id;
                        }
                        $requestData['brandOrCrId'] =  implode(",",$cr_ids);
                        
                        $creative_list = networkBrandCreatives($requestData);
                        foreach($creative_list as $creative_key => $creative_value) {
                            foreach($creative_value as $key => $val) {
                                foreach($val as $index => $value) { 
                                    if(!array_key_exists($index , $notFormattedKeys)) {
                                        if($index != 'Creative') {
                                            if($index != 'Total Dollars_spend_index' && $index != 'Airings_airings') {
                                                $creative_list[$creative_key][$key][$index]   = ROUND( $creative_list[$creative_key][$key][$index]  , 0);
                                            }
                                            $creative_list[$creative_key][$key][$index] = filter_var( $creative_list[$creative_key][$key][$index] , FILTER_SANITIZE_NUMBER_INT);
                                        }
                                        
                                    }
                                    
                            }
                            }
                        }
                        
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$col,'Creatives');
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$col,'Language');
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$col,'Video');
 
                        $nt_no = 3;
                        foreach($network_ids as $network){
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $network);
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$nt_no])->setAutoSize(true);
                            $nt_no++;
                        }
                        if($requestData['networkTab'] === 'spend_index'){
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Total Dollars');
                        }else{
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, 'Airings');
                        }
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleArray, False);
                        $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleRowsCat);
                                
                        $col++;
                        $nt_no = 3;
                        foreach($creative_list['rows'] as $ck => $cv){
                            $cv['language'] = $cv['language'] == 0 ? 'EN' : 'ES';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$col,$cv['Creative']);
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('B'.$col,$cv['language']);
                            $objPHPExcel->getActiveSheet()->getStyle('A'.$col)->getAlignment()->applyFromArray(
                                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
                                );
                            
                            if ($cv['thumbnail']) {
                                $url = HOST.'/drmetrix/video/'.$cv['Video'].'?video=1';
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('C'.$col, 'Play');
                                $objPHPExcel->getActiveSheet()->getStyle('C'.$col)->getFont()->setColor( $phpColor );
                                $objPHPExcel->setActiveSheetIndex(0)->getCell('C'.$col)->getHyperlink('Play')->setUrl('http://'.$url);
                                $objPHPExcel->getActiveSheet()->getStyle('C'.$col)->getAlignment()->applyFromArray(
                                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)
                                );
                            }
                          
                            foreach($network_ids as $network){
                                if($requestData['networkTab'] === 'spend_index'){
                                       //set column to number format 
                                    $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                    $val_tab = '_spend_index';
                                }else{
                                    //set column to number format 
                                    $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                    $val_tab = '_airings';
                                }
                                
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $cv[$network.$val_tab]);
                                $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no].$col)->getAlignment()->applyFromArray(
                                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                );
                                $nt_no++;
                            }
                            
                            if($requestData['networkTab'] === 'spend_index'){
                                //set column to number format 
                                $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $cv['Total Dollars'.$val_tab]);
                            }else{
                                //set column to number format 
                                $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no])->getNumberFormat()->setFormatCode('#,##0');
                                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$nt_no].$col, $cv['Airings'.$val_tab]);
                            }
                            
                            $objPHPExcel->getActiveSheet()->getStyle("A".$col.":".$col_arr[$merge_count].$col)->applyFromArray($styleArray, False);
                            $objPHPExcel->getActiveSheet()->getStyle($col_arr[$nt_no].$col)->getAlignment()->applyFromArray(
                                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                            );
                            $objPHPExcel->getActiveSheet()->getStyle('A'.$col)->applyFromArray($styleNameRows);
                            $nt_no = 3;
                            $col++;
                        }
                    }
                
                }else{
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':I'.$i);
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                    $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                    );
                }
            $sheet_name = 'Creatives List';       
        }
        $title = str_replace("xxxxxx","&",'DRM Network Report '.clean($requestData['type_parent_data'][0])).' All Brands '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        $requestData['brand_id']    =  $requestData['adv_id'];
    }

    $objPHPExcel->getActiveSheet()->setTitle($sheet_name);
    $objPHPExcel->setActiveSheetIndex(0);

    $dir_name       = createDir($user_id);
    $file_name      = $dir_name.$title;
    $newFilePath    = $file_name.'.xlsx';

    $requestData['header_text'] = addslashes($title.'.xlsx');
    $requestData['file_path']   = addslashes($newFilePath);
    $requestData['email_alert'] = 0;
    $requestData['network_ids'] = NULL;
    $requestData['dow']         = NULL; 
    $requestData['hod']         = NULL;
    $requestData['query']       = NULL;
    $requestData['progress']    = 100;
    $requestData['task_initiated_on'] = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on'] = standardDateTimeFormat('Y-m-d H:i:s');


    if($flag){
        /*$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');*/

        $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
        $objWriter->setOffice2003Compatibility(true);
        $objWriter->save($newFilePath);
        //$filesize = calculateFileSize(addslashes($newFilePath));
        //$requestData['filesize'] = $filesize;
        //addExcelExportInfo($requestData);
        //echo json_encode(array('status'=>1, 'done'=>'done'));
        $db_obj                 = addExcelExportInfo($requestData);
        $last_insert_export_id  = $db_obj->lastInsertId();
        updateDownloadsCountInZoho($user_id);
        $exportedData           = fetchLastExportedData($last_insert_export_id);
        echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
        //header('Content-Type: application/vnd.ms-excel');
        //header('Content-Disposition: attachment;filename='.$title.'.xlsx');
        //header('Cache-Control: max-age=0');
        // If you're serving to IE 9, then the following may be needed
        //header('Cache-Control: max-age=1');
        //$objWriter->save('php://output');
        //exit;
    } 
}
/* Add function for set excel width - 4866-27-09-2019*/
function getColumnWidth($objPHPExcel, $column_arr = null, $width){
    if(!empty($column_arr)){
        foreach($column_arr as $p => $q) {
            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth($width);
        }
    }
}

function excelReportGirdListNew(){
    $export = 1;
    $requestData = array();

    $requestData['c']                   =  $c = urldecode($_REQUEST['c']);
    $requestData['tab']                 =  $_REQUEST['tab'];
    $requestData['val']                 =  $_REQUEST['val'];
    $requestData['sd']                  =  $_REQUEST['sd'];
    $requestData['ed']                  =  $_REQUEST['ed'];
    $requestData['responseType']        =  $_REQUEST['responseType'];
    $requestData['spanish']             =  $_REQUEST['spanish'];
    $requestData['cat_id']              =  $_REQUEST['cat_id'];
    $requestData['type']                =  $requestData['excel_for'] = $_REQUEST['type'];    
    $requestData['creative_duration']   = isset($_REQUEST['creative_duration']) ? $_REQUEST['creative_duration'] : '';
    $requestData['network_id']          = isset($_REQUEST['network_id']) ? $_REQUEST['network_id'] : '';
    $requestData['network_code']        = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $requestData['type_parent_data']    = json_decode($_REQUEST['type_data'],true);
    $requestData['category_ids']        = addslashes($_REQUEST['cat_list']);
    $requestData['media_date_range']    = addslashes($_REQUEST['date_range_str']);
    $requestData['new_filter_opt']      = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $requestData['is_adv_page']         = isset($_REQUEST['is_adv_page']) ? $_REQUEST['is_adv_page'] : 0;
    $requestData['unchecked_cat']       = isset($_REQUEST['unchecked_category']) ? urldecode($_REQUEST['unchecked_category']) : '';
    $search                             = !empty($_REQUEST['search_text']) ? $_REQUEST['search_text'] : 'none';
    $active_flag                        = (isset($_REQUEST['flag']) && ($_REQUEST['flag'] != 'undefined')) ? $_REQUEST['flag'] : '-1';
    
    $sd     = date_format(new DateTime(($requestData['sd'])),"m/d/Y");
    $ed     = date_format(new DateTime(($requestData['ed'])),"m/d/Y");
    $sd_n   = date_format(new DateTime(($requestData['sd'])),"m-d-Y");
    $ed_n   = date_format(new DateTime(($requestData['ed'])),"m-d-Y");

    $requestData['day_type']    = "NA";
    $requestData['timespan']    = "NA";
    $requestData['inc_cmw']     = "NA";
    $requestData['status']      = "completed";
    $network_alias              = '';
    if(!empty($requestData['network_code'])){
        $net_code = "'".$requestData['network_code']."'";
        $network_alias = ' | Network - '.getNetworkAliasByCode($net_code);
    }

    $user_id = $_SESSION['user_id'];
  
    $objPHPExcel = new PHPExcel();   
    $styleHeader = styleHeaderAdvBrandExcel();

    $styleSubHeader = styleSubHeaderAdvBrandExcel();

    $styleRows = styleRowsExcel();
    $styleArray = styleExcel();

    $styleRowsCat = styleRowsCatExcel();
    $styleRowsBrand = styleRowsExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $i = 3;
    $flag = 1;
    $spendHeading =  'Spend ';
    $spendColHeading = 'Total Spend ($)';
    $spendCreativeColHeading = 'Spend By Creative ($)';

    $active_flag_arr = ['-1', '2'];
    
    /* For advertiser type */
    if($requestData['type'] == "advertiser"){
        $requestData['adv_id']  =  $_REQUEST['adv_id'];        
        $data_list = advBrandsList($export,$requestData);
        $resultSet = [];
        foreach($data_list as $key => $value) {
            if($active_flag != ''){
                if($value['is_brand_active'] == $active_flag && (!in_array($active_flag, $active_flag_arr))) {
                    array_push($resultSet, $value);
                }
            }
        }

        if(!in_array($active_flag, $active_flag_arr) && $active_flag != ''){
            $data_list = $resultSet;
        }
        
        $no_of_rows = count($data_list);
        
        $requestData['no_of_rows'] = $no_of_rows;
        $adsv_name = isset($requestData['type_parent_data'][0])? str_replace("xxxxxx","&",$requestData['type_parent_data'][0]) : '';
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Advertiser - '.htmlspecialchars_decode($adsv_name).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias);        
        $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);

        //For c = 1 here 
        if($requestData['c'] != 6 && $requestData['c'] != 7){
            $last_column = 'L';
            $header_array = $header_array_New = $col_arr = $col_arr_i = $col_arr_hr = $excel_alinment = $col_arr_j = array();
            $col_arr = array('A','B','C','D','E','F','G','H','I');
            $col_arr_hr = array('B','C','D','E','F','G','H','I', 'J', 'K', 'L');
            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
            $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
            $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

            $rank = isset($requestData['type_parent_data'][8]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][8].' | ':'';
            $brand = isset($requestData['type_parent_data'][1])? 'Brand/s - '.$requestData['type_parent_data'][1] : '';
            $creative = '';
            if($requestData['is_adv_page'] == 1){
                $rank = isset($requestData['type_parent_data'][9]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][9].' | ':'';
                $creative = (isset($requestData['type_parent_data'][8])) ? ' | '.'Creatives - '.$requestData['type_parent_data'][8]:'';    
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - '.$requestData['type_parent_data'][3]:'';
            } else {
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - $'.$requestData['type_parent_data'][3]:'';
            }

            $airings = isset($requestData['type_parent_data'][2]) ? ' | '.'Airings - '.$requestData['type_parent_data'][2]:'';
            $national = (isset($requestData['type_parent_data'][5]) && !empty($requestData['type_parent_data'][5])) ? ' | '.'National - '.$requestData['type_parent_data'][5]:'';
            $local = (isset($requestData['type_parent_data'][6]) && !empty($requestData['type_parent_data'][6])) ?' | '.'DPI - '.$requestData['type_parent_data'][6]:'';
            $asd = (isset($requestData['type_parent_data'][7]) && !empty($requestData['type_parent_data'][7])) ? ' | '.'ASD - '.$requestData['type_parent_data'][7]:'';

            $type_parent_str = $rank.$brand.$creative.$airings.$span_index.$national.$local.$asd;
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
            $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
          
            $column_in_number_format = ['D','E','G'];
            setColumnNumberFormat($objPHPExcel, $column_in_number_format);
            
            foreach($data_list as $key => $val){
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":".$last_column.$i)->applyFromArray($styleRowsBrand);
                //$header_array = array('A'.$i=>'Brand Name','B'.$i=>'Creatives','C'.$i=>'Category','D'.$i=>'Airings','E'.$i=>$spendColHeading,'F'.$i=>'National %','G'.$i=>'Local %','H'.$i=>'ASD','I'.$i=>'Weeks');
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('I'.$i.':'.$last_column.$i);
                
                //create header array
                $header_array = array('Brand Name','Creatives','Category','Airings',$spendColHeading,'National %','DPI %','ASD','Weeks');
                foreach($header_array as $a => $b){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                    $header_array_New[$col_arr[$a].$i] = $b;                    
                }
                
                $i++;
                $col_arr_i = [];
                foreach($col_arr as $k => $v){
                    // array_push($col_arr_i, $v.$i );
                    $col_arr_i[] = $v.$i;                               
                }
                /* Create Values array here */
                $valdt = array($val['brand_name'],$val['creatives_count'],$val['category_name'], $val['airings'], $val['hidden_spend_index'], $val['national'], $val['local'], $val['asd'], $val['total_weeks'] );
                /* Combine header and value arrays here*/
                $resp_array = array_combine($col_arr_i, $valdt);
                $col_arr_i= [];
                //$resp_array = array('A'.$i=>$val['brand_name'],'B'.$i=>$val['creatives_count'],'C'.$i=>$val['category_name'],'D'.$i=>$val['airings'],'E'.$i=>$val['hidden_spend_index'],'F'.$i=>$val['national'],'G'.$i=>$val['local'],'H'.$i=>$val['asd'],'I'.$i=>$val['total_weeks']);
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('I'.$i.':'.$last_column.$i);
                foreach($resp_array as $k => $v){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k,$v);
                }
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsBrand);

                //for creatives list by brand 
                $i++;
                $requestData['brand_id']    =  $val['id'];
                $creative_data_list = brandCreatives($export,$requestData);
                $header_array = array('Creatives','Language','Classification','Duration','Airings',$spendCreativeColHeading,'National %','DPI %','First Aired', 'Last Aired','Play');
                foreach($header_array as $a => $b){
                    $header_array_New[$col_arr_hr[$a].$i] = $b;
                }

                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsCat);
                foreach($header_array_New as $c => $d){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($c,$d);
                }

                $i++;

                if($requestData['is_adv_page'] == 1){
                    $column_in_number_format = ['F','G'];
                    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
                }else{
                    $column_in_number_format = ['E','F'];
                    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
                }
                
                foreach($creative_data_list as $e => $f){
                    $objPHPExcel->getActiveSheet()->getStyle("A".($i).":L".($i))->applyFromArray($styleArray, False);
                    $valHrDt = array($f['creative_name'],$f['language'],$f['classification'],$f['duration'],$f['airings'],$f['hidden_spend_index'],$f['national'],$f['local'],dateFormateForGridDate($f['first_detection']),dateFormateForGridDate($f['last_aired']),'Play');
                    foreach($col_arr_hr as $k => $v){
                        $col_arr_j[] = $v.$i;                               
                    }
                    $resp_array = array_combine($col_arr_j, $valHrDt);
                    $col_arr_j= [];
                    
                    foreach($resp_array as $g => $h){
                        if($h == 'Play'){
                            $url = $url = HOST.'/drmetrix/video/'.$f['video'].'?video=1';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, 'Play');
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getFont()->setColor( $phpColor );
                            $objPHPExcel->setActiveSheetIndex(0)->getCell($g)->getHyperlink('Play')->setUrl('http://'.$url);
                        }else{            
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, $h);
                        }
                        $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                        $excel_alinment = array('E', 'F', 'G', 'H');
                        if(in_array($g[0], $excel_alinment)){
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getAlignment()->applyFromArray(
                                array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                            );
                        }
                    }
                    $i++;
                }
                $i++;

            }
            $form = "short_form";
        } else {
            if($requestData['is_adv_page'] == 1) {
                $last_column = 'I';
            } else {
                $last_column = 'H';
            }
            $header_array = $header_array_New = $col_arr = $col_arr_i = $col_arr_hr = $excel_alinment = $col_arr_j = $valdt =  array();
            $col_arr = array('A','B','C','D','E','F','G');
            $col_arr_hr = array('B','C','D','E','F','G','H','I');
            $col_arr_hri = array('B','C','D','E','F','G','H');
            $i=3;
            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
            $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
            $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);
            
            $rank = '';
            $brand = isset($requestData['type_parent_data'][1])? 'Brand/s - '.$requestData['type_parent_data'][1] : '';
            $creative = '';
            if($requestData['is_adv_page'] == 1){
                $rank = isset($requestData['type_parent_data'][9]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][9].' | ':'';
                $creative = (isset($requestData['type_parent_data'][8])) ? ' | '.'Creatives - '.$requestData['type_parent_data'][8]:'';
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - '.$requestData['type_parent_data'][3]:'';
            }
            else {
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - $'.$requestData['type_parent_data'][3]:'';
            }
            $airings = isset($requestData['type_parent_data'][2]) ? ' | '.'Airings - '.$requestData['type_parent_data'][2]:'';

            $type_parent_str = $rank.$brand.$creative.$airings.$span_index;
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
            $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);

            if($requestData['is_adv_page'] == 1){
                $column_in_number_format = ['D','E'];
                if($c > 5) {
                    $column_in_number_format = ['E','F'];
                }
            } else{
                $column_in_number_format = ['E','F'];    
            }
            setColumnNumberFormat($objPHPExcel, $column_in_number_format);

            foreach($data_list as $key => $val){
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":".$last_column.$i)->applyFromArray($styleRowsBrand);
                
                $header_array = array('Brand Name','Creatives','Category','Price','Airings',$spendColHeading,'Weeks');
                
                foreach($header_array as $a => $b){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                    $header_array_New[$col_arr[$a].$i] = $b;
                }
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('G'.$i.':'.$last_column.$i);
                $i++;
                /* Create Values array here */
                $resp_array = array();
                $valdt = array($val['brand_name'],$val['creatives_count'],$val['category_name'],$val['price'],$val['airings'],$val['hidden_spend_index'],$val['total_weeks']);
                foreach($col_arr as $k => $v){
                    $col_arr_i[] = $v.$i;                               
                 }
                 /* Combine header and value arrays here*/
                 $resp_array = array_combine($col_arr_i, $valdt);
                 $col_arr_i= '';
                
                foreach($resp_array as $k => $v){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k,$v);
                }
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('G'.$i.':'.$last_column.$i);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsBrand);

                //for creatives list by brand 
                $i++;
                $requestData['brand_id']    =  $val['id'];
                $creative_data_list = brandCreatives($export,$requestData);
                if($requestData['is_adv_page'] == 1) {
                    $header_array = array('Creatives','Language','Classification','Airings',$spendCreativeColHeading,'First Aired','Last Aired','Play');
                    foreach($header_array as $a => $b){
                        $header_array_New[$col_arr_hr[$a].$i] = $b;
                    }
                
                } else {
                    $header_array = array('Creatives','Classification','Airings',$spendCreativeColHeading,'First Aired','Last Aired','Play');
                    foreach($header_array as $a => $b){
                        $header_array_New[$col_arr_hri[$a].$i] = $b;
                    }
                
                }

                foreach($header_array_New as $c => $d){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($c,$d);
                }
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsCat);
                $i++;
                foreach($creative_data_list as $e => $f){
                    $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                    if($requestData['is_adv_page'] == 1) {
                        $valdt = array($f['creative_name'],$f['language'],$f['classification'],$f['airings'],$f['hidden_spend_index'],dateFormateForGridDate($f['first_detection']),dateFormateForGridDate($f['last_aired']),'Play');
                        foreach($col_arr_hr as $k => $v){
                            $col_arr_i[] = $v.$i;                               
                        }
                         
                        $resp_array = array_combine($col_arr_i, $valdt);
                        $col_arr_i= '';                        
                    
                    } else {
                        $valdt = array($f['creative_name'],$f['classification'],$f['airings'],$f['hidden_spend_index'],dateFormateForGridDate($f['first_detection']),dateFormateForGridDate($f['last_aired']),'Play');
                        foreach($col_arr_hri as $k => $v){
                            $col_arr_j[] = $v.$i;                               
                        }

                        $resp_array = array_combine($col_arr_j, $valdt);
                        $col_arr_j = '';
                    
                    }
                    foreach($resp_array as $g => $h){
                        if($h == 'Play'){
                            $url = $url = HOST.'/drmetrix/video/'.$f['video'].'?video=1';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, 'Play');
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getFont()->setColor( $phpColor );
                            $objPHPExcel->setActiveSheetIndex(0)->getCell($g)->getHyperlink('Play')->setUrl('http://'.$url);
                        }else{            
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, $h);
                        }
                        $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                        if($g[0] == 'D' || $g[0] == 'E' || $g[0] == 'F'){
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getAlignment()->applyFromArray(
                                array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                            );
                        }
                    }
                    $i++;
                }
                $i++;
            }
            $form = "long_form";

        }

        $title = str_replace("xxxxxx","&",'DRM '.clean($requestData['type_parent_data'][0])).' All Brands '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        $sheet_name = 'Brand List';
        $requestData['brand_id']    =  $_REQUEST['adv_id'];
        
    } else if ($requestData['type'] == "brand") {
        /* For brand type   */
        $i++;
        $requestData['brand_id']    =  $_REQUEST['adv_id'];        
        $data_list = brandCreatives($export,$requestData);
        $no_of_rows = count($data_list);
        $requestData['no_of_rows'] = $no_of_rows;
        
        //c= 1 here (Classification)
        if($requestData['c'] > 5) {
            $column_in_number_format = ['D','E'];
        }else {
            $column_in_number_format = ['E','F'];
        }

        setColumnNumberFormat($objPHPExcel, $column_in_number_format);
        
        //MAX_NO_OF_RECORDS_FOR_EXCEL = 3000
        if ($no_of_rows < MAX_NO_OF_RECORDS_FOR_EXCEL) {
            //For A1 column, $requestData['tab'] = brand
            if($requestData['tab'] == 'adv_brand') {
                $type_a1_str = 'Brand - '.str_replace("xxxxxx","&",$requestData['is_adv_page'] == 1 ? $requestData['type_parent_data'][1] : $requestData['type_parent_data'][0]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias;
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1',$type_a1_str);                
            } else {
                $type_a1_str = 'Brand - '.str_replace("xxxxxx","&",$requestData['is_adv_page'] == 1 ? $requestData['type_parent_data'][1] : $requestData['type_parent_data'][12]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias;
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1',$type_a1_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);
            }
            
            //For short From, c = 1 here
            if( $requestData['c'] != 6 && $requestData['c'] != 7 ){
                $cat_name = displayNameInExportExcel($requestData['type_parent_data'][3]); //$requestData['type_parent_data'][3] = Drug xxxxxx Toiletry
                
                //For A2 column, $requestData['tab'] = brand
                if($requestData['tab'] == 'adv_brand'){
                    $cat_name = displayNameInExportExcel($requestData['type_parent_data'][2]);
                    $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][1].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][3].' | '.$spendHeading. ' - $'.$requestData['type_parent_data'][9].' | '.'National - '.$requestData['type_parent_data'][5].' | '.'DPI - '.$requestData['type_parent_data'][6].' | '.'ASD - '.$requestData['type_parent_data'][7].' | '.'Weeks - '.$requestData['type_parent_data'][8];
                }else{
                    //$requestData['is_adv_page'] = 0
                    if($requestData['is_adv_page'] == 1){
                        $cat_name = displayNameInExportExcel($requestData['type_parent_data'][4]);
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][3].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][5]).' | '.'Airings - '.$requestData['type_parent_data'][6].' | '.$spendHeading. '- $'. $requestData['type_parent_data'][7].' | '.'National - '.$requestData['type_parent_data'][13].' | '.'DPI - '.$requestData['type_parent_data'][14].' | '.'ASD - '.$requestData['type_parent_data'][15].' | '.'Weeks - '.$requestData['type_parent_data'][16];
                    } else {
                        //here
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][2].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][4]).' | '.'Airings - '.$requestData['type_parent_data'][5].' | '.$spendHeading. ' - $'.$requestData['type_parent_data'][6].' | '.'National - '.$requestData['type_parent_data'][14].' | '.'DPI - '.$requestData['type_parent_data'][15].' | '.'ASD - '.$requestData['type_parent_data'][16].' | '.'Weeks - '.$requestData['type_parent_data'][17];
                    }
                }
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);

                //headings
                if($requestData['is_adv_page'] == 1){
                    $last_column = 'K';
                    // $header_array = array('A3'=>'Creatives','B3'=>'Language','C3'=>'Classification','D3'=>'Duration','E3'=>'Airings','F3'=>$spendColHeading,'G3'=>'National %','H3'=>'Local %','I3'=>'First Aired','J3'=>'Last Aired','K3'=>'Play');

                    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K');
                    $i=3;
                    /* Create header array here */
                    $header_array = array();
                    $header_array = array('Creatives','Language','Classification','Duration','Airings',$spendColHeading,'National %','DPI %','First Aired','Last Aired','Play');
                    foreach($header_array as $a => $b){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                        $header_array_New[$col_arr[$a].$i] = $b;
                        //show($col_arr[$a].$i."--".$b);
                    }
                    

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:K1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:K1")->applyFromArray($styleHeader);
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:K2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:K2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":K".(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:K3")->applyFromArray($styleRows);
                    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K');
                    $i++;

                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            $resp_array = array('A'.$i=>$val['creative_name'],'B'.$i=>$val['language'],'C'.$i=>$val['classification'],'D'.$i=>$val['duration'],'E'.$i=>$val['airings'],'F'.$i=>$val['hidden_spend_index'],'G'.$i=>$val['national'],'H'.$i=>$val['local'],'I'.$i=>dateFormateForGridDate($val['first_detection']),'J'.$i=>dateFormateForGridDate($val['last_aired']),'K'.$i=>'Play'); 
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                if($k[0] == 'D' || $k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I' || $k[0] == 'J' || $k[0] == 'K' ){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }

                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':K'.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    foreach($col_arr as $p => $q){
                        $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
                        if($q == 'A'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("70");
                        }else if($q == 'C' || $q == 'I'  || $q == 'J' || $q == 'E' || $q == 'F'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("30");
                        }else{
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("10");
                        }
                    }

                }else{
                    $lastColumn = 'K';
                    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K');
                    $i=3;
                    /* Create header array here */
                    $header_array = array();
                    $header_array = array('Creatives','Language','Classification','Duration','Airings',$spendColHeading,'National %','DPI %','First Aired','Last Aired','Play');
                    foreach($header_array as $a => $b){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                        $header_array_New[$col_arr[$a].$i] = $b;
                        //show($col_arr[$a].$i."--".$b);
                    }
                    
                    //merging and add style in header
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$lastColumn.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$lastColumn."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$lastColumn.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$lastColumn."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$lastColumn.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$lastColumn."3")->applyFromArray($styleRows);
                    $i++;
                    $col_arr_i = [];
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            
                            foreach($col_arr as $k => $v){
                            //    $col_arr_i[] = $v.$i;
                               array_push($col_arr_i , $v.$i)    ;
                            }
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$lastColumn.($i))->applyFromArray($styleArray, False);
                            /* Create Values array here */
                            $valdt = array($val['creative_name'],$val['language'],$val['classification'], $val['duration'], $val['airings'], $val['hidden_spend_index'], $val['national'], $val['local'], dateFormateForGridDate($val['first_detection']), dateFormateForGridDate($val['last_aired']), 'Play' );
                            /* Combine header and value arrays here*/
                            $resp_array = array_combine($col_arr_i, $valdt);
                            $col_arr_i= [];
                            
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                /* Set excel cell alignment */
                                $excel_alinment = array('D', 'E', 'F', 'G', 'H', 'I', 'J', 'K');
                                if(in_array($k[0], $excel_alinment)){
                                // if($k[0] == 'D' || $k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I' || $k[0] == 'J' || $k[0] == 'K'){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }
                    } else {
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':J'.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    //Set excel cell width 
                    $getColumnWidth_70 = array('A');
                    $getColumnWidth_30 = array('C', 'I', 'J');
                    $getColumnWidth_12 = array('E');
                    $getColumnWidth_18 = array('H', 'F');
                    /* Call get width function here */
                    getColumnWidth($objPHPExcel, $getColumnWidth_70, "70");
                    getColumnWidth($objPHPExcel, $getColumnWidth_30, "30");
                    getColumnWidth($objPHPExcel, $getColumnWidth_12, "12");
                    getColumnWidth($objPHPExcel, $getColumnWidth_18, "18");
                    getColumnWidth($objPHPExcel, null, "10");
                }
                $form = "short_form";
            } else {
                //For short From, c = 6 or 7 here
                $cat_name = displayNameInExportExcel($requestData['type_parent_data'][3]);
                if($requestData['tab'] == 'adv_brand'){
                    $cat_name = displayNameInExportExcel($requestData['type_parent_data'][2]);
                    $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][1].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][3].' | '.$spendHeading.' - $'.$requestData['type_parent_data'][4].' | '.'Weeks - '.$requestData['type_parent_data'][5];
                }else{
                    if($requestData['is_adv_page']){
                        $cat_name = displayNameInExportExcel($requestData['type_parent_data'][4]);
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][3].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][5]).' | '.'Airings - '.$requestData['type_parent_data'][6].' | '.$spendHeading .'- $'.$requestData['type_parent_data'][7].' | '.'Weeks - '.$requestData['type_parent_data'][13];
                    } else {
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][2].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][5].' | '.$spendHeading.' - $'.$requestData['type_parent_data'][6].' | '.'Weeks - '.$requestData['type_parent_data'][14];
                    }

                }
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
                
                if($requestData['is_adv_page'] == 1) {
                    $last_column = 'H';
                    $header_array =  $col_arr = $valdt = array();
                    $i=3;
                    $header_array = array('Creatives','Language','Classification','Airings',$spendColHeading,'First Aired','Last Aired','Play');
                
                    $col_arr = array('A','B','C','D','E','F','G','H');

                    foreach($header_array as $a => $b){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                        $header_array_New[$col_arr[$a].$i] = $b;
                    }
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$last_column.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$last_column."3")->applyFromArray($styleRows);
                    $i++;
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            
                            $valdt = array($val['creative_name'],$val['language'],$val['classification'],$val['airings'],$val['hidden_spend_index'],dateFormateForGridDate($val['first_detection']),dateFormateForGridDate($val['last_aired']),'Play'); 
                            foreach($col_arr as $k => $v){
                                $col_arr_i[] = $v.$i;                               
                            }
                            $resp_array = array_combine($col_arr_i, $valdt);
                            $col_arr_i= '';
                    
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                $excel_alinment = array('D', 'E', 'F', 'G', 'H');
                                if(in_array($k[0], $excel_alinment)){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }                                
                            }
                            $i++;
                        }
                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':'.$last_column.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    
                    //Set excel cell width 
                    $getColumnWidth_70 = array('A');
                    $getColumnWidth_30 = array('C', 'D', 'E', 'F', 'G');
                    
                    /* Call get width function here */
                    getColumnWidth($objPHPExcel, $getColumnWidth_70, "70");
                    getColumnWidth($objPHPExcel, $getColumnWidth_30, "30");
                    getColumnWidth($objPHPExcel, null, "10");

                } else {
                    $last_column = 'H';
                    $i=3;
                    $col_arr = array('A','B','C','D','E','F','G', 'H');
                    $header_array = array('Creatives','Language','Classification','Airings',$spendColHeading,'First Aired','Last Aired','Play');
                    foreach($header_array as $a => $b){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
                        $header_array_New[$col_arr[$a].$i] = $b;
                    }
                    
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$last_column.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$last_column."3")->applyFromArray($styleRows);
                    $i++;
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            
                            foreach($col_arr as $k => $v){
                                $col_arr_i[] = $v.$i;                               
                            }
                            $valdt = array($val['creative_name'],$val['language'],$val['classification'],$val['airings'],$val['hidden_spend_index'],dateFormateForGridDate($val['first_detection']),dateFormateForGridDate($val['last_aired']),'Play');
                            $resp_array = array_combine($col_arr_i, $valdt);
                            $col_arr_i= '';
                            
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                /* Set excel cell alignment */
                                $excel_alinment = array('C','D', 'E', 'F', 'G', 'H');
                                if(in_array($k[0], $excel_alinment)){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }
                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':'.$last_column.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }

                    //Set excel cell width 
                    $getColumnWidth_70 = array('A');
                    $getColumnWidth_30 = array('B', 'C', 'E', 'F', 'D','G');
                    
                    /* Call get width function here */
                    getColumnWidth($objPHPExcel, $getColumnWidth_70, "70");
                    getColumnWidth($objPHPExcel, $getColumnWidth_30, "30");                    
                    getColumnWidth($objPHPExcel, null, "10");
                }
                $form = "long_form";                
            }
            
        foreach($header_array_New as $x => $y){
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($x,$y);
            
        }
        $sheet_name = 'Creatives List';
        
        } else {
            $requestData['status'] = "inprogress";
            if($requestData['c'] != 6 && $requestData['c'] != 7){
                $form = "short_form";  
            }else{
                $form = "long_form";  
            }
            $flag = 0;
        }
        
        //set excel name as title
        if($requestData['tab'] == 'adv_brand') {
            $type_parent_data = $requestData['type_parent_data'][0];
        } else {
            $type_parent_data = $requestData['type_parent_data'][1];
        }
        $title = str_replace("xxxxxx","&",'DRM '.clean($type_parent_data)).' All Creatives '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
    }
    if($requestData['type'] == "advertiser"){
        $nCols = 15; //set the number of columns
        foreach (range(0, $nCols) as $col) {
            $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($col)->setAutoSize(true);                
        }
    }

    //Create excel sheet from here
    $objPHPExcel->getActiveSheet()->setTitle($sheet_name);

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $dir_name       = createDir($user_id);
    $file_name      = $dir_name.$title;
    $newFilePath    = $file_name.'.xlsx';

    $requestData['header_text'] = addslashes($title.'.xlsx');
    $requestData['file_path']   = addslashes($newFilePath);
    $requestData['email_alert'] = 0;
    $requestData['network_ids'] = NULL;
    $requestData['dow']         = NULL; 
    $requestData['hod']         = NULL;
    $requestData['query']       = NULL;
    $requestData['progress']    = 100;
    $requestData['task_initiated_on'] = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on'] = standardDateTimeFormat('Y-m-d H:i:s');

    if($flag) {
        $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
        $objWriter->setOffice2003Compatibility(true);
        $objWriter->save($newFilePath);
        $db_obj                 = addExcelExportInfo($requestData);
        $last_insert_export_id  = $db_obj->lastInsertId();
        updateDownloadsCountInZoho($user_id);
        $exportedData           = fetchLastExportedData($last_insert_export_id);
        echo json_encode(array('status'=>1, 'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
    }

}

function excelReportGirdList(){
    $export = 1;
    $requestData = array();   

    $requestData['c']                   = $c = urldecode($_REQUEST['c']);
    $requestData['tab']                 =  $_REQUEST['tab'];
    $requestData['val']                 =  $_REQUEST['val'];
    $requestData['sd']                  =  $_REQUEST['sd'];
    $requestData['ed']                  =  $_REQUEST['ed'];
    $requestData['responseType']        =  $_REQUEST['responseType'];
    $requestData['spanish']             =  $_REQUEST['spanish'];
    $requestData['cat_id']              =  $_REQUEST['cat_id'];
    $requestData['type']                =  $_REQUEST['type'];
    $requestData['excel_for']           =  $_REQUEST['type'];
    $requestData['creative_duration']   = isset($_REQUEST['creative_duration']) ? $_REQUEST['creative_duration'] : '';
    $requestData['network_id']          = isset($_REQUEST['network_id']) ? $_REQUEST['network_id'] : '';
    $requestData['network_code']        = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $requestData['type_parent_data']    =  json_decode($_REQUEST['type_data'],true);
    $requestData['category_ids']        =  addslashes($_REQUEST['cat_list']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    $requestData['new_filter_opt']      = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $requestData['is_adv_page']         = isset($_REQUEST['is_adv_page']) ? $_REQUEST['is_adv_page'] : 0;
    $search                             = !empty($_REQUEST['search_text']) ? $_REQUEST['search_text'] : 'none';
    $active_flag                        = (isset($_REQUEST['flag']) && ($_REQUEST['flag'] != 'undefined')) ? $_REQUEST['flag'] : '-1';
    
    $sd     = date_format(new DateTime(($requestData['sd'])),"m/d/Y");
    $ed     = date_format(new DateTime(($requestData['ed'])),"m/d/Y");
    $sd_n   = date_format(new DateTime(($requestData['sd'])),"m-d-Y");
    $ed_n   = date_format(new DateTime(($requestData['ed'])),"m-d-Y");

    $requestData['day_type']    = "NA";
    $requestData['timespan']    = "NA";
    $requestData['inc_cmw']     = "NA";
    $requestData['status']      = "completed";
    $network_alias = '';
    if(!empty($requestData['network_code'])){
        $net_code = "'".$requestData['network_code']."'";
        $network_alias = ' | Network - '.getNetworkAliasByCode($net_code);
    }

    $user_id = $_SESSION['user_id'];
  
    $objPHPExcel = new PHPExcel();   
    $styleHeader = styleHeaderAdvBrandExcel();

    $styleSubHeader = styleSubHeaderAdvBrandExcel();

    $styleRows = styleRowsExcel();
    $styleArray = styleExcel();

    $styleRowsCat = styleRowsCatExcel();
     $styleRowsBrand = styleRowsExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $i = 3;
    $flag = 1;
    $spendHeading =  'Spend ';
    $spendColHeading = 'Total Spend ($)';
    $spendCreativeColHeading = 'Spend By Creative ($)';

    $active_flag_arr = ['-1', '2'];
    if($requestData['type'] == "advertiser"){        //for brand
      
        $requestData['adv_id']  =  $_REQUEST['adv_id'];        
        $data_list = advBrandsList($export,$requestData);
        $resultSet = [];
        foreach($data_list as $key => $value) {
            if($active_flag != ''){
                if($value['is_brand_active'] == $active_flag && (!in_array($active_flag, $active_flag_arr))) {
                    array_push($resultSet, $value);
                }
            }
        }

        if(!in_array($active_flag, $active_flag_arr) && $active_flag != ''){
            $data_list = $resultSet;
        }
        
        $no_of_rows = count($data_list);
        
        $requestData['no_of_rows'] = $no_of_rows;
        $adsv_name = isset($requestData['type_parent_data'][0])? str_replace("xxxxxx","&",$requestData['type_parent_data'][0]) : '';
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Advertiser - '.htmlspecialchars_decode($adsv_name).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias);        
        $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);

        if($requestData['c'] != 6 && $requestData['c'] != 7){
            $last_column = 'L';
            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
            $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
            $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

            $rank = isset($requestData['type_parent_data'][8]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][8].' | ':'';
            $brand = isset($requestData['type_parent_data'][1])? 'Brand/s - '.$requestData['type_parent_data'][1] : '';
            $creative = '';
            if($requestData['is_adv_page'] == 1){
                $rank = isset($requestData['type_parent_data'][9]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][9].' | ':'';
                $creative = (isset($requestData['type_parent_data'][8])) ? ' | '.'Creatives - '.$requestData['type_parent_data'][8]:'';    
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - '.$requestData['type_parent_data'][3]:'';
            } else {
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - $'.$requestData['type_parent_data'][3]:'';
            }

            $airings = isset($requestData['type_parent_data'][2]) ? ' | '.'Airings - '.$requestData['type_parent_data'][2]:'';
            $national = (isset($requestData['type_parent_data'][5]) && !empty($requestData['type_parent_data'][5])) ? ' | '.'National - '.$requestData['type_parent_data'][5]:'';
            $local = (isset($requestData['type_parent_data'][6]) && !empty($requestData['type_parent_data'][6])) ?' | '.'DPI - '.$requestData['type_parent_data'][6]:'';
            $asd = (isset($requestData['type_parent_data'][7]) && !empty($requestData['type_parent_data'][7])) ? ' | '.'ASD - '.$requestData['type_parent_data'][7]:'';

            $type_parent_str = $rank.$brand.$creative.$airings.$span_index.$national.$local.$asd;
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
            $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
          
            $column_in_number_format = ['D','E','G'];
            setColumnNumberFormat($objPHPExcel, $column_in_number_format);
         

            foreach($data_list as $key => $val){
               // $objPHPExcel->getActiveSheet()->getStyle("A".($cno).":J".($cno))->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":".$last_column.$i)->applyFromArray($styleRowsBrand);
                
                $header_array = array('A'.$i=>'Brand Name','B'.$i=>'Creatives','C'.$i=>'Category','D'.$i=>'Airings','E'.$i=>$spendColHeading,'F'.$i=>'National %','G'.$i=>'DPI %','H'.$i=>'ASD','I'.$i=>'Weeks');
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('I'.$i.':'.$last_column.$i);
                foreach($header_array as $a => $b){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($a,$b);
                }
                $i++;
                $resp_array = array('A'.$i=>$val['brand_name'],'B'.$i=>$val['creatives_count'],'C'.$i=>$val['category_name'],'D'.$i=>$val['airings'],'E'.$i=>$val['hidden_spend_index'],'F'.$i=>$val['national'],'G'.$i=>$val['local'],'H'.$i=>$val['asd'],'I'.$i=>$val['total_weeks']);
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('I'.$i.':'.$last_column.$i);
                foreach($resp_array as $k => $v){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k,$v);
                }
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsBrand);

                //for creatives list by brand 
                $i++;
                $requestData['brand_id']    =  $val['id'];
                $creative_data_list = brandCreatives($export,$requestData);
                $header_array = array('B'.$i=>'Creatives','C'.$i=>'Language','D'.$i=>'Classification','E'.$i=>'Duration','F'.$i=>'Airings','G'.$i => $spendCreativeColHeading,'H'.$i=>'National %','I'.$i=>'DPI %','J'.$i=>'First Aired','K'.$i=>'Last Aired','L'.$i=>'Play');
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsCat);
                foreach($header_array as $c => $d){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($c,$d);
                }

                $i++;

                if($requestData['is_adv_page'] == 1){
                    $column_in_number_format = ['F','G'];
                    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
                }else{
                    $column_in_number_format = ['E','F'];
                    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
                }
                
                foreach($creative_data_list as $e => $f){
                    $objPHPExcel->getActiveSheet()->getStyle("A".($i).":L".($i))->applyFromArray($styleArray, False);
                    $resp_array = array('B'.$i=>$f['creative_name'],'C'.$i=>$f['language'],'D'.$i=>$f['classification'],'E'.$i=>$f['duration'],'F'.$i=>$f['airings'],'G'.$i=>$f['hidden_spend_index'],'H'.$i=>$f['national'],'I'.$i=>$f['local'],'J'.$i=>dateFormateForGridDate($f['first_detection']),'K'.$i=>dateFormateForGridDate($f['last_aired']),'L'.$i=>'Play');

                    foreach($resp_array as $g => $h){
                        if($h == 'Play'){
                            $url = $url = HOST.'/drmetrix/video/'.$f['video'].'?video=1';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, 'Play');
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getFont()->setColor( $phpColor );
                            $objPHPExcel->setActiveSheetIndex(0)->getCell($g)->getHyperlink('Play')->setUrl('http://'.$url);
                        }else{            
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, $h);
                        }
                        $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                        if($g[0] == 'E' || $g[0] == 'F' || $g[0] == 'G' || $g[0] == 'H' ){
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getAlignment()->applyFromArray(
                                array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                            );
                        }
                    }
                    $i++;
                }
                $i++;

            }
            $form = "short_form";
        }else{
            if($requestData['is_adv_page'] == 1) {
                $last_column = 'I';
            } else {
                $last_column = 'H';
            }
            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
            $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

            $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
            $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);
            //            $type_parent_str = 'Brand/s - '.$requestData['type_parent_data'][1].' | '.'Airings - '.$requestData['type_parent_data'][2].' | '.'Spend Index - '.$requestData['type_parent_data'][3].' | '.'Networks - '.$requestData['type_parent_data'][4];
            // $rank = isset($requestData['type_parent_data'][10]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][10].' | ':'';
            $rank = '';
            $brand = isset($requestData['type_parent_data'][1])? 'Brand/s - '.$requestData['type_parent_data'][1] : '';
            $creative = '';
            if($requestData['is_adv_page'] == 1){
                $rank = isset($requestData['type_parent_data'][9]) ? 'Lifetime: Ranking - '.$requestData['type_parent_data'][9].' | ':'';
                $creative = (isset($requestData['type_parent_data'][8])) ? ' | '.'Creatives - '.$requestData['type_parent_data'][8]:'';
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - '.$requestData['type_parent_data'][3]:'';
            } else {
                $span_index = isset($requestData['type_parent_data'][3]) ? ' | '.$spendHeading .' - $'.$requestData['type_parent_data'][3]:'';
            }
            $airings = isset($requestData['type_parent_data'][2]) ? ' | '.'Airings - '.$requestData['type_parent_data'][2]:'';

            //$type_parent_str = 'Brand/s - '.$requestData['type_parent_data'][1].' | '.'Airings - '.$requestData['type_parent_data'][2].' | '.'Spend Index - '.$requestData['type_parent_data'][3];
            $type_parent_str = $rank.$brand.$creative.$airings.$span_index;
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
            $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);

            
            if($requestData['is_adv_page'] == 1){
                $column_in_number_format = ['D','E'];
                if($c > 5) {
                    $column_in_number_format = ['E','F'];
                }
            } else{
                $column_in_number_format = ['E','F'];    
            }
            setColumnNumberFormat($objPHPExcel, $column_in_number_format);

            foreach($data_list as $key => $val){
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":".$last_column.$i)->applyFromArray($styleRowsBrand);

                $header_array = array('A'.$i=>'Brand Name','B'.$i=>'Creatives','C'.$i=>'Category','D'.$i=>'Price','E'.$i=>'Airings','F'.$i=>$spendColHeading,'G'.$i=>'Weeks');
                foreach($header_array as $a => $b){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($a,$b);
                }
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('G'.$i.':'.$last_column.$i);
                $i++;
                $resp_array = array('A'.$i=>$val['brand_name'],'B'.$i=>$val['creatives_count'],'C'.$i=>$val['category_name'],'D'.$i=>$val['price'],'E'.$i=>$val['airings'],'F'.$i=>$val['hidden_spend_index'],'G'.$i=>$val['total_weeks']);

                foreach($resp_array as $k => $v){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k,$v);
                }
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('G'.$i.':'.$last_column.$i);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsBrand);

                //for creatives list by brand 
                $i++;
                $requestData['brand_id']    =  $val['id'];
                $creative_data_list = brandCreatives($export,$requestData);
                if($requestData['is_adv_page'] == 1) {
                    $header_array = array('B'.$i=>'Creatives','C'.$i=>'Language','D'.$i=>'Classification','E'.$i=>'Airings','F'.$i =>$spendCreativeColHeading ,'G'.$i=>'First Aired','H'.$i=>'Last Aired','I'.$i=>'Play');
                } else {
                    $header_array = array('B'.$i=>'Creatives','C'.$i=>'Classification','D'.$i=>'Airings','E'.$i =>$spendCreativeColHeading,'F'.$i=>'First Aired','G'.$i=>'Last Aired','H'.$i=>'Play');
                }

                foreach($header_array as $c => $d){
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($c,$d);
                }
                $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleRowsCat);
                $i++;
                foreach($creative_data_list as $e => $f){
                    $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                    if($requestData['is_adv_page'] == 1) {
                        $resp_array = array('B'.$i=>$f['creative_name'],'C'.$i=>$f['language'],'D'.$i=>$f['classification'],'E'.$i=>$f['airings'],'F'.$i=>$f['hidden_spend_index'],'G'.$i=>dateFormateForGridDate($f['first_detection']),'H'.$i=>dateFormateForGridDate($f['last_aired']),'I'.$i=>'Play');
                    } else {
                        $resp_array = array('B'.$i=>$f['creative_name'],'C'.$i=>$f['classification'],'D'.$i=>$f['airings'],'E'.$i=>$f['hidden_spend_index'],'F'.$i=>dateFormateForGridDate($f['first_detection']),'G'.$i=>dateFormateForGridDate($f['last_aired']),'H'.$i=>'Play');
                    }
                    foreach($resp_array as $g => $h){
                        if($h == 'Play'){
                            $url = $url = HOST.'/drmetrix/video/'.$f['video'].'?video=1';
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, 'Play');
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getFont()->setColor( $phpColor );
                            $objPHPExcel->setActiveSheetIndex(0)->getCell($g)->getHyperlink('Play')->setUrl('http://'.$url);
                        }else{            
                            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($g, $h);
                        }
                        $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                        if($g[0] == 'D' || $g[0] == 'E' || $g[0] == 'F'){
                            $objPHPExcel->getActiveSheet()->getStyle($g)->getAlignment()->applyFromArray(
                                array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                            );
                        }
                    }
                    $i++;
                }
                $i++;
            }
            $form = "long_form";
        }
            $title = str_replace("xxxxxx","&",'DRM '.clean($requestData['type_parent_data'][0])).' All Brands '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        $sheet_name = 'Brand List';
        $requestData['brand_id']    =  $_REQUEST['adv_id'];
    }elseif ($requestData['type'] == "brand") { //for Brand -> creatives
        $i++;
        $requestData['brand_id']    =  $_REQUEST['adv_id'];        
        $data_list = brandCreatives($export,$requestData);
        $no_of_rows = count($data_list);
        $requestData['no_of_rows'] = $no_of_rows;

        if($requestData['is_adv_page'] == 1){
            if($requestData['c'] > 5) {
                $column_in_number_format = ['D','E'];
            }else {
                $column_in_number_format = ['E','F'];
            }
        }else{
            if($requestData['c'] > 5) {
                $column_in_number_format = ['D','E'];
            }else {
                $column_in_number_format = ['E','F'];
            }
        }
        setColumnNumberFormat($objPHPExcel, $column_in_number_format);
        if ($no_of_rows < MAX_NO_OF_RECORDS_FOR_EXCEL) {
            if($requestData['tab'] == 'adv_brand') {
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Brand - '.str_replace("xxxxxx","&",$requestData['is_adv_page'] == 1 ? $requestData['type_parent_data'][1] : $requestData['type_parent_data'][0]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias);
                
            } else {
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A1','Brand - '.str_replace("xxxxxx","&",$requestData['is_adv_page'] == 1 ? $requestData['type_parent_data'][1] : $requestData['type_parent_data'][12]).' '.date('m-d-y', strtotime($sd)).' thru '.date('m-d-y', strtotime($ed)) . $network_alias);
                $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(20);
            }
            if($requestData['c'] != 6 && $requestData['c'] != 7){
                $cat_name = displayNameInExportExcel($requestData['type_parent_data'][3]);

                if($requestData['tab'] == 'adv_brand'){
                    $cat_name = displayNameInExportExcel($requestData['type_parent_data'][2]);
                    $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][1].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][3].' | '.$spendHeading. ' - $'.$requestData['type_parent_data'][9].' | '.'National - '.$requestData['type_parent_data'][5].' | '.'DPI - '.$requestData['type_parent_data'][6].' | '.'ASD - '.$requestData['type_parent_data'][7].' | '.'Weeks - '.$requestData['type_parent_data'][8];
                }else{
                    if($requestData['is_adv_page'] == 1){
                        $cat_name = displayNameInExportExcel($requestData['type_parent_data'][4]);
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][3].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][5]).' | '.'Airings - '.$requestData['type_parent_data'][6].' | '.$spendHeading. '- $'. $requestData['type_parent_data'][7].' | '.'National - '.$requestData['type_parent_data'][13].' | '.'DPI - '.$requestData['type_parent_data'][14].' | '.'ASD - '.$requestData['type_parent_data'][15].' | '.'Weeks - '.$requestData['type_parent_data'][16];
        
                    } else {
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][2].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][4]).' | '.'Airings - '.$requestData['type_parent_data'][5].' | '.$spendHeading. ' - $'.$requestData['type_parent_data'][6].' | '.'National - '.$requestData['type_parent_data'][14].' | '.'DPI - '.$requestData['type_parent_data'][15].' | '.'ASD - '.$requestData['type_parent_data'][16].' | '.'Weeks - '.$requestData['type_parent_data'][17];
                    }
                }

                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);


                if($requestData['is_adv_page'] == 1){
                    $last_column = 'K';
                    $header_array = array('A3'=>'Creatives','B3'=>'Language','C3'=>'Classification','D3'=>'Duration','E3'=>'Airings','F3'=>$spendColHeading,'G3'=>'National %','H3'=>'DPI %','I3'=>'First Aired','J3'=>'Last Aired','K3'=>'Play');

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:K1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:K1")->applyFromArray($styleHeader);
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:K2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:K2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":K".(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:K3")->applyFromArray($styleRows);
                    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K');
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            $resp_array = array('A'.$i=>$val['creative_name'],'B'.$i=>$val['language'],'C'.$i=>$val['classification'],'D'.$i=>$val['duration'],'E'.$i=>$val['airings'],'F'.$i=>$val['hidden_spend_index'],'G'.$i=>$val['national'],'H'.$i=>$val['local'],'I'.$i=>dateFormateForGridDate($val['first_detection']),'J'.$i=>dateFormateForGridDate($val['last_aired']),'K'.$i=>'Play'); 
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                if($k[0] == 'D' || $k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I' || $k[0] == 'J' || $k[0] == 'K' ){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }

                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':K'.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    foreach($col_arr as $p => $q){
                        $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
                        if($q == 'A'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("70");
                        }else if($q == 'C' || $q == 'I'  || $q == 'J' || $q == 'E' || $q == 'F'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("30");
                        }else{
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("10");
                        }
                    }

                } else {
                    $lastColumn = 'K';
                    // $headings = array('Creatives','Language',Classification','Duration','Airings','Spend','National %','Local %','First Aired','Last Aired','Play');

                    // for($char = 'A', $i = 0; $char <= $lastColumn, $i <count($headings) ; $i++,$char++) {
                    //     $header_array = array($char.'3' => $headings[$i]);
                    // }

                    $header_array = array('A3'=>'Creatives','B3'=>'Language','C3'=>'Classification','D3'=>'Duration','E3'=>'Airings','F3'=>$spendColHeading,'G3'=>'National %','H3'=>'DPI %','I3'=>'First Aired','J3'=>'Last Aired','K3'=>'Play');
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$lastColumn.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$lastColumn."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$lastColumn.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$lastColumn."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$lastColumn.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$lastColumn."3")->applyFromArray($styleRows);
                    $col_arr = array('A','B','C','D','E','F','G','H','I','J');
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$lastColumn.($i))->applyFromArray($styleArray, False);
                            $resp_array = array('A'.$i=>$val['creative_name'],'B'.$i=>$val['language'],'C'.$i=>$val['classification'],'D'.$i=>$val['duration'],'E'.$i=>$val['airings'],'F'.$i=>$val['hidden_spend_index'],'G'.$i=>$val['national'],'H'.$i=>$val['local'],'I'.$i=>dateFormateForGridDate($val['first_detection']),'J'.$i=>dateFormateForGridDate($val['last_aired']),'K'.$i=>'Play'); 
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                if($k[0] == 'D' || $k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I' || $k[0] == 'J' || $k[0] == 'K'){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }

                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':J'.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    foreach($col_arr as $p => $q){
                        $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
                        if($q == 'A'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("70");
                        }else if( $q == 'C' ||  $q == 'I' || $q == 'J' ){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("30");
                        }else if ( $q == 'H' || $q == 'F'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("18");
                        }else if ($q == 'E'  ){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("12");
                        }else {
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("10");
                        }
                    }
                }
                $form = "short_form";
            }else{
                $cat_name = displayNameInExportExcel($requestData['type_parent_data'][3]);
                if($requestData['tab'] == 'adv_brand'){
                    $cat_name = displayNameInExportExcel($requestData['type_parent_data'][2]);
                    $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][1].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][3].' | '.$spendHeading.' - $'.$requestData['type_parent_data'][4].' | '.'Weeks - '.$requestData['type_parent_data'][5];
                }else{
                    if($requestData['is_adv_page']){
                        $cat_name = displayNameInExportExcel($requestData['type_parent_data'][4]);
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][3].' | '.'Category - '.$cat_name.' | '.'Advertiser - '.str_replace("xxxxxx","&",$requestData['type_parent_data'][5]).' | '.'Airings - '.$requestData['type_parent_data'][6].' | '.$spendHeading .'- $'.$requestData['type_parent_data'][7].' | '.'Weeks - '.$requestData['type_parent_data'][13];
                    } else {
                        $type_parent_str = 'Creatives - '.$requestData['type_parent_data'][2].' | '.'Category - '.$cat_name.' | '.'Airings - '.$requestData['type_parent_data'][5].' | '.$spendHeading.' - $'.$requestData['type_parent_data'][6].' | '.'Weeks - '.$requestData['type_parent_data'][14];
                    }

                }
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A2',$type_parent_str);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);

                if($requestData['is_adv_page'] == 1) {
                    $last_column = 'H';
                    $header_array = array('A3'=>'Creatives','B3'=>'Language','C3'=>'Classification','D3'=>'Airings','E3'=>$spendColHeading,'F3'=>'First Aired','G3'=>'Last Aired','H3'=>'Play');
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$last_column.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$last_column."3")->applyFromArray($styleRows);
                    $col_arr = array('A','B','C','D','E','F','G','H');
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            $resp_array = array('A'.$i=>$val['creative_name'],'B'.$i=>$val['language'],'C'.$i=>$val['classification'],'D'.$i=>$val['airings'],'E'.$i=>$val['hidden_spend_index'],'F'.$i=>dateFormateForGridDate($val['first_detection']),'G'.$i=>dateFormateForGridDate($val['last_aired']),'H'.$i=>'Play'); 
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                if($k[0] == 'D' || $k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H'  ){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                                // if($k[0] == 'E'){
                                //     $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                //         array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,)
                                //     );
                                // }
                            }
                            $i++;
                        }
                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':'.$last_column.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    foreach($col_arr as $p => $q){
                        $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
                        if($q == 'A'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("70");
                        }else if($q == 'C' || $q == 'G'  || $q == 'F' || $q =='D'|| $q == 'E'  ){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("30");
                        }else{
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("10");
                        }
                    }
                } else {
                    $last_column = 'H';
                    $header_array = array('A3'=>'Creatives','B3'=>'Language','C3'=>'Classification','D3'=>'Airings','E3'=>$spendColHeading,'F3'=>'First Aired','G3'=>'Last Aired','H3'=>'Play');
                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:'.$last_column.'1');
                    $objPHPExcel->getActiveSheet()->getStyle("A1:".$last_column."1")->applyFromArray($styleHeader);

                    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A2:'.$last_column.'2');
                    $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

                    $objPHPExcel->getActiveSheet()->getStyle("A".(3).":".$last_column.(3))->applyFromArray($styleArray, False);
                    $objPHPExcel->getActiveSheet()->getStyle("A3:".$last_column."3")->applyFromArray($styleRows);
                    $col_arr = array('A','B','C','D','E','F','G');
                    if(!empty($data_list)){
                        foreach($data_list as $key => $val){
                            $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
                            $resp_array = array('A'.$i=>$val['creative_name'],'B'.$i=>$val['language'],'C'.$i=>$val['classification'],'D'.$i=>$val['airings'],'E'.$i=>$val['hidden_spend_index'],'F'.$i=>dateFormateForGridDate($val['first_detection']),'G'.$i=>dateFormateForGridDate($val['last_aired']),'H'.$i=>'Play');
                            foreach($resp_array as $k => $v){
                                if($v == 'Play'){
                                    $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                                    $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
                                }else{
                                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
                                }
                                $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);
                                if($k[0] == 'C' || $k[0] == 'D' || $k[0] == 'E'|| $k[0] == 'F'|| $k[0] == 'G'|| $k[0] == 'H'){
                                    $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                                    );
                                }
                            }
                            $i++;
                        }
                    }else{
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':'.$last_column.$i);
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
                        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                        );
                    }
                    foreach($col_arr as $p => $q){
                        $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setAutoSize(false);
                        if($q == 'A'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("70");
                        }else if($q == 'B'  || $q == 'C' || $q == 'E' || $q == 'F' || $q == 'D'|| $q == 'G'){
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("30");
                        }else{
                            $objPHPExcel->getActiveSheet()->getColumnDimension($q)->setWidth("10");
                        }
                    }
                }

                $form = "long_form";            
            }
            foreach($header_array as $x => $y){
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($x,$y);
            }
            $sheet_name = 'Creatives List';           
        }else{
            $requestData['status'] = "inprogress";
            if($requestData['c'] != 6 && $requestData['c'] != 7){
                $form = "short_form";  
            }else{
                $form = "long_form";  
            }
            $flag = 0;
            
        }
        if($requestData['tab'] == 'adv_brand') {
            $title = str_replace("xxxxxx","&",'DRM '.clean($requestData['type_parent_data'][0])).' All Creatives '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        } else {
            $title = str_replace("xxxxxx","&",'DRM '.clean($requestData['type_parent_data'][1])).' All Creatives '.date('m-d-y', strtotime($sd)).' till '.date('m-d-y', strtotime($ed)).'_time_'.date('m-d-y_His');
        }
    }
    if($requestData['type'] == "advertiser"){
        $nCols = 15; //set the number of columns
        foreach (range(0, $nCols) as $col) {
            $objPHPExcel->getActiveSheet()->getColumnDimensionByColumn($col)->setAutoSize(true);                
        }
    }

    $objPHPExcel->getActiveSheet()->setTitle($sheet_name);

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    //$objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));

    $dir_name       = createDir($user_id);
    $file_name      = $dir_name.$title;
    $newFilePath    = $file_name.'.xlsx';

    $requestData['header_text'] = addslashes($title.'.xlsx');
    $requestData['file_path']   = addslashes($newFilePath);
    $requestData['email_alert'] = 0;
    $requestData['network_ids'] = NULL;
    $requestData['dow']         = NULL; 
    $requestData['hod']         = NULL;
    $requestData['query']       = NULL;
    $requestData['progress']    = 100;
    $requestData['task_initiated_on'] = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on'] = standardDateTimeFormat('Y-m-d H:i:s');
   
    //updateDontAskMe($requestData['ask_me']);

    if($flag){
        /*$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');*/

        $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
        $objWriter->setOffice2003Compatibility(true);
        $objWriter->save($newFilePath);
        //$filesize = calculateFileSize(addslashes($newFilePath));
        //$requestData['filesize'] = $filesize;
        $db_obj                 = addExcelExportInfo($requestData);
        $last_insert_export_id  = $db_obj->lastInsertId();
        updateDownloadsCountInZoho($user_id);
        $exportedData           = fetchLastExportedData($last_insert_export_id);
        echo json_encode(array('status'=>1, 'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
        //header('Content-Type: application/vnd.ms-excel');
        //header('Content-Disposition: attachment;filename='.$title.'.xlsx');
        //header('Cache-Control: max-age=0');
        // If you're serving to IE 9, then the following may be needed
        //header('Cache-Control: max-age=1');
        //$objWriter->save('php://output');
        //exit;
    }
}

function getBrandAdvbyId($type, $id){
    if($type == 'brand'){
        $select_sql = "SELECT display_name FROM advertiser WHERE adv_id = '".$id."'";
    }else if($type == 'creative'){
        $select_sql = "SELECT brand_name FROM brand WHERE brand_id = '".$id."'";
    }
    try {
        $db = getConnection();
        $result = execute_query_get_result($select_sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($select_sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/           
         if((!empty($result))){            
             return $result;
         }             
    } catch(PDOException $e) {
        echo '{"error":{"text":'. $e->getMessage() .'}}';
    }
}

function dateFormatForExcel($date){
    return date('m/d/Y', strtotime($date));
}

function displayNameInExportExcel($name){
    $opt_name = str_replace("xxxxxx","&",$name);
    if(strlen($opt_name) > 40){
        $opt_name = substr($opt_name, 0, 40).'...';
    }
    return $opt_name;
}

function addExcelExportInfo($requestData){
    if($requestData['type'] == 'network_list' || $requestData['type'] == 'refine_list' ){
        $filesize = 0;
    }else{
        $start_pos = strpos($requestData['file_path'], '{');
        $end_pos = strpos($requestData['file_path'], '}');
      
       if($start_pos > -1 && $end_pos > -1)
       {
            $filesize = 0;
       } else {
            $filesize = calculateFileSize(stripslashes($requestData['file_path']));
       }
    }
    
    $cparts   = explode(',', urldecode($requestData['c']));
    $classification = '';

    for ($i = 0; $i < sizeof($cparts); $i++) {
        switch ($cparts[$i]) {
            case '1':
                $classification = 'All Short Form';
                break;
            case '2':
                $classification .= ",Short Form Products";
                break;
            case '3':
                $classification .= ",Lead Generation";
                break;
            case '4':
                 $classification .= ",Brand/DR";
                break;
            case '5':
                $classification .= ",AsOnTV Retail Rankings";
                break;
            case '6':
                 $classification .= "28.5m Creative";
                break;
            case '7':
                $classification .= ",AsOnTV Retail Rankings (28.5m)";
                break;
        }
    }
    $requestData['classification'] = trim($classification,",");
    $length = "short";
    if($requestData['c'] == 6 || $requestData['c'] == 7){
        $length = "long";
    }
    $requestData['report_length'] = $length;
    
    if(isset($requestData['dp_day']) && !empty($requestData['dp_day'])){
        $rosDay     = urldecode($requestData['dp_day']);
        $rosDay     = explode('-',$rosDay);
        $rosDay     = substr($rosDay[0],0,1).'-'.substr($rosDay[1],0,1);
    }else{
        $rosDay     = '';
    }
    if(isset($requestData['dp_time']) && !empty($requestData['dp_time'])){
        $rosTime    = urldecode($requestData['dp_time']);
        $rosTime    = explode('-',$rosTime);
        $rosTime1   = explode(' ', $rosTime[0]);
        $rosTime2   = explode(' ', $rosTime[1]);
        
        $rosTime_new1 = explode(':', $rosTime1[0]);
        $rosTime_new2 = explode(':', $rosTime2[1]);
        
        $rosTime    = $rosTime_new1[0].''.substr($rosTime1[1],0,1).'-'.$rosTime_new2[0].''.substr($rosTime2[2],0,1);
        
    }else{
        $rosTime    = '';
    }
    if(isset($requestData['screen']) && !empty($requestData['screen'])){
        $screen     = $requestData['screen'];
    }
    else{
        $screen     = '';
    }

    if(!isset($_SESSION['username']) && !isset($_SESSION['user_id'])){
        $username = $requestData['username'];
        $user_id  = $requestData['user_id'];
    }else{
        $username = $_SESSION['username'];
        $user_id  = $_SESSION['user_id'];
    }
    
    //filesize("test.txt");
    if (empty($requestData['dayparts'])) {
        $requestData['dayparts'] = '';
    }
     $sql = "INSERT INTO excel_exports SET 
                        user_id         = '".$user_id."', 
                        email           = '".addslashes($username)."',
                        query           = '".addslashes($requestData['query'])."',
                        requested_on    = '".standardDateTimeFormat('Y-m-d H:i:s')."',
                        header_text     = '".addslashes(html_entity_decode($requestData['header_text']))."',
                        file_path       = '".addslashes(str_replace('/staging', '', $requestData['file_path']))."',
                        excel_for       = '".$requestData['excel_for']."',
                        excel_for_id    = '".$requestData['brand_id']."',
                        report_type     = '".$requestData['type']."',
                        report_length   = '".$requestData['report_length']."',
                        day_type        = '".$requestData['day_type']."',
                        timespan        = '".$requestData['timespan']."',
                        from_date       = '".$requestData['sd']."',
                        to_date         = '".$requestData['ed']."',
                        no_of_records   = '".$requestData['no_of_rows']."',
                        inc_cmw         = '".$requestData['inc_cmw']."',
                        category_ids    = '".$requestData['category_ids']."',
                        media_date_range= '".$requestData['media_date_range']."',
                        classification  = '".$requestData['classification']."',
                        response_type   = '".addslashes($requestData['responseType'])."',
                        language        = '".urldecode($requestData['spanish'])."',
                        status          = '".$requestData['status']."',
                        email_alert     = '".$requestData['email_alert']."',
                        network_ids     = '".$requestData['network_ids']."',
                        dow             = '".$requestData['dow']."',
                        hod             = '".$requestData['hod']."',
                        dayparts        = '".$requestData['dayparts']."',
                        progress        = '".$requestData['progress']."',
                        task_initiated_on = '".$requestData['task_initiated_on']."',
                        task_completed_on = '".$requestData['task_completed_on']."',
                        filesize          = '".$filesize."',
                        screen            = '".$screen."',
                        rosDay            = '".$rosDay."',
                        rosTime           = '".$rosTime."',
                        environment_id    = '".ENVIRONMENT_ID."'
                        ";   
        $db = getConnection();
        $stmt = $db->prepare($sql);
        $stmt->execute();
        return $db;
}

function updateExistingFileSize(){
    $db = getConnection();
    $sql = "SELECT id,file_path FROM excel_exports WHERE filesize = ''";
    $result = getResult($sql);
    $filepath = array();
   
    if (count($result) > 0) {
        foreach($result as $key => $value ){
            $fileSize = calculateFileSize($value["file_path"]);
            $update_sql = 'UPDATE excel_exports SET filesize = "'.$fileSize.'" WHERE id = '.$value["id"];
            $stmt = $db->prepare($update_sql);
            $stmt->execute();
        } 
        echo 'result updated';
    } else {
        echo "0 results";
    }
}

function saveFilterReportData(){
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    
   // $name           = urldecode(str_replace("'", "", $requestData['name']));
   $name           = cleanFileName($requestData['name']);
   $name           = urldecode($name);
   $rowid          = $requestData['rowid'];

   $params_for_my_filter['name']    = $brand_class = $name;
   $params_for_my_filter['id']      = $rowid;

     try{
        $db   = getConnection(); 
        $sql  = __query_update_for_my_filters($params_for_my_filter); 
        execute_sql($sql);

        $type_id = $rowid;
        $user_id = $_SESSION['user_id'];
        $sql     = 'UPDATE tracking_and_alerts SET classification = "' . $brand_class . '" WHERE user_id = ' . $user_id . ' AND alert_type = "filter" AND type_id = "' . $type_id . '";';
        execute_sql($sql);

        echo json_encode(array('status'=> 1));
    } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
}

function saveInlineEditReportData(){
    $db                                 = getConnection(); 
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    
   // $file_name      = urlDecode(str_replace("'", "", $requestData['file_name']));
    $file_name      = cleanFileName($requestData['file_name']);
    $file_name      = urldecode($file_name);
    
    
    $rowid          = $requestData['rowid'];
    $filepath       = urlDecode($requestData['file_path']);

    $params_for_my_report['file_name']  = $file_name;
    $params_for_my_report['id']         = $rowid;
   

    $file_name_array    = explode('/', $filepath);
    $file_name_withext  = $file_name_array[count($file_name_array) - 1];
    $extension          = explode('.',$file_name_withext);
    $old_file_path      = str_replace($file_name_withext, '', $filepath);

    try {
        $sql        = __query_get_report_data_for_id($params_for_my_report); 
        $stmt       = $db->prepare($sql);
        $stmt->execute();
        $obj        = $stmt->fetchAll(PDO::FETCH_OBJ);
       
        if ($obj[0]->no_of_records > THRESHOLD_FOR_PHPEXCEL){
            $default_extension = 'csv';
        }else{
            $default_extension = 'xlsx';
        }
        
        
        if(count($extension) > 1){
            $params_for_my_report['file_path']  = $newfilepath = $old_file_path.$file_name.'.'.$extension[1];
        } else {
            $params_for_my_report['file_path']  = $newfilepath = $old_file_path.$file_name.'.'.$default_extension;
        }

        $start_pos = strpos($filepath, '{');
        $end_pos = strpos($filepath, '}');
        
        if ($start_pos > -1 && $end_pos > -1) {
            $old_file_path = $obj[0]->file_path;
            $file_name_array    = explode('/', $old_file_path);
            $file_name_withext  = $file_name_array[count($file_name_array) - 1];
            $extension          = explode('.',$file_name_withext);

            $old_file_path      = str_replace($file_name_withext, '', $old_file_path);
            $params_for_my_report['file_path'] = $newfilepath = $old_file_path.$file_name.'.'.$extension[1];
            
        }
    
        $filepath   = $obj[0]->file_path;
        $sql        = __query_update_for_my_report($params_for_my_report); 
        execute_sql($sql);
        moveFiles($filepath , $newfilepath);
       
        echo json_encode(array('command' => 'mv "'.$filepath.'" "'.$newfilepath.'"','status'=> 1));
    } catch (Exception $ex) {
        echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
}

function getAllFiltersData(){
    $db                                     = getConnection(); 
    $request                                = Slim::getInstance()->request();
    $query_string                           = json_decode($request->getBody());
    $params_excel_export_for_all_filters['page'] = $query_string->page;

    try {
        $sql    = __query_get_all_filter_data($params_excel_export_for_all_filters); 
        $stmt   = $db->prepare($sql);
        $stmt->execute();
        $obj    = $stmt->fetchAll(PDO::FETCH_OBJ);
        $return_arr = array();
        foreach($obj as $key => $value){
            $return_arr[$key]['name'] = $value->name;
            $return_arr[$key]['rowid'] = $value->id;
        }
        echo json_encode(array('status'=>1, 'return_arr' => $return_arr )); 
    }
    catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function getAllReportsData(){
    $db                                 = getConnection(); 
    try {
        $obj        = get_query_result('__query_get_all_report_data', array(), 'FETCH_OBJ');
        $return_arr = array();

        foreach($obj as $key => $value){
            $file_name_array        = explode('/', $value->file_path);
            $file_name_withext      = $file_name_array[count($file_name_array) - 1];
            $extension              = explode('.',$file_name_withext );
            $file_name_withoutext   = $extension[0];
            $return_arr[$key]['check_for_file'] = $file_name_withoutext;
            $return_arr[$key]['file_path'] = $value->file_path;
            $return_arr[$key]['rowid'] = $value->id;
        }
        echo json_encode(array('status'=>1, 'return_arr' => $return_arr )); 
    }
    catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}


function getMyReportsData(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $requestData = (array)json_decode($query_string, TRUE);
    $data = array();
    $download_link                      = '';
    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $userId                             = $_SESSION['user_id'];//$requestData['userId'];
    
    $result_excel_for                   = array();
    $result_excel_for_id                = array();
    $params_excel_export_for_my_report['userId'] = $userId;
    
     $columns = array( 
            'report_type'       => 'ex.report_type',
            'filesize'          => 'ex.filesize',
            'file_name'         =>'file_name',
            'created'           => 'ex.requested_on',
            'shared_date'       => 'ex.shared_date', 
            'valid_till'        => 'valid_till',
            'shared_valid_till' => 'shared_valid_till',
            'full_name'         => 'full_name'
        ); 
        $sql    = __query_excel_export_for_my_report($params_excel_export_for_my_report); 
        $stmt   = $db->prepare($sql);
        $stmt->execute();
        $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $totalData  = count($obj);
        $count      = $totalData;
        
        
        //Calculate paging related values $total_pages, $page
        if ($count > 0) {
          $total_pages = ceil($count / $limit);
        } else {
          $total_pages = 0;
        }

        if ($page > $total_pages) {
          $page = $total_pages;
        }

        //Calculate offset for dataQuery
        $offset = $limit * $page - $limit;

        if ($offset < 0) {
          $offset = 0;       
        }

    $_order_by = $columns[$sidx] ." ".$sord; //LIMIT ".$offset. ", ".$limit;
    $order_by = " ORDER BY ".$_order_by;
    $params_excel_export_for_my_report['order_by'] = $order_by;
    $sql    = sprintf(__query_excel_export_for_my_report($params_excel_export_for_my_report));    
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
    $params['user_id']  = $_SESSION['user_id'];
    $get_result         = get_query_result('__query_get_user_info_by_id', $params, 'FETCH_OBJ'); 
    $assistant_admin    = $get_result[0]->assistant_admin;
    $_SESSION['full_name']    = $get_result[0]->full_name;
    if(!empty($obj)){
        foreach($obj as $result_key => $result){
            $params_excel_export_for_name['excel_for']      = $result['excel_for'];
            $params_excel_export_for_name['excel_for_id']   = $result['excel_for_id'];
        }  
        
        $nestedData=array();   
        $class = '';
        foreach($obj as $result_key => $result){
            $valid_til              = date("m/d/Y",strtotime($result['valid_till']));
            $shared_valid_till      = date("m/d/Y",strtotime($result['shared_valid_till']));
            $todays_date                    = date("m/d/Y");
            $nestedData['status'] = $result['status'];
            if(strtotime($todays_date) <= strtotime($valid_til)){
                if($result['status'] == 'completed'){
                    $disabled = 'disabled = disabled';
                    $class    = 'other-opa';

                    $download_link = 'http://' . str_replace('', '', HOST) . "/drmetrix/api/index.php/downloadClientFiles?code=".base64_encode("email={$result['email']}&id={$result['id']}");
                    $download_link = '<a href="'.$download_link.'" target="_blank">Download</a>';
                    $nestedData['disabled'] = $disabled;
                    $nestedData['class'] = $class;

                } else {
                    $percentage = $result['progress'];
                    $nestedData['percentage'] = $percentage;
                    $download_link = '
                    <div class="c100 p'.$percentage.' small">
                        <span>'.$percentage.'%</span>
                        <div class="slice">
                            <div class="bar"></div>
                            <div class="fill"></div>
                        </div>
                    </div>
                    ';       
                    $disabled = '';
                    $class    = '';
                    $nestedData['disabled'] = $disabled;
                    $nestedData['class'] = $class;

                }
                $sharedDate = '';
                $nestedData['created']          = date("m/d/Y",strtotime($result['requested_on']));
                if(!empty($result['shared_date'])) {
                    $sharedDate =  date("m/d/Y",strtotime($result['shared_date'])); 
                }
                $nestedData['shared_date']              = $sharedDate;
                $nestedData['valid_till']               = $valid_til;
                $nestedData['shared_valid_till']        = $shared_valid_till;

                if($result['email_alert'] == 1){
                    $checked                    =  'checked = checked';
                    $nestedData['checked'] = $checked;
                }else{
                    $checked                    =   '';
                    $nestedData['checked'] = $checked;
                }

                $delete_file                    = '<div class="header-icons checkbox"><input type="checkbox" id="delete_check_'. $result['id'].'" name="delete_check[]" onClick="checkDelete('.$result['id'].');" class="checkbox-custom"><label class="checkbox-custom-label"></label></div><a title="delete" class="delete_file" id="delete_file_'. $result['id'].'" ><img class="header-img" src="/drmetrix/assets/img/delete-icon-grey.svg" /></a>';

                $email_alert                    = '<div class="checkbox"><input type="checkbox"  '.$disabled.' id="email_alert_'.$result['id'].'" name="email_alert" class="email_alert checkbox-custom" onclick="updateEmailAlerts('.$result['id'].');" '.$checked.'><label class="checkbox-custom-label '.$class.'" for="email_alert_'.$result['id'].'"></label></div>';

                $checked_shared_report = $checked_copy_report = '';
                $disabled_shared_report = $disabled_class =  $disable_copy_report = $disabled_copy_report_class = '';
            // if(!empty($result['shared_by']) && $result['shared_by'] != $_SESSION['user_id']) {
                if((!empty($result['shared_by']) && $result['shared_by'] != $_SESSION['user_id'] ) ) {
                    $disabled_class             = 'other-opa';
                    $disabled_shared_report     = 'disabled = disabled';
                } else {
                    $disabled_copy_report_class             = 'other-opa';
                    $disable_copy_report                   = 'disabled = disabled';
                }
                
                if($result['status'] != 'completed') {
                    $disabled_class             = 'other-opa';
                    $disabled_shared_report     = 'disabled = disabled';
                    $disabled_copy_report_class             = 'other-opa';
                    $disable_copy_report                   = 'disabled = disabled';
                }

               
                if(!empty($result['shared_by'])){
                    $checked_shared_report  =  'checked = checked';
                }

                if(($result['parent_id'] != 0)){
                    $checked_copy_report  =  'checked = checked';
                }

                $shared_report                    = '<div class="checkbox"><input type="checkbox"  id="share_report_'.$result['id'].'" name="share_report" class="share_report checkbox-custom" onclick="updateShareReportStatus('.$result['id'].');" '.$checked_shared_report.' '.$disabled_shared_report.'><label class="checkbox-custom-label '.$disabled_class.'" for="share_report_'.$result['id'].'"></label></div>';

                $copy_report                     = '<div class="checkbox"><input type="checkbox"  id="copy_report_'.$result['id'].'" name="copy_report" class="copy_report checkbox-custom" onclick="copySharedReport('.$result['id'].');" '.$checked_copy_report.''.$disable_copy_report.'><label class="checkbox-custom-label '.$disabled_copy_report_class.'" for="copy_report_'.$result['id'].'"></label></div>';
        
                $nestedData['id']               = $result['id'];
                if(empty($result['file_path'])){
                    $sql = "SELECT * FROM excel_exports WHERE id =".$result['id'];
                    $rows = getResult($sql);
                    $nestedData['file_name']  = getFileNameFromExcelReportTables($rows[0]);
                } else {
                    $file_path = $result['file_path'];
                    $start_pos = strpos($file_path, '{');
                    $end_pos = strpos($file_path, '}');
                    if ($start_pos > -1 && $end_pos > -1) {
                        $sql = "SELECT * FROM excel_exports WHERE id =".$result['id'];
                        $rows = getResult($sql);
                        $downloaded_file_name = getFileNameFromExcelReportTables($rows[0]);

                        $dirName = dirname(addslashes($downloaded_file_name));
                        $find = array("{", "}");
                        $replace = array("");

                        $file_path = str_replace($find, $replace, $result['file_path']);

                        $info = pathinfo($downloaded_file_name);
                        $name = $info['filename'];
                        $ext = $info['extension'];
            
                        //$newFilePath = $dirName . '/' . $file_path . '.' . $ext;
                        $newFileName   = $file_path. '.' .$ext;
                        $nestedData['file_name']  = $newFileName;
                    } else{
                        $nestedData['file_name'] = substr( $result['file_path'], strrpos($result['file_path'], '/') + 1);
                    }
                }
                $nestedData['file_name']        = urldecode(stripslashes($nestedData['file_name']));
                $file_name_without_ext          = explode(".",$nestedData['file_name']);
                $nestedData['file_path']        = stripslashes($result['file_path']);
            // $nestedData['file_name']        = stripslashes($file_name_without_ext[0]);
                $nestedData['report_type']      = formatType($result['report_type']);
                $size                           = substr($result['filesize'], -2);
                $nestedData['filesize']         = $result['filesize'] ? round($result['filesize'], 2).' '.$size : '-';
                $nestedData['shared_by']        = $result['shared_by'] != '' ? $result['shared_by'] : ' ';
                $nestedData['email_alert']      = $email_alert;
                $nestedData['shared_report']    = $shared_report;
                $nestedData['full_name']        = $result['full_name'] ?  $result['full_name'] : $_SESSION['full_name'] ;
                $nestedData['copy_to_my_reports'] = $copy_report;
                $nestedData['delete_file']      = $delete_file;
                $nestedData['download_link']    = $download_link;
                $nestedData['status']           = $result['status'];
                $nestedData['user_id']          = $result['user_id'];
            
                /*  
                if($result['excel_for'] == 'creative'){
                    $nestedData['category']         = isset($result['category']) ? '<a onclick="fetchCatsForCreative('.$result['excel_for_id'].',\''.addslashes($result['category']).'\','.$result['id'].',\'my_report\');"><i class="fa fa-caret-down float-right" style="color: #666665;margin-top: 3px;"></i><p class="link-overflow" style="font-size: 12px; color: #00beff; margin-bottom: 0;">'. $result['category'].'</p></a><div class="cat_col_dropdown select_cat_dropdown" id="cat_col_dropdown_'.$result['id'].'" style="display:none;"></div>' :  '-' ;
                }else{
                $nestedData['category']         = isset($result['category']) ? '<a  onclick="fetchList('.$result['excel_for_id'].','.$tab.',\''.addslashes($result['category']).'\','.$result['id'].',\'my_report\');"><i class="fa fa-caret-down float-right" style="color: #666665;margin-top: 3px;"></i><p class="link-overflow" style="font-size: 12px; color: #00beff; margin-bottom: 0;">'. $result['category'].'</p></a><div class="cat_col_dropdown select_cat_dropdown" id="cat_col_dropdown_'.$result['id'].'" style="display:none;"></div>' :  '-' ;
                }
                $nestedData['filters_used']     = '<a onclick="fetchFilters('.$result['id'].');"><i class="fa fa-caret-down float-right" style="color: #666665;margin-top: 3px;"></i><p class="link-overflow" style="font-size: 12px; color: #00beff; margin-bottom: 0;">'.$result['media_date_range'].'</p></a><div class="filter_col_dropdown select_filter_dropdown" id="filter_col_dropdown_'.$result['id'].'" style="display:none;"></div>';*/
            
                $data[] = $nestedData;
        
            }
        }

        $json_data              = array();
        $json_data['rows']      = $data;
        $json_data['page']      = $page;
        $json_data['total']     = $total_pages;
        $json_data['records']   = $count; 
        echo json_encode($json_data); 
    }else{
        $json_data              = array();
         echo json_encode($json_data); 
    }   
}

function get_inprogress_data(){
    $db                                 = getConnection();
    if (empty($_REQUEST['id'])) { 
        echo json_encode(array('status'=>1, 'return_arr' => array())); 
        exit;
    }
    $reload_cells_id                    = implode(",",$_REQUEST['id']);
    $sql    = "SELECT id, email, status, progress, filesize, email_alert,  file_path, shared_by from excel_exports WHERE id IN (".$reload_cells_id.")";
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_OBJ);
    
    $return_arr = array();
    foreach($obj as $k => $v){
        $return_arr['status'] = $v->status;
        $id = $v->id;
        if($v->status == 'completed'){
            $download_link = 'http://' . str_replace('', '', HOST) . "/drmetrix/api/index.php/downloadClientFiles?code=".base64_encode("email={$v->email}&id={$v->id}");
            $download_link = '<a href="'.$download_link.'" target="_blank">Download</a>';

            $return_arr[$id]['download_link'] = $download_link;
        }else{
            $return_arr[$id]['progress'] = $v->progress;
        }
        $return_arr[$id]['email_alert']   = $v->email_alert;
        $return_arr[$id]['shared_by']     = $v->shared_by;
        $return_arr[$id]['status']        = $v->status;
        $size                             = substr($v->filesize, -2);
        $return_arr[$id]['filesize']      = $v->filesize ? round($v->filesize, 2).' '.$size : '-';
    }
    
    echo json_encode(array('status'=>1, 'return_arr' => $return_arr )); 
}

function deleteExcelRow(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $id                                = trim(urldecode($requestData['id']),",");
    
    if (!empty($id)) {
        $sql = "UPDATE excel_exports SET status = 'deleted' , parent_id = 0  WHERE id IN ( ".$id.")";
        $stmt = $db->prepare($sql);
        $stmt->execute();
        echo "Deleted";
    }
}

function updateShareFilter() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $filter_id_array                    = array();
    $id                                 = $requestData['id'];
    $share_filter_val                   = $requestData['share_filter'];
    $myFilterRecord                     = getMyFilters($id);
    $params['company_id']               = $_SESSION['company_id'];
    $params['check_contact']            = '0';
    $users                              = get_query_result('__query_get_user_of_company', $params, 'FETCH_OBJ');
    if($share_filter_val == 1) {
        $set_shared_by_col = 'shared_by = "'.$_SESSION['user_id'].'" , shared_date = "'.standardDateTimeFormat('Y-m-d H:i:s').'"';
    } else {
        $set_shared_by_col = 'shared_by = NULL , shared_date = NULL';
    }
    $sql = "UPDATE user_filters set $set_shared_by_col where id = ".$id;
    $stmt = $db->prepare($sql);
    $stmt->execute();

    $params['criteria'] = $myFilterRecord[0]->criteria;
    $email_schedulable = strpos(strtolower($params['criteria']), strtolower('Last Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Year - YTD')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Lifetime')) !== false;

    if($share_filter_val == 1) {
        foreach($users as $key => $value) {
            if($value->user_id != $_SESSION['user_id']) {
                $insert_sql = 'INSERT INTO user_filters (user_id,name,page,primary_tab,secondary_tab,query_string,criteria,status,created_date,shared_by,shared_filter_id,shared_date, programs, criteria_id, list_type, list_id) VALUES ("'.$value->user_id.'","'.$myFilterRecord[0]->name.'","'.$myFilterRecord[0]->page.'","'.$myFilterRecord[0]->primary_tab.'","'.$myFilterRecord[0]->secondary_tab.'","'.$myFilterRecord[0]->query_string.'","'.$myFilterRecord[0]->criteria.'","'.$myFilterRecord[0]->status.'","'.standardDateTimeFormat('Y-m-d H:i:s').'","'.$_SESSION['user_id'].'","'.$myFilterRecord[0]->id.'","'.standardDateTimeFormat('Y-m-d H:i:s').'", "'.$myFilterRecord[0]->criteria_id.'","'.$myFilterRecord[0]->list_type.'","'.$myFilterRecord[0]->list_id.'","'.$myFilterRecord[0]->programs.'")';
                $stmt    = $db->prepare($insert_sql);
                $stmt->execute();

                if($email_schedulable) {
                    $params['status']           = 'inactive';
                    $params['tracked_elements'] = $params['alert_type'] = 'filter';
                    $params['user_id']          = $value->user_id;
                    $params['created_date']     = customDate('Y-m-d H:i:s');
                    // $params['email_schedulable']= $email_schedulable = false;
                    $params['filter_name']      = $params['brand_class'] = $myFilterRecord[0]->name;
                    $params['frequency']        = 'none';
                    $params['type_id']          = $db->lastInsertId();
                    //$params['criteria']         = $myFilterRecord[0]->criteria;

                    execute_query('__query_set_tracking_details', $params, 'FETCH_OBJ');
                }
            }
        }
    } else {
        foreach($users as $key => $value) {
            array_push($filter_id_array, $value->user_id);

            if($email_schedulable && $myFilterRecord[0]->schedule_email ) {
                $params['user_id']        = $value->user_id;
                $params['type_id']        = $id;
                $params['schedule_email'] = 1;
                $params['alert_type'] = 'filter';
                execute_query('__query_delete_tracking_details', $params, 'FETCH_OBJ');
            }
        }
        $filter_ids = rtrim(implode(",",$filter_id_array),',');
        $delete_sql = "DELETE FROM user_filters WHERE user_id IN (".$filter_ids.") AND shared_filter_id = ".$myFilterRecord[0]->id;
        $stmt       = $db->prepare($delete_sql);
        $stmt->execute();
    }
    echo json_encode(array('status'=>1)); 
}

function updateScheduleEmail() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    // $filter_id_array                    = array();
    $id                                 = $requestData['id'];
    $frequency                          = str_replace('%2C', ",", $requestData['frequency']);
    $schedule_email_val                 = $requestData['schedule_email'] = $frequency && $frequency != 'none' ? 1 : 0;
    $export_refine_apply_filter         = $requestData['export_refine_apply_filter'];

    $params                     = array();
    $params['type_id']          = $id;
    $params['frequency']        = $frequency;
    $params['schedule_email']   = $schedule_email_val;
    $params['user_id']          = $_SESSION['user_id'];
    // $params['tracked_elements'] = $params['alert_type'] = 'filter';

    if($schedule_email_val == 1) {
        $set_schedule_email_col = 'schedule_email = 1, frequency = "'.$frequency.'"';
        $params['status']       =   'active';
    } else {
        $set_schedule_email_col = 'schedule_email = 0, frequency = "none"';
        $params['status']       =   'inactive';
    }
    $status  = execute_query('__query_update_tracking_details', $params, 'FETCH_OBJ');

    $sql = "UPDATE user_filters set $set_schedule_email_col where id = ".$id;
    $stmt = $db->prepare($sql);
    $stmt->execute();

    echo json_encode(array('status'=>1));

    $server = explode(':',$_SERVER['HTTP_HOST']);
    if($server[0] != "localhost" && $schedule_email_val == 1 && $_SESSION['tracking_alert_subscribed']) {
        require_once dirname(__FILE__) . '/PHPMailer/class.phpmailer.php';
        require_once dirname(__FILE__) . '/email-template/schedule_email_template.php';
        $user_name      = $_SESSION['full_name'];
        $user_id        = $_SESSION['user_id'];
        $user_email     = $_SESSION['username'];
        $report_filter  = 'filter';

        $params['selected_filter_id'] = $id;
        $result                 = get_query_result('__query_fetch_selected_filter_list', $params, 'FETCH_OBJ');
        $name_of_report_filter  = $result[0]->name;

        $email_content  = alert_email($user_name, $user_id, $frequency, $report_filter, $name_of_report_filter, $id);

        if ($email_content == '') {
            return false;
        }

        $subject    = 'Scheduling email alert ';
        $from_name  = FROM_NAME;
        $from_email = FROM_EMAIL;

        $to_name    = $user_name;
        $to_email   = $user_email;

        $body     = $email_content;
        $body     = wordwrap($body, 50);

        $mail     = new PHPMailer(); //New instance, with exceptions enabled
        $mail->IsSendmail();  // tell the class to use Sendmail
        $mail->SetFrom($from_email, $from_name);
        //$mail->addCustomHeader('MIME-Version: 1.0');
        //$mail->addCustomHeader('Content-Type: text/html; charset=ISO-8859-1');
        $mail->AddAddress($to_email, $to_name);
        $mail->Subject  = $subject;
        $mail->MsgHTML($body);
        $mail->MsgHTML(wordwrap($body, 50));
        $mail->IsHTML(true); // send as HTML

        $tracking_email_recipients_array = explode(",", TRACKING_EMAIL_RECIPIENTS);

        foreach ($tracking_email_recipients_array as $email_address) {
            $email_address = trim($email_address);
            $mail->addBCC($email_address, $email_address);
        }

        //echo $body;
        if ($mail->Send()) {
            // echo 'email sent';
        } else {
            echo 'error while sending an email';
        }
    }
}

function updateShareReport() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $excel_id_array                     = array();
    $id                                 = $requestData['id'];
    $share_report_val                   = $requestData['share_report'];
    $myReportRecord                     = getExcelExport($id);
    $params['company_id']               = $_SESSION['company_id'];
    $params['check_contact']            = '0';
    $users                              = get_query_result('__query_get_user_of_company', $params, 'FETCH_OBJ');
    if($share_report_val == 1) {
        $set_shared_by_col = 'shared_by = "'.$_SESSION['user_id'].'" , shared_date = "'.standardDateTimeFormat('Y-m-d H:i:s').'"';
    } else {
        $set_shared_by_col = 'shared_by = NULL , shared_date = NULL';
    }
    $sql = "UPDATE excel_exports set  ".$set_shared_by_col." where id = ".$id;
    $stmt = $db->prepare($sql);
    $stmt->execute();
        
    if($share_report_val == 1) {
        foreach($users as $key => $value) {
            if($value->user_id != $_SESSION['user_id']){
                $insert_sql = 'INSERT INTO excel_exports (user_id,email,query,requested_on,mail_sent,header_text,file_path,excel_for,excel_for_id,report_length,report_type,day_type,timespan,from_date,to_date,no_of_records,inc_cmw,category_ids,network_ids,media_date_range,classification,response_type,language,dow,hod,dayparts,status,task_initiated_on,task_completed_on,progress,email_alert,filesize,screen,rosDay,rosTime,shared_by,shared_excel_id,shared_date,environment_id) VALUES ("'.$value->user_id.'","'.$value->email.'","'.addslashes($myReportRecord[0]->query).'","'.standardDateTimeFormat('Y-m-d H:i:s').'","'.$myReportRecord[0]->mail_sent.'","'.addslashes($myReportRecord[0]->header_text).'","'.addslashes($myReportRecord[0]->file_path).'","'.$myReportRecord[0]->excel_for.'","'.$myReportRecord[0]->excel_for_id.'","'.$myReportRecord[0]->report_length.'","'.$myReportRecord[0]->report_type.'","'.$myReportRecord[0]->day_type.'","'.$myReportRecord[0]->timespan.'","'.$myReportRecord[0]->from_date.'","'.$myReportRecord[0]->to_date.'","'.$myReportRecord[0]->no_of_records.'","'.$myReportRecord[0]->inc_cmw.'","'.$myReportRecord[0]->category_ids.'","'.$myReportRecord[0]->network_ids.'","'.$myReportRecord[0]->media_date_range.'","'.$myReportRecord[0]->classification.'","'.$myReportRecord[0]->response_type.'","'.$myReportRecord[0]->language.'","'.$myReportRecord[0]->dow.'","'.$myReportRecord[0]->hod.'","'.$myReportRecord[0]->dayparts.'","'.$myReportRecord[0]->status.'","'.$myReportRecord[0]->task_initiated_on.'","'.$myReportRecord[0]->task_completed_on.'","'.$myReportRecord[0]->progress.'","'.$myReportRecord[0]->email_alert.'","'.$myReportRecord[0]->filesize.'","'.$myReportRecord[0]->screen.'","'.$myReportRecord[0]->rosDay.'","'.$myReportRecord[0]->rosTime.'", "'.$_SESSION['user_id'].'","'.$myReportRecord[0]->id.'","'.standardDateTimeFormat('Y-m-d H:i:s').'","'.ENVIRONMENT_ID.'")';
                $stmt    = $db->prepare($insert_sql);
                $stmt->execute();
            }
        }
    } else {
        foreach($users as $key => $value) {
            array_push($excel_id_array,$value->user_id );
        }
        $excel_ids = rtrim(implode(",",$excel_id_array),',');
        $delete_sql = "DELETE FROM excel_exports WHERE user_id IN (".$excel_ids.") AND shared_excel_id = ".$myReportRecord[0]->id;
        $stmt    = $db->prepare($delete_sql);
        $stmt->execute();
    }
    echo json_encode(array('status'=>1)); 
}

function copyShareReport() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $excel_id_array                     = array();
    $id                                 = $requestData['id'];
    $copy_report_val                   = $requestData['copy_report'];
    $myReportRecord                     = getExcelExport($id);
    $params['company_id']               = $_SESSION['company_id'];
    $params['check_contact']            = '0';
    if($copy_report_val == 1) {
        $dir_name                           = createDir($_SESSION['user_id']);
        $title                              = basename(addslashes($myReportRecord[0]->file_path));
        $file_name                          = $dir_name.$title;
        $newFilePath                        = $file_name;
        copy($myReportRecord[0]->file_path,$newFilePath);
        
        $insert_sql = 'INSERT INTO excel_exports (user_id,parent_id,email,query,requested_on,mail_sent,header_text,file_path,excel_for,excel_for_id,report_length,report_type,day_type,timespan,from_date,to_date,no_of_records,inc_cmw,category_ids,network_ids,media_date_range,classification,response_type,language,dow,hod,dayparts,status,task_initiated_on,task_completed_on,progress,email_alert,filesize,screen,rosDay,rosTime,environment_id) VALUES ("'.$_SESSION['user_id'].'","'.$id.'","'.$_SESSION['username'].'","'.addslashes($myReportRecord[0]->query).'","'.standardDateTimeFormat('Y-m-d H:i:s').'","'.$myReportRecord[0]->mail_sent.'","'.addslashes($myReportRecord[0]->header_text).'","'.addslashes($newFilePath).'","'.$myReportRecord[0]->excel_for.'","'.$myReportRecord[0]->excel_for_id.'","'.$myReportRecord[0]->report_length.'","'.$myReportRecord[0]->report_type.'","'.$myReportRecord[0]->day_type.'","'.$myReportRecord[0]->timespan.'","'.$myReportRecord[0]->from_date.'","'.$myReportRecord[0]->to_date.'","'.$myReportRecord[0]->no_of_records.'","'.$myReportRecord[0]->inc_cmw.'","'.$myReportRecord[0]->category_ids.'","'.$myReportRecord[0]->network_ids.'","'.$myReportRecord[0]->media_date_range.'","'.$myReportRecord[0]->classification.'","'.$myReportRecord[0]->response_type.'","'.$myReportRecord[0]->language.'","'.$myReportRecord[0]->dow.'","'.$myReportRecord[0]->hod.'","'.$myReportRecord[0]->dayparts.'","'.$myReportRecord[0]->status.'","'.$myReportRecord[0]->task_initiated_on.'","'.$myReportRecord[0]->task_completed_on.'","'.$myReportRecord[0]->progress.'","'.$myReportRecord[0]->email_alert.'","'.$myReportRecord[0]->filesize.'","'.$myReportRecord[0]->screen.'","'.$myReportRecord[0]->rosDay.'","'.$myReportRecord[0]->rosTime.'","'.ENVIRONMENT_ID.'")';
        $stmt    = $db->prepare($insert_sql);
        $stmt->execute();
    } else {
        $delete_sql = "DELETE FROM excel_exports WHERE parent_id IN (".$id.")";
        $stmt    = $db->prepare($delete_sql);
        $stmt->execute();
    }
    echo json_encode(array('status'=>1)); 
}

function copyShareFilter() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $excel_id_array                     = array();
    $id                                 = $requestData['id'];
    $copy_filter_val                    = $requestData['copy_filter'];
    $myFilterRecord                     = getMyFilters($id);
    $params['company_id']               = $_SESSION['company_id'];
    $params['check_contact']            = '0';

    $params['criteria'] = $myFilterRecord[0]->criteria;
    $email_schedulable = strpos(strtolower($params['criteria']), strtolower('Last Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Year - YTD')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Lifetime')) !== false;

    if($copy_filter_val == 1) {
        $insert_sql = 'INSERT INTO user_filters (user_id,parent_id,name,page,primary_tab,secondary_tab,query_string,criteria,status,created_date) VALUES ("'.$_SESSION['user_id'].'","'.$id.'","'.$myFilterRecord[0]->name.'","'.$myFilterRecord[0]->page.'","'.$myFilterRecord[0]->primary_tab.'","'.$myFilterRecord[0]->secondary_tab.'","'.$myFilterRecord[0]->query_string.'","'.$myFilterRecord[0]->criteria.'","'.$myFilterRecord[0]->status.'","'.standardDateTimeFormat('Y-m-d H:i:s').'")';
        $stmt    = $db->prepare($insert_sql);
        $stmt->execute();

        if($email_schedulable) {
            $params['status']           = 'inactive';
            $params['tracked_elements'] = $params['alert_type'] = 'filter';
            $params['user_id']          = $_SESSION['user_id'];
            $params['created_date']     = customDate('Y-m-d H:i:s');
            // $params['email_schedulable']= $email_schedulable = false;
            $params['filter_name']      = $params['brand_class'] = $myFilterRecord[0]->name;
            $params['frequency']        = 'none';
            $params['type_id']          = $db->lastInsertId();
            //$params['criteria']       = $myFilterRecord[0]->criteria;

            execute_query('__query_set_tracking_details', $params, 'FETCH_OBJ');
        }
    } else {
        $delete_sql = "DELETE FROM user_filters WHERE parent_id IN (".$id.")";
        $stmt    = $db->prepare($delete_sql);
        $stmt->execute();

        if($email_schedulable) {
            /*$params['user_id']        = $value->user_id;
            $params['type_id']        = $id;
            $params['schedule_email'] = 1;
            execute_query('__query_delete_tracking_details', $params, 'FETCH_OBJ');*/

            $delete_sql = "DELETE FROM tracking_and_alerts WHERE alert_type = 'filter' and user_id = ".$_SESSION['user_id']." and type_id = (select id from user_filters where user_id = ".$_SESSION['user_id']." and parent_id = ".$id.");";
            $stmt       = $db->prepare($delete_sql);
            $stmt->execute();
        }
    }
    echo json_encode(array('status'=>1));
}

function updateEmailAlerts(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    
    $id                                 = $requestData['id'];
    $email_alert_val                    = $requestData['email_alert'];
    
    $sql = "UPDATE excel_exports set email_alert = $email_alert_val where id = ".$id;
    $stmt = $db->prepare($sql);
    $stmt->execute();
    
     echo json_encode(array('status'=>1)); 
}

function enableDisableExcelPopup(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $userId                                 = $user_id = $_SESSION['user_id'];
    $excel_download_popup                   = $requestData['excel_download_popup'];

    $excel_download_popup;
    $sql = "UPDATE user set excel_download_popup = $excel_download_popup where user_id = ".$userId;
    $stmt = $db->prepare($sql);
    $stmt->execute();
    
    echo "Updated";
}

//downloadClientFiles?code=ZW1haWw9dWRkZXNoLmtvbmRla2FyQHYyc29sdXRpb25zLmNvbSZpZD0y;
//email=email_id&id=table_id
//HOST.downloadClientFiles?code=base64_encode("email=$email_id&id=$table_id");
function downloadClientFiles () {
   /*if(!isset($_SESSION['user_id'])){
       header("Location: http://".HOST."/drmetrix/");
       exit;
   }else{*/
        $excel_export_details = base64_decode($_REQUEST['code']);
        parse_str($excel_export_details, $queryString);
        extract($queryString);

        $db = getConnection();
        $sql = "SELECT * FROM `excel_exports` where email = '{$email}' AND id = '{$id}' AND DATEDIFF(CURRENT_DATE, task_completed_on) < " . EXCEL_FILE_EXPIRY_DAYS;
        $rows = getResult($sql);
        if (count($rows) == 1) {
            extract($rows[0]);
            if (file_exists(stripslashes($file_path))) {
                $file_name              = explode('../excels/', $file_path);
                if (strpos($file_path, '/www/html/staging/') !== false) {
                    $host = DRMBETA;
                 } else if (strpos($file_path, '/www/html/qa/') !== false) {
                        $host = DRMQA;
                 }  else if (strpos($file_path, '/www/html/dev/') !== false) {
                        $host = DRMDEV;
                 } else if (strpos($file_path, '/www/html/') !== false) {
                        $host = ADSPHERE;
                 } else {
                        $host = HOST;
                }
                header('Location: http://'.$host.'/drmetrix/excels/'.stripslashes($file_name[1]));
                exit;
            }
            echo 'File not found';
        } else {
            echo 'File expired';
        }
   //}
}

function updateDontAskMe($ask_me){
    $db = getConnection();
    $user_id = $_SESSION['user_id'];
    $sql = "UPDATE user SET excel_download_popup = '".$ask_me."' WHERE user_id = '".$user_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function CheckAskAlertOpt(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData = $raw_data = array();
    if(isset($set_one[0])){
        foreach($set_one as $k =>$v){
            $raw_data                       = explode('=',$v);
            if(!empty($raw_data[1])){
                $requestData[$raw_data[0]]      = $raw_data[1];
            }
        }
    }

    $db = getConnection();
    $user_id = $_SESSION['user_id'];
    $sql = "SELECT excel_download_popup FROM user WHERE user_id = '".$user_id."' ";
    $result = execute_query_get_result($sql, 'FETCH_OBJ');

    $params_excel_export_for_my_report['userId'] = $user_id;

    if(isset($requestData['fileid'])){
        $params_excel_export_for_my_report['id']    = $requestData['fileid'] ;    
    }
    //$params_excel_export_for_my_report['id']    = isset($requestData['fileid']) ;

    $sql    = __query_excel_export_for_my_report($params_excel_export_for_my_report); 
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
    foreach($obj as $key=>$value){
            $file_name                  = substr( $value['file_path'], strrpos($value['file_path'], '/') + 1);
            //$file_name                  = urldecode($file_name);
            $obj[$key]['file_name']     = explode(".",$file_name);
    }
  
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    echo json_encode(array('status'=>1, 'result'=>$result[0]->excel_download_popup, 'my_reports' => $obj));
}

/*function getNetworkCodeByAlias($network_alias){
    $db = getConnection();
    $sql = "SELECT network_code FROM network WHERE network_alias = '".$network_alias."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);
    return $result[0]->network_code;
}*/

function getBrandCreativeName($brand_id, $creative_id){
    $db = getConnection();
    $name =array();
    $sql = "SELECT brand_name FROM brand WHERE brand_id = '".$brand_id."' ";
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    $name['brand_name'] = $result[0]->brand_name;


    if(!empty($creative_id)){
        $sql = "SELECT creative_name FROM creative WHERE creative_id = '".$creative_id."';";
        $result = execute_query_get_result($sql, 'FETCH_OBJ');
        /*$stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
        $name['creative_name'] = $result[0]->creative_name;
    }
    return $name;
}

function displayCategoriesForCreative(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData = $raw_data = array();
     foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $id                                 = $requestData['id'];
    $where                              = 'SELECT cr.brand_id FROM creative cr WHERE cr.creative_id = '.$id;
    $brandStmt                          = $db->prepare($where);
    $brandStmt->execute();
    $brandResult                        = $brandStmt->fetchAll(PDO::FETCH_OBJ);
    $sql                                = sprintf(_SQL_DISPLAY_CATEGORIES,$brandResult[0]->brand_id);
    $stmt                               = $db->prepare($sql);
    $stmt->execute();
    $result                             = $stmt->fetchAll(PDO::FETCH_OBJ);   
    echo json_encode(array('status'=> 1,'result'=>$result)); 
}

function updateAskAlt(){    
    updateDontAskMe($_REQUEST['ask_alt']);
    echo json_encode(array('status'=>1));
}

function checkEulaArg($uid = null){
    if(is_null($uid))
            $uid = $_SESSION['user_id'];

    $sql = "SELECT company_id, eula_flag  FROM user WHERE user_id = '".$uid."' ";
    $get_data = getResult($sql);
    $ea_flag = '0'."_user";
    if (count($get_data)) {
        extract($get_data[0]);
        $ea_flag = $eula_flag."_user";
        if(is_null($company_id)){
            $user_eula_flag = $eula_flag."_user";
            $sql = "SELECT admin_id FROM admin_user WHERE user_id = '".$uid."'";
            $get_admin = getResult($sql);
            extract($get_admin[0]);
            $data_flag = checkEulaArg($admin_id);
            $check_flag = explode('_',$data_flag);
            if($check_flag[1] == "company"){
                if($check_flag[0])
                    $ea_flag = $check_flag[0]."_user";
                else
                    $ea_flag = $user_eula_flag;
            }else{
                $ea_flag = $user_eula_flag;
            }
        }else{
            $sql = "SELECT eula_flag FROM company WHERE id = '".$company_id."'";
            $get_cdata = getResult($sql);
            extract($get_cdata[0]);
            if($eula_flag)
                $ea_flag = $eula_flag."_company";

        }
    }    
    return $ea_flag;
}

function getUserEulaFlag(){
    $eula_flag = explode('_',checkEulaArg());
    return $eula_flag[0];
}

function eulaCheckUpdate(){
    $db     = getConnection();
    $eula_ip = $_SERVER['REMOTE_ADDR'];
    if(isset($_SERVER['HTTP_CF_CONNECTING_IP']))
        $eula_ip = $_SERVER['HTTP_CF_CONNECTING_IP'];

    $sql = "UPDATE user SET eula_flag = '1', eula_datetime = '".standardDateTimeFormat('Y-m-d H:i:s')."', eula_ip = '".$eula_ip."'  WHERE user_id = '".$_SESSION['user_id']."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $user_info                       = getUserInfoById($_SESSION['user_id']);
    $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
    $user_details['eula_ip'] = $eula_ip;
    $user_details['eula_accept_date'] = standardDateTimeFormat('Y-m-d H:i:s');
    APIManageZOHOContact('eulaManage',$user_details);
    echo json_encode(array('status'=>1));
}

function eulaOverride(){
    $db  = getConnection();

    $sql = "UPDATE company SET eula_flag = '".$_REQUEST['eula_override']."' WHERE id = '".$_REQUEST['company_id']."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $zoho_account_id = getCompanyInfo($_REQUEST['company_id']);     
    $eula_override = false;
    if($_REQUEST['eula_override'])
            $eula_override = true;

    $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
    $company_details['eula_override'] = $eula_override;
    APIManageZOHOAccount('eulaUpdate',$company_details);
    echo json_encode(array('status'=>1));
}

function adsphereauthenticationUpdate($user_id){
    $db  = getConnection();
    $sql = "UPDATE user SET adsphere_authenticate = '1' WHERE user_id = '".$user_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();

    $user_info                       = getUserInfoById($user_id);
    $user_details['zoho_contact_id'] = $user_info[0]->zoho_contact_id;
    APIManageZOHOContact('adsphereAuthenticateUpdate',$user_details);

    if($user_info[0]->role == 'admin'){
        $company_id = getUserCompany($user_id);
        $zoho_account_id = getCompanyInfo($company_id);
        $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
        $company_details['asd_verified_date'] = date('Y-m-d');
        APIManageZOHOAccount('adsphereAuthenticateUpdate',$company_details);
    }    
}

function APITimOut($url=""){
    $server = explode(':',$_SERVER['HTTP_HOST']);

    if ($server[0] == "localhost") { 
         exit;
    }  

    $db = getConnection();
    $create_date = gmdate("Y-m-d H:i:s");
    $IP = $_SERVER['REMOTE_ADDR'];
    
    if (!isset($url)) {
        $url = $_SERVER['HTTP_REFERER'];
    }  

    $sql = "INSERT INTO  `api_log` SET url = '".$url."', ip_address='".$IP."', created_at ='".$create_date."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    echo json_encode(array('status'=>0, 'stream'=> 'time_out'));
    exit;
}

function getAllNetworks(){
    $network_string  = '';
     $params         = array();
     $network_array = get_query_result('__query_network_alias', $params, 'FETCH_COLUMN');
     
     foreach($network_array as $n1 => $n2){
         $network_string = $network_string.','.$n2->network_code;
     }
     $network_string = trim($network_string, ",");
   
     echo json_encode(array('status'=> 1,'result'=>$network_string)); 
}

function displayAiringsBrandsWithNetworks($export = 0,$brand_ids = NULL) {
    ini_set('max_execution_time', 2000);
    $requestData = array();
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    $excel_export = array();
    $export_data = array();
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    parse_str($query_string, $requestData);
    $requestData = (array)json_decode($query_string, TRUE);
    $keys = array_keys($requestData);
    $query_string_new = '';

    foreach($keys as $key) {
        $query_string_new .= $key. '='.$requestData[$key].'&';
    }

    $apply_data_array['query_string']   = $query_string_new;
    $requestData['page_call']           = 'network';
    $query_string_new                      = $query_string_new.'&page_call=network';
    $criteria                           = get_filter_text($query_string_new);
    $_SESSION['apply_filter_criteria']  = addslashes($criteria['save_text']);
    $apply_data_array['criteria']       = $_SESSION['apply_filter_criteria'];
    $apply_data_array['page']                     = 1;
    $apply_data_array['primary_tab']              = 1;
    $apply_data_array['secondary_tab']            = 1;
    $_SESSION['apply_filter_data']      = query_string_to_json($apply_data_array );
    $requestData['skip_category_clause'] = 0;    
    if($export){
        $requestData['brands_ids'] = $brand_ids;
        $requestData['export'] = 1;
        if (isset($requestData['brands_ids'])) {
            $brand_array = getArrayForNetworkTab($requestData, '__query_get_brands_for_creative_advertiser_networks');
        } else {
            $brand_array = getArrayForNetworkTab($requestData, '__query_get_airings_brands_networks');
        }
    }else{
        if (isset($requestData['brands_ids'])) {
            $brand_array = getArrayForNetworkTab($requestData, '__query_get_brands_for_creative_advertiser_networks'); // brands query
        } else {
            $brand_array = getArrayForNetworkTab($requestData, '__query_get_airings_brands_networks'); //adv query
        }
    }
    // show($brand_array);
    $network_array = $requestData['network_array'];
    $sd     = $requestData['sd'];
    $ed     = $requestData['ed'];
    $val    = $requestData['val'];
    $c      = urldecode($requestData['c']);
    $tab    = $requestData['type'];
    $lan    = urldecode($requestData['spanish']);
    $responseType = '('.urldecode($requestData['responseType']).')';
    $sd_dir = LIFETIME_START_DATE;
    $ed_dir = customDate('Y-m-d');
    
    if(!$export)
        $page  = $requestData['page'];
    $count                      = count($brand_array);
   
    $sum = 0;
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
            $sum += $nw_arr[ 'projected_score' ];
        }
    }

    $val_dir = 5;
    $sd_dir  = LIFETIME_START_DATE;
    $ed_dir  = customDate('Y-m-d');

    if($c > 5){
        $c_dir = 6;
    }else{
        $c_dir = 1;
    }

    $sum = $requestData['total_spend'];
    // show($requestData);
    if($tab == 1){
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = number_format($value['_creatives_']['Spend Index']);
             $nestedData['Total Dollars'.'_number_spend_index']  = $value['_creatives_']['number_Spend Index'];
            $excel_export['Total Dollars']  = round($value['_creatives_']['Spend Index']);
            $nestedData['Airings'.'_airings']  = number_format($value['_creatives_']['Airings']);
            $nestedData['Airings'.'_number_airings']  = $value['_creatives_']['Airings'];
            $excel_export['Airings']  = $value['_creatives_']['Airings'];

            //$nestedData['advertiser_name']  = $value['_creatives_']['name'];
            $nestedData['advertiser_name']  = $value['_creatives_']['name'];
            //$value['_creatives_']['name'].$value['_creatives_']['_brand_name'].$value['_creatives_']['_advertiser_name'].$value['_creatives_']['_brand_id'].$value['_creatives_']['_adv_id'];
            $excel_export['advertiser_name']  = $value['_creatives_']['name'];

            $excel_export['Brand Name']     = $value['_creatives_']['name'];
            //$nestedData['Brand']            = $value['_creatives_']['name'];

            $nestedData['Brand']  = '<a href="#" onclick="view_adv_tab(\''.addslashes($value['_creatives_']['_advertiser_name']).'\','.$value['_creatives_']['_adv_id'].','.$c_dir.',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\'brand\',\''.$value['_creatives_']['_brand_id'].'\',\''.addslashes($value['_creatives_']['_brand_name']).'\',\'ranking\','.$value['_creatives_']['need_help'].')" >'.readMoreHelper($value['_creatives_']['name'], 35).'</a>';
             $nestedData['brand_hidden']  = $value['_creatives_']['name'];
            //$nestedData['Brand']  = $value['_creatives_']['name'].$value['_creatives_']['_brand_name'].$value['_creatives_']['_advertiser_name'].$value['_creatives_']['_brand_id'].$value['_creatives_']['_adv_id'];
            
            $nestedData['Creative_ids']     = base64_encode($brand_array[$key]['_creatives_']['creative_ids']);
            $excel_export['Creative_ids']   = $brand_array[$key]['_creatives_']['creative_ids'];

            foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);
                    $spendIndexCalculate['projected_score'] = $nw_arr['projected_score'];
                    $spendIndexCalculate['classification']  = $c;
                    $spendIndexCalculate['sum']             = $sum;
                    $projected_score                        =  $spendIndexCalculate['projected_score'];
                    $projected_score_excel                  = findSpendIndex($spendIndexCalculate, 0);
                    if (empty($MaxSpendValue)) {
                        $MaxSpendValue = getMaxSpendValue($nestedData['Total Dollars'.'_spend_index'], $c);
                    }
                    if (empty($MaxAiringsValue)) {
                        $MaxAiringsValue = $nestedData['Airings'.'_number_airings'];
                    }
                   
                    $excel_export[$nw.'_spend_index']     = $projected_score_excel ? $projected_score_excel : '0' ;
                    $nestedData[$nw.'_airings']     = $nw_arr['airings'] ? '<a href="#" onclick="viewAiringGraph(\''.addslashes(htmlspecialchars($value['_creatives_']['name'])).'\','.$nw_arr['id'].',\'dow\',\''.$nw_arr['_network_code'].'\',\'all_day\',\'all_hour\',1,\''.$nw_arr['airings'].'\',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$responseType.'\',\''.$lan.'\',\'brand\',\''.addslashes(htmlspecialchars($nw_arr['_advertiser_name'])).'\',\''.addslashes(htmlspecialchars($nw_arr['_brand_name'])).'\',\''.$nw_arr['_brand_id'].'\',\''.$nw_arr['network_id'].'\',\''.$nw_arr['dpi'].'\')" >'.number_format($nw_arr['airings']).'</a>' : '0' ;
                    $excel_export[$nw.'_airings']     = $nw_arr['airings'] ? $nw_arr['airings'] : '0' ;
                    // $nestedData[$nw.'_spend_index_hidden']  = $projected_score;
                    $nestedData[$nw.'_spend_index_hidden'] = get_processed_number_spendIndex_totalShare($projected_score, $nestedData['Total Dollars'.'_spend_index']);
                
                    $nestedData[$nw.'_spend_index_hidden_reverse'] = get_processed_number_spendIndex_totalShare($projected_score, get_real_value_from_formatted_value($MaxSpendValue) - get_real_value_from_formatted_value($nestedData['Total Dollars'.'_spend_index']));
                    
                    // show(get_real_value_from_formatted_value($nw_arr['projected_score']) ." <-> ". get_real_value_from_formatted_value($MaxSpendValue) ." <-> ".  get_real_value_from_formatted_value($nestedData['Total Share'.'_spend_index']));
                    $nestedData[$nw.'_airings_hidden']     = $nw_arr['airings'];
                    $nestedData[$nw.'_airings_hidden_reverse']      = get_processed_number_spendIndex_totalShare($nw_arr['airings'], $MaxAiringsValue - $nestedData['Airings'.'_number_airings']);

                  //  $title = get_market_share_for_tooltip($nestedData[$nw.'_spend_index_hidden'], $nestedData['Total Share'.'_spend_index']);
                  // <a tag removed title="Share of Brand '.$title.'%" >
                    $nestedData[$nw.'_spend_index']     = $projected_score ? '<a  href="#" onclick="viewAiringSpendGraph(\''.addslashes(htmlspecialchars($value['_creatives_']['name'])).'\','.$nw_arr['id'].',\'dow\',\''.$nw_arr['_network_code'].'\',\'all_day\',\'all_hour\',1,\''.$projected_score.'\',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$responseType.'\',\''.$lan.'\',\'brand\',\''.addslashes(htmlspecialchars($nw_arr['_advertiser_name'])).'\',\''.addslashes(htmlspecialchars($nw_arr['_brand_name'])).'\',\''.$nw_arr['_brand_id'].'\',\''.$nw_arr['network_id'].'\',\''.$nw_arr['dpi'].'\')" >'.number_format($projected_score).'</a>' : '0' ;
                    
                }
            }

            $_creatives_                = $brand_array[$key]['_creatives_'];
            $nestedData['Creatives']    = $_creatives_['creative_count'] ? '<div class="expandable-div"><a href="#"><span id="brand_plus_'.$_creatives_['id'].'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$_creatives_['id'].'"><span class="icon-border icon-border-minus"></span></span></a>'.$_creatives_['creative_count'].'</div>' : 0;
            $excel_export['Creatives']    = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            $nestedData['Brands']       = $_creatives_['creative_count'] ? '<div class="expandable-div"><a href="#"><span id="brand_plus_'.$_creatives_['id'].'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$_creatives_['id'].'"><span class="icon-border icon-border-minus"></span></span></a>'.$_creatives_['creative_count'].'</div>' : 0;
            $excel_export['Brands']    = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            $nestedData['id']           = $_creatives_['id'];
            $excel_export['id']    = $_creatives_['id'];
            $nestedData['_creative_count_hidden']     = $_creatives_['creative_count'];
            $nestedData['Hidden_creatives_count'] = $_creatives_['creative_count'];
            if(isTrackingPresent('brand', $value['_creatives_']['_brand_id'])) {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$value['_creatives_']['_brand_id'].',\''.addslashes($value['_creatives_']['_brand_name']).'\');"><i custom-attr="brand_'.$value['_creatives_']['_brand_id'].'" class="fa fa-eye blue-eye" title="Track"></i></a>';
            } else {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$value['_creatives_']['_brand_id'].',\''.addslashes($value['_creatives_']['_brand_name']).'\');"><i custom-attr="brand_'.$value['_creatives_']['_brand_id'].'" class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
            }

            $data[]        = $nestedData;
            $export_data[] = $excel_export;
        }
    }
    else{
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = number_format($value['_creatives_']['Spend Index']);
            $nestedData['Total Dollars'.'_number_spend_index']  = $value['_creatives_']['number_Spend Index'];
            $excel_export['Total Dollars']  = round($value['_creatives_']['Spend Index']);
            $nestedData['Airings'.'_airings']  = number_format($value['_creatives_']['Airings']);
            $nestedData['Airings'.'_number_airings']  = $value['_creatives_']['Airings'];
            $excel_export['Airings']  = $value['_creatives_']['Airings'];
            $excel_export['Advertiser Name']  = $value['_creatives_']['name'];
            $nestedData['Brands_ids']     = $brand_array[$key]['_creatives_']['creative_ids'];

            // $nestedData['advertiser_name']  = $value['_creatives_']['name'];
            // $nestedData['Brand']            = $value['_creatives_']['name'];
            //$nestedData['advertiser_name']  = $value['_creatives_']['name'].$value['_creatives_']['_brand_name'].$value['_creatives_']['_advertiser_name'].$value['_creatives_']['_brand_id'].$value['_creatives_']['_adv_id'];
            
            $nestedData['advertiser_name']  = '<a href="#" onclick="view_adv_tab(\''.addslashes($value['_creatives_']['name']).'\','.$value['_creatives_']['_adv_id'].','.$c_dir.',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\'adv\',\'\',\'\',\'ranking\','.$value['_creatives_']['need_help'].')" >'.readMoreHelper($value['_creatives_']['name'], 35).'</a>';
            $nestedData['advertiser_hidden']  = $value['_creatives_']['name'];
            $nestedData['Brand']            = $value['_creatives_']['name'];
            //$nestedData['Brand']  = $value['_creatives_']['name'].$value['_creatives_']['_brand_name'].$value['_creatives_']['_advertiser_name'].$value['_creatives_']['_brand_id'].$value['_creatives_']['_adv_id'];
            

            foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);

                    $spendIndexCalculate['projected_score'] = $nw_arr['projected_score'];
                    $spendIndexCalculate['classification']  = $c;
                    $spendIndexCalculate['sum']             = $sum;
                    $projected_score                        =  $spendIndexCalculate['projected_score'];
                    $projected_score_excel                  = findSpendIndex($spendIndexCalculate, 0);
                    if (empty($MaxSpendValue)) {
                        $MaxSpendValue = getMaxSpendValue($nestedData['Total Dollars'.'_spend_index'], $c);
                    }

                    if (empty($MaxAiringsValue)) {
                        $MaxAiringsValue = $nestedData['Airings'.'_number_airings'];
                    }
                   
                 //   $projected_score = ($nw_arr['projected_score']*100/$sum);
                 //   $projected_score = custom_round($projected_score);

                    $nestedData[$nw.'_spend_index']         = number_format($projected_score);
                    $excel_export[$nw.'_spend_index']         = $projected_score_excel;

                    if($export)
                        $nestedData[$nw.'_airings']             = $nw_arr['airings'];
                    else
                        $nestedData[$nw.'_airings']             = number_format($nw_arr['airings']);

                    $excel_export[$nw.'_airings']  = $nw_arr['airings'];
                    
                    // $nestedData[$nw.'_spend_index_hidden']  = $projected_score;
                    $nestedData[$nw.'_spend_index_hidden'] = get_processed_number_spendIndex_totalShare($projected_score, $nestedData['Total Dollars'.'_spend_index']);
                    $nestedData[$nw.'_spend_index_hidden_reverse'] = get_processed_number_spendIndex_totalShare($projected_score, get_real_value_from_formatted_value($MaxSpendValue) - get_real_value_from_formatted_value($nestedData['Total Dollars'.'_spend_index']));
                    
                    $nestedData[$nw.'_airings_hidden']              = $nw_arr['airings'];
                    $nestedData[$nw.'_airings_hidden_reverse']      = get_processed_number_spendIndex_totalShare($nw_arr['airings'], $MaxAiringsValue - $nestedData['Airings'.'_number_airings']);
                }
            }

            $_creatives_                = $brand_array[$key]['_creatives_'];
            $excel_export['Brands']       = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            if($export){
                    $nestedData['Creatives']    = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
                    $nestedData['Brands']       = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            }else{
                $nestedData['Creatives']    = $_creatives_['creative_count'] ? '<div class="expandable-div"><a href="#"><span id="brand_plus_'.$_creatives_['id'].'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$_creatives_['id'].'"><span class="icon-border icon-border-minus"></span></span></a>'.$_creatives_['creative_count'].'</div>' : 0;
                $nestedData['Brands']       = $_creatives_['creative_count'] ? '<div class="expandable-div"><a href="#"><span id="brand_plus_'.$_creatives_['id'].'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$_creatives_['id'].'"><span class="icon-border icon-border-minus"></span></span></a>'.$_creatives_['creative_count'].'</div>' : 0;
            }
            
            $nestedData['id']           = $_creatives_['id'];
            $nestedData['_creative_count_hidden']     = $_creatives_['creative_count'];
            $nestedData['Hidden_creatives_count'] = $_creatives_['creative_count'];
            if(isTrackingPresent('advertiser', $value['_creatives_']['_adv_id'])) {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'advertiser\','.$value['_creatives_']['_adv_id'].',\''.addslashes($value['_creatives_']['name']).'\');"><i custom-attr="advertiser_'.$value['_creatives_']['_adv_id'].'" class="fa fa-eye blue-eye" title="Track"></i></a>';
            } else {
                $nestedData['tracking'] = '<a href="#" onclick="viewTrackingDialogue(\'advertiser\','.$value['_creatives_']['_adv_id'].',\''.addslashes($value['_creatives_']['name']).'\');"><i custom-attr="advertiser_'.$value['_creatives_']['_adv_id'].'" class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
            }

            $data[]                     = $nestedData;
            $export_data[] = $excel_export;
        }
    }
    if($export){
        return $data;
    }else{           
        $json_data['rows']      = $data;
        $json_data['page']      = $page;
        $json_data['records']   = $count;
        $session_apply_filter = $_SESSION['apply_filter_data'];
        $json_data['session_apply_filter'] = $session_apply_filter;
        if(!isset($requestData['adv_id'])){
            $_SESSION['export_network']['rows'] = $export_data;
        }
        if(isset($requestData['network_tab']) && $requestData['network_tab'] == 1) {
            $json_data['rows']  = $_SESSION['export_network'];
            echo json_encode($json_data);
            return;
        }
        echo json_encode($json_data);
    }
}

function getCreativesForNetworks(){
    $requestData                        = array();
    $requestData['unchecked_category']  = 0;
    $requestData['length_unchecked']    = 0;
    $requestData['skip_category_clause'] = 0;
    $requestData['type']                = 3;
    $brand_array                        = getArrayForNetworkTab($requestData, '__query_get_airings_for_creative_brands_networks');
    $network_array                      = $requestData['network_array'];
    $sd                                 = $requestData['sd'];
    $ed                                 = $requestData['ed'];
    $val                                = $requestData['val'];
    $c                                  = urldecode($requestData['c']);
    $type                               = $requestData['type'];
    $lan                                = urldecode($requestData['spanish']);
    $responseType                       = '('.urldecode($requestData['responseType']).')';

    $count                      = count($brand_array);   
    $sum = 0;
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
             $sum += $nw_arr[ 'projected_score' ];
        }       
    }
    $network_code_grid = 0;

    $sd_dir                     = LIFETIME_START_DATE;
    $ed_dir                     = customDate('Y-m-d');

    if($c > 5){
        $c_dir = 6;
    }else{
        $c_dir = 1;
    }
    $MaxSpendValue = $MaxAiringsValue = 0;
    if($type == 3){
        $sum = $requestData['total_spend'];
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = number_format($value['_creatives_']['Spend Index']);
            $nestedData['Airings'.'_airings']  = number_format($value['_creatives_']['Airings']);
            $nestedData['id']       = $value['_creatives_']['id'];
            //$nestedData['Creative']    = $value['_creatives_']['name'];
            $nestedData['Creatives']   = $key;
            $nestedData['Language']   =  $value['_creatives_']['spanish'] == 0 ? 'EN' : 'ES';
            $nestedData['Creative']    = '<a href="#" onclick="view_adv_tab(\''.addslashes($value['_creatives_']['_advertiser_name']).'\','.$value['_creatives_']['_adv_id'].','.$c_dir.',\'1\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\'creatives\',\''.$value['_creatives_']['id'].'\',\''.addslashes(htmlspecialchars($value['_creatives_']['name'])).'\',\'ranking\','.$value['_creatives_']['need_help'].')" title = "'.$value['_creatives_']['name'].'" >'.readMoreHelper($value['_creatives_']['name']).'</a>';
            $nestedData['creative_hidden']  = $value['_creatives_']['name'];
            foreach($value as $nw => $nw_arr){
                $spendIndexCalculate['projected_score'] = $nw_arr['projected_score'];
                $spendIndexCalculate['classification']  = $c;
                $spendIndexCalculate['sum']             = $sum;
                $projected_score                        = $spendIndexCalculate['projected_score'] ;
                if (empty($MaxSpendValue)) {
                    $MaxSpendValue = getMaxSpendValue($nw_arr['projected_score'], $c);
                }
                if (empty($MaxAiringsValue)) {
                    $MaxAiringsValue = $value['_creatives_']['Airings'];
                }

               // $projected_score = custom_round($nw_arr['projected_score']*100/$sum);
                        
                $nestedData[$nw.'_airings']     = $nw_arr['airings'] ? '<a href="#" onclick="viewAiringGraph(\''.addslashes(htmlspecialchars($nw_arr['name'])).'\','.$nw_arr['creatives'].',\'dow\',\''.$nw_arr['_network_code'].'\',\'all_day\',\'all_hour\',1,'.$nw_arr['airings'].',\''.$c.'\',1,\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$responseType.'\',\''.$lan.'\',\'creative\',\''.addslashes($nw_arr['_advertiser_name']).'\',\''.addslashes($nw_arr['_brand_name']).'\',\''.$nw_arr['_brand_id'].'\',\''.$nw_arr['network_id'].'\',\''.$nw_arr['dpi'].'\')" >'.number_format($nw_arr['airings']).'</a>' : '0' ;
                $nestedData[$nw.'_spend_index_hidden'] = get_processed_number_spendIndex_totalShare($projected_score, $value['_creatives_']['Spend Index']);
                $nestedData[$nw.'_spend_index_hidden_reverse'] = get_processed_number_spendIndex_totalShare($projected_score, $MaxSpendValue - $value['_creatives_']['Spend Index']);
                $nestedData[$nw.'_airings_hidden']              = $nw_arr['airings'];
                $nestedData[$nw.'_airings_hidden_reverse']      = get_processed_number_spendIndex_totalShare($nw_arr['airings'], $MaxAiringsValue - $value['_creatives_']['Airings']);
                    
                    $title = get_market_share_for_tooltip($nestedData[$nw.'_spend_index_hidden'], $value['_creatives_']['Spend Index']);
                    $nestedData[$nw.'_spend_index']     = number_format($projected_score) ? '<a href="#" onclick="viewAiringSpendGraph(\''.addslashes(htmlspecialchars($nw_arr['name'])).'\','.$nw_arr['creatives'].',\'dow\',\''.$nw_arr['_network_code'].'\',\'all_day\',\'all_hour\',1,\''.number_format($projected_score).'\',\''.$c.'\',1,\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$responseType.'\',\''.$lan.'\',\'creative\',\''.addslashes($nw_arr['_advertiser_name']).'\',\''.addslashes($nw_arr['_brand_name']).'\',\''.$nw_arr['_brand_id'].'\',\''.$nw_arr['network_id'].'\',\''.$nw_arr['dpi'].'\')" >'.number_format($projected_score).'</a>' : '0' ;
                

                if(!$nw_arr['thumbnail']){
                    $nestedData['Video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
                }else{
                    $nestedData['Video'] = '<a href="#basicModalCamp"><i class="fa fa-play-circle-o fa-2x" onclick="playvideo('.$nw_arr['thumbnail'].',\''.$sd.'\',\''.$ed.'\',\''.$network_code_grid.'\',\'none\')"></i></a>';
                }
            }

            
            $data[]                     = $nestedData;
        }
    }
    else{
        foreach($brand_array as $key => $value){
            $nestedData['Total Dollars'.'_spend_index']  = $value['_creatives_']['Spend Index'];
            $nestedData['Airings'.'_airings']  = $value['_creatives_']['Airings'];
            $nestedData['id']   = $value['_creatives_']['id'];
            $nestedData['advertiser_name']   = $value['_creatives_']['name'];
            $nestedData['Brands']   = $value['_creatives_']['no_of_brands'] ? '<a href="#"><span id="brand_plus_'.$value['_creatives_']['id'].'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$value['_creatives_']['id'].'"><span class="icon-border icon-border-minus"></span></span></a>'.$value['_creatives_']['creative_count'] : 0;
            foreach($value as $nw => $nw_arr){
                $spendIndexCalculate['projected_score'] = $nw_arr['projected_score'];
                $spendIndexCalculate['classification']  = $c;
                $spendIndexCalculate['sum']             = $sum;
                $nestedData[$nw.'_spend_index']        = findSpendIndex($spendIndexCalculate);

               // $nestedData[$nw.'_spend_index'] = custom_round($nw_arr['projected_score']*100/$sum);
                $nestedData[$nw.'_airings']     = $nw_arr['airings'] ? '<a href="#" onclick="viewAiringGraph(\''.addslashes($key).'\','.$nw_arr['id'].',\'dow\',\''.$nw.'\',\'all_day\',\'all_hour\',1,'.$nw_arr['airings'].',\''.$c.'\',0,\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$responseType.'\',\''.$lan.'\',\'brand\',\'\',\'\',\'\')" >'.number_format($nw_arr['airings']).'</a>' : '0' ;
            }
            $data[]                     = $nestedData;
        }
    }
    $json_data['rows']      = $data;
    $json_data['page']      = 1;
    $json_data['records']   = $count;
    echo json_encode($json_data);
    
}

function getCategoryDetail($category_id){
    $params['category_id']  = $category_id;
    $details  = get_query_result('__query_get_category_detail', $params, 'FETCH_ASSOC');
    return $details;
}

function checkUserLimit($user_info){
    if(isset($user_info)){
        $admin_id      = $user_info['company_admin_id'];
        $selectMaxUser = "SELECT users_limit FROM pricing WHERE user_id = '".$user_info['company_admin_id']."'";
    }else{
        $admin_id      = $_SESSION['user_id'];
        $selectMaxUser = "SELECT users_limit FROM pricing WHERE user_id = '".$_SESSION['user_id']."'";
    }
    
    $db = getConnection();
    $maxLimit = execute_query_get_result($selectMaxUser, 'FETCH_OBJ');
    /*$stmt = $db->prepare($selectMaxUser);
    $stmt->execute();
    $maxLimit = $stmt->fetchAll(PDO::FETCH_OBJ);*/

    $selectNoOfUsers = "SELECT count(u.user_id) as user_in_tier FROM  user as u  INNER JOIN admin_user a ON  a.admin_id = '".$admin_id."'  WHERE u.status = 'active' AND a.user_id = u.user_id";
    $userResult = execute_query_get_result($selectNoOfUsers, 'FETCH_OBJ');
    /*$stmt = $db->prepare($selectNoOfUsers);
    $stmt->execute();
    $userResult = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    $user_in_tier = $userResult[0]->user_in_tier + 1;
    $max_limit = $maxLimit[0]->users_limit;
    if($user_in_tier >= $max_limit){
        echo json_encode(array('status'=> 1,'max_limit'=>'yes','limit' => $max_limit ,'user_in_tier' => $user_in_tier));
        exit;
    }
}

function APIManageZOHOAccount($opt_type,$company_details){

    $server = explode(':',$_SERVER['HTTP_HOST']);
    if(!makeZohoApiCalls()){
        return true;
    }
    // if ($server[0] != "adsphere.drmetrix.com") { //avoide to create record in zoho through text evn.
    //      return true;
    // }
    $db = getConnection();
   
    if($opt_type == 'add' || $opt_type == 'update'){
        $account = [];
        $insertFields           =  createCompanyDataArrayForZoho($company_details);
        $createAccountResponse  = createRecordInZoho('Accounts/upsert', $insertFields);
        if(isset($createAccountResponse->data[0]) &&  $createAccountResponse->data[0]->code == 'SUCCESS'){         
            $zoho_id = $createAccountResponse->data[0]->details->id ;
            $account['zoho_account_id'] = $zoho_id;
            // updateContactInfo($zoho_id,$company_details['ads_record_id']); 
            updateAccountInfo($zoho_id,$company_details['ads_record_id']);
        } else{
            // exception log
            $filename               = basename($_SERVER['PHP_SELF']);
            api_exception_log($filename, 'APIManageZOHOAccount - Add ', serialize($createAccountResponse));
        }
        return $account;
    } else if ($opt_type == "accountStatusUpdate"){
        $updateFields = array(
            "Company_Status" => $company_details['status']
        );

        $updateResponse =  updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - accountStatusUpdate'); 
        return $updateResponse;  
    } else if ($opt_type == "eulaUpdate"){
        $updateFields = array(
            "EULA_Overriden" => $company_details['eula_override']
        );

        $updateResponse = updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - eulaUpdate'); 
        return $updateResponse;  
    } else if ($opt_type == "adsphereAuthenticateUpdate"){
        $updateFields = array(
            "ADS_Verified_Date" => $company_details['asd_verified_date'],
            "ADS_Authenticated" => true
        );

        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - adsphereAuthenticateUpdate'); 
        return $updateResponse;  
    } else if ($opt_type == "authyAuthenticated"){
        $updateFields = array(
            "Authy_Authenticated" => true
        );

        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - authyAuthenticated'); 
        return $updateResponse;  
    }else if ($opt_type == "manageNetworkTab"){
        $updateFields = array(
            "Network_Tab" => $company_details['network_tab'] == 'true' ? true : false
        );
        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - manageNetworkTab'); 
        return $updateResponse;  
    }else if ($opt_type == "manageStagingAccess"){
        $updateFields = array(
            "Staging_Access" => $company_details['staging_access'] == 'true' ? true : false
        );
        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - manageStagingAccess');
        return $updateResponse;
    }else if($opt_type == 'update_use_same_zoho'){
        $updateFields = array(
            "Account_Name"      => $company_details['company_name'],
            "Company_Type"      => $company_details['company_type'],
            "Company_Size"      => $company_details['company_size'],
            "Annual_Rev"        => $company_details['company_revenue'],
            "Company_Status"    => 'Active',
            "Max_Users_Allowed" => $company_details['users_limit'],
            "ADS_Record_ID"     => $company_details['ads_record_id'],
            "Client"            => $company_details['client'],
            "Owner"             => $company_details['account_owner_zoho_id'],
            
        );
        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - update_use_same_zoho');
    }else if ($opt_type == "updateAdsAdmin"){
        $updateFields = array(
            "ADS_Admin" => $company_details['asd_admin']
        );

        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - updateAdsAdmin'); 
        return $updateResponse;  
    }else if( $opt_type == "delete") {
        $updateFields = array(
            "Company_Status"            =>  $company_details['Company_Status'] ,
            "ADS_Record_ID"             =>  $company_details['ADS_Record_ID'] ,
            "EULA_Overriden"            =>  $company_details['EULA_Overriden'] ,
            "Max_Users_Allowed"         =>  $company_details['Max_Users_Allowed'] ,
            "Client"                    =>  $company_details['Client'] ,
            "Adsphere_Acct_ID"          =>  $company_details['Adsphere_Acct_ID'] ,
            "Authy_Authenticated"       =>  $company_details['Authy_Authenticated'] ,
            "ADS_Authenticated"         =>  $company_details['ADS_Authenticated'] ,
            "Network_Tab"               =>  $company_details['Network_Tab'] ,
            "ADS_Admin"                 =>  $company_details['ADS_Admin'] ,
            "Company_Type"              =>  $company_details['company_type'] ,
            "Company_Size"              =>  $company_details['company_size'] ,
            "ADS_Verified_Date"         =>  $company_details['ads_verified_date'] ,
            "Annual_Rev"                =>  $company_details['company_revenue'] ,
        );
        $updateResponse= updateRecordInZoho('Accounts',$company_details['zoho_account_id'], $updateFields);
        // $deleteResponse= deleteRecordFromZoho('Accounts',$company_details['zoho_account_id']);
        // $deleteResponse = zoho_exception_log($deleteResponse, 'APIManageZOHOAccount -Hard deleteCompany'); 
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOAccount - deleteCompany'); 
        return $updateResponse;  
    }

}

function makeZohoApiCalls() {
    $server = explode(':',$_SERVER['HTTP_HOST']);

    if((defined('CONFIG_MAKE_ZOHO_API_CALLS') && CONFIG_MAKE_ZOHO_API_CALLS == 1)){
        return true;
    } else {
        return false;
    }
}

function APIManageZOHOContact($opt_type,$user_details, $bulk = false){
   
    // $server = explode(':',$_SERVER['HTTP_HOST']);
    if(!makeZohoApiCalls()){
        return true;
    }
    // if ($server[0] != "adsphere.drmetrix.com") { 
    //      return true;
    // }
    $db = getConnection();
    if(!$bulk) {
        $user_details['assistant_admin'] = isset($user_details['assistant_admin'] ) ? $user_details['assistant_admin'] : 'false';
    }
    
    if($opt_type == 'add'){
        // $zoho_xml = '';
        // $authy_authenticated = 'false';
        // $adsphere_authenticate = 'false';

        //   Check mobile number already exists then change ADS Authenticated, Authy Authenticated etc.
        //   $sql = "SELECT count(phone_number) as mobile_exists, adsphere_authenticate, authy_cookie FROM user WHERE phone_number = '".$mobile."' ";
        //   $userResult = execute_query_get_result($sql, 'FETCH_OBJ');
          
        //   if($userResult[0]->adsphere_authenticate) {
        //        $adsphere_authenticate = 'true';
        //   }
        //   if(!empty($userResult[0]->authy_cookie)) { 
        //       $authy_authenticated = 'true';
        //   }
         
        //   if( $userResult[0]->mobile_exists > 1) {    
        //         $zoho_xml = '<FL val="ADS Authenticated">'.$adsphere_authenticate.'</FL>
        //                     <FL val="Authy Authenticated">'.$authy_authenticated.'</FL>';
        //   }

        $insertFields       =  createDataArrayForZoho($user_details);
        $createUserResponse = createRecordInZoho('Contacts/upsert', $insertFields);
        
        $user               = [];
        if( trim($createUserResponse->data[0]->code) == 'SUCCESS'){    
            $zoho_id = $createUserResponse->data[0]->details->id ;
            updateContactInfo($zoho_id,$user_details['ads_record_id']);
            $user['zoho_id'] = $zoho_id;
        } else{
                // exception log
                $filename               = basename($_SERVER['PHP_SELF']);
                api_exception_log($filename, 'APIManageZOHOContact - Add ', serialize($createUserResponse));
        }
        return $user;
    } else if($opt_type == 'update'){
        $updateFields       =  createDataArrayForZoho($user_details);
        $updateResponse     =  createRecordInZoho('Contacts/upsert',$updateFields);
        // $updateResponse     =  zoho_exception_log($updateResponse, 'APIManageZOHOContact - Update'); 
        $user               = [];
        if( trim($updateResponse->data[0]->code) == 'SUCCESS'){    
            $zoho_id = $updateResponse->data[0]->details->id ;
            updateContactInfo($zoho_id,$user_details['ads_record_id']);
            $user['zoho_id'] = $zoho_id;
        } else{
                // exception log
                $filename               = basename($_SERVER['PHP_SELF']);
                api_exception_log($filename, 'APIManageZOHOContact - Update ', serialize($updateResponse));
        }
        return $user;
         
    } else if ($opt_type == "userStatusUpdate"){
        if($bulk) {
            $updateFields = array();
            foreach($user_details as $key => $value) {
                $user_array = array (
                    "id"                => $value['user_id'],
                    "ADS_User_Status"   => $value['status']
                );
                array_push($updateFields,$user_array );
            }
        } else {
            $updateFields = array(
                "ADS_User_Status" => $user_details['status']
            );
        }
        if($bulk) {
            $updateResponse     = updateBulkRecordsInZoho('Contacts', $updateFields);
            $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - bulkUserStatusUpdate');
        } else {
            $updateResponse     = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
            $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - userStatusUpdate');
        }
      
        return $updateResponse;
    } else if($opt_type == "update_account_name") {
        $updateFields       =  createDataArrayForZoho($user_details);
        // $updateResponse     =  createRecordInZoho('Contacts/upsert',$updateFields);
        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
      
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - update_account_name'); 
       return $updateResponse;
        // $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        // $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - eulaManage'); 
    } else if ($opt_type == "update_company_name_edit"){ // sync in edit company and match found.
        $updateFields = array(
            "Account_Name" => $user_details['company_name'],
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - update_company_name_edit'); 
    }else if ($opt_type == "eulaManage"){
        $updateFields = array(
            "EULA_Accept_IP" => $user_details['eula_ip'],
            "EULA_Accept_Date" => isoDateFormatForZoho($user_details['eula_accept_date']),
            "EULA_Accepted" => true
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - eulaManage'); 
    }else if ($opt_type == "adsphereAuthenticateUpdate"){
        $updateFields = array(
            "ADS_Authenticated" => true
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - adsphereAuthenticateUpdate'); 
       
    }else if ($opt_type == "authyAuthenticated"){
        $updateFields = array(
            "Authy_Authenticated" => true
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - authyAuthenticated'); 
    }else if ($opt_type == "userLoginManage"){
        $updateFields = array(
            "ADS_Login_Count" => $user_details['user_login_count'],
            "ADS_Last_Login"  => $user_details['user_last_login'],
        );
        if($user_details['user_login_count'] == 1){
            $updateFields['First_Login_Date']  = $user_details['user_last_login'];
        }
        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - APIManageZOHOContact'); 
    }else if($opt_type == "newUserActivationLink"){
        $updateFields = array(
            "Activation_Link_2" => $user_details['activation_link']
        );
       
        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - newUserActivationLink'); 
    }else if($opt_type == "resendEmail"){
        $updateFields = array(
            "ADS_template_Resend" => true
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - resendEmail'); 
    } else if($opt_type == 'excelUpdate') {
        $updateFields = array(
            "Lifetime_Download" => $user_details['excel_lifetime_count'],
            "Day_Download"      => $user_details['excel_30days_count'],
        );

        $updateResponse = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - excelUpdate');
    } else if($opt_type == "move_old_to_new") {
     
        if($bulk) {
            $updateFields = array();
            if(!empty($user_details)) {
                $comp_name = $user_details[0]->company_name;
                foreach($user_details as $key => $value){
                    $user_array = array (
                        "id"           => $value->id,
                        "Account_Name" => $comp_name,
                    );
                    array_push($updateFields,$user_array );
                }
            } 
        } 
        if($bulk) {
            $updateResponse     = updateBulkRecordsInZoho('Contacts', $updateFields);
            $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - move contact from old account to new account'); 
        } else {
            // $updateResponse     = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
            // $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - move contact from old account to new account'); 
        }
    }else if($opt_type == "deleteUser"){
        if($bulk) {
            $updateFields = array();
            if($_SESSION['role'] != 'superadmin') {
                    foreach($user_details as $key => $value) {
                        $user_array = array (
                            "id"           => $value,
                            "ADS_User_Status" => 'Deleted',
                            "Customer" => false,
                        );
                        array_push($updateFields,$user_array );
                }
            } else {
                foreach($user_details as $key => $value) {
                    $user_array = array (
                        "id"           => $value,
                        "ADS_User_Role" => '',
                        "ADS_Record_ID" => '',
                        "ADS_Username" => '',
                        "ADS_User_Status" => '',
                        "ADS_Login_Count" => '',
                        "ADS_Last_Login" => '',
                        "Drip_Campaign" => '',
                        "EULA_Accepted" => '',
                        "New_Weekly_Report1" => '',
                        "Just_Sent_ADS_Template" => '',
                        "ADS_template_Resend" => '',
                        "ADS_Authenticated" => '',
                        "Authy_Authenticated" => '',
                        "Adsphere_Cont_ID" => '',
                        "EULA_Accept_IP" => '',
                        "EULA_Accept_Date" => '',
                        "Customer" => false,
                        "Activation_Link_2" => '',
                        "ADS_Template_Sent" => '',
                        "Trigger_Authentication_Workflow" => '',
                        "Trigger_Admin_3_Days_Remaining" => '',
                        "Trigger_Admin_Contact_Owner_Reminder" => '',
                        "Trigger_User_Workflow" => '',
                        "Trigger_User_1_Week_Reminder" => '',
                        "Trigger_User_Contact_Owner_Reminder" => '',
                        "Assistant_Admin" => '',
                        "Company_Type"   => ''
                    );
                    array_push($updateFields,$user_array );
                }
            }
        } else {
                if($_SESSION['role'] != 'superadmin') {
                        $updateFields = array(
                            "ADS_User_Status" => 'Deleted',
                        );
                } else {
                $updateFields = array(
                    "ADS_User_Role" => '',
                    "ADS_Record_ID" => '',
                    "ADS_Username" => '',
                    "ADS_User_Status" => '',
                    "ADS_Login_Count" => '',
                    "ADS_Last_Login" => '',
                    "Drip_Campaign" => '',
                    "EULA_Accepted" => '',
                    "New_Weekly_Report1" => '',
                    "Just_Sent_ADS_Template" => '',
                    "ADS_template_Resend" => '',
                    "ADS_Authenticated" => '',
                    "Authy_Authenticated" => '',
                    "Adsphere_Cont_ID" => '',
                    "EULA_Accept_IP" => '',
                    "EULA_Accept_Date" => '',
                    "Customer" => false,
                    "Activation_Link_2" => '',
                    "ADS_Template_Sent" => '',
                    "Trigger_Authentication_Workflow" => '',
                    "Trigger_Admin_3_Days_Remaining" => '',
                    "Trigger_Admin_Contact_Owner_Reminder" => '',
                    "Trigger_User_Workflow" => '',
                    "Trigger_User_1_Week_Reminder" => '',
                    "Trigger_User_Contact_Owner_Reminder" => '',
                    "Assistant_Admin" => '',
                    "Company_Type"   => ''
                );
            }
        }
    
        if($bulk) {
            $updateResponse     = updateBulkRecordsInZoho('Contacts', $updateFields);
            $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - deleteBulkUsers'); 
        } else {
            $updateResponse     = updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
            $updateResponse     = zoho_exception_log($updateResponse, 'APIManageZOHOContact - deleteUser'); 
        }
        
        // $deleteResponse= deleteRecordFromZoho('Contacts',$user_details['zoho_contact_id']);
        // $deleteResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - Hard deleteUser'); 
      
        return $updateResponse;
   }else if($opt_type == "changeAdminRoleUser"){
        $updateFields = array(
            "ADS_User_Role" => 'User'
        );
        $updateResponse     =  updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - changeAdminRoleUser'); 

        return $updateResponse;
   } else if($opt_type == "changeAdminRoleAdmin"){
        $updateFields = array(
            "ADS_User_Role" => 'Admin',
            "Assistant_Admin" => false
        );
        $updateResponse     =  updateRecordInZoho('Contacts',$user_details['zoho_contact_id'], $updateFields);
        $updateResponse = zoho_exception_log($updateResponse, 'APIManageZOHOContact - changeAdminRoleAdmin'); 
    
        return $updateResponse;
    }
}
function process_curl($url, $query){
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
    $response_info = curl_getinfo($ch);
    $response = curl_exec($ch);
    curl_close($ch);
    $xml_rsp = new SimpleXMLElement($response);
    return $xml_rsp;
}

function getCompanyinfo($company_id){
    $sql = "SELECT zoho_account_id FROM company WHERE id = '".$company_id."'";
    $db = getConnection();
    $get_result = execute_query_get_result($sql, 'FETCH_OBJ');
  /*  $stmt = $db->prepare($sql);
    $stmt->execute();
    $get_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $get_result;
}

function getRevenue(){
    $result = explode(',',REVENUE);
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}


function getUserLoginCount($user_id){
    $db = getConnection();
    $sql = "SELECT count(user_id) as login_count FROM user_logs WHERE user_id = '".$user_id."'"; 
    $get_result = execute_query_get_result($sql, 'FETCH_OBJ');   
   /* $stmt = $db->prepare($sql);
    $stmt->execute();
    $get_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $get_result[0]->login_count;
}

function curl_param($crm_type,$column_list,$search_parma,$search_value){
    $param = array();
    $param['url'] = "https://crm.zoho.com/crm/private/xml/".$crm_type."/getSearchRecordsByPDC";
    $param['query'] = "newFormat=1&authtoken=".ZOHO_APIKEY."&scope=crmapi&wfTrigger=true&selectColumns=".$crm_type."('".$column_list.",')&searchColumn=".$search_parma."&searchValue=".urlencode($search_value);
    return $param;
}

function updateAccountInfo($zoho_account_id,$company_id){
    $db = getConnection();
    $sql = "UPDATE company SET zoho_account_id ='".$zoho_account_id."' WHERE id = '".$company_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}
function updateContactInfo($zoho_contact_id,$user_id){
    $db = getConnection();
    $sql = "UPDATE user SET zoho_contact_id ='".$zoho_contact_id."' WHERE user_id = '".$user_id."' ";
    $stmt = $db->prepare($sql);
    $stmt->execute();
}

function getUserInfoById($user_id){
    $db = getConnection();
    $sql = "SELECT u.*, COUNT(ul.user_id) as login_count, if(u.authy_bypass_until > '0000-00-00' and u.authy_bypass_until > (NOW() - INTERVAL 24 HOUR), 1, 0) skip_authy, SUM(CASE WHEN ul.created_at >= '".date('Y-m-d', strtotime('-30 days'))."' THEN 1 ELSE 0 END) as last_30_days_count
            FROM user u LEFT JOIN user_logs ul on u.user_id = ul.user_id
            WHERE u.user_id = '".$user_id."' group by u.user_id;";
    $get_result = execute_query_get_result($sql, 'FETCH_OBJ');
    /*$stmt = $db->prepare($sql);
    $stmt->execute();
    $get_result = $stmt->fetchAll(PDO::FETCH_OBJ);*/
    return $get_result;
}

function getAllActiveNetworks() {
    $details['result'] = get_query_result('__query_get_all_networks', array(), 'FETCH_ASSOC');

    echo json_encode($details);
}

function createImageLink($creative_id, $airing_id, $no_of_days = EXCEL_VIDEO_EXPIRY_DAYS) {
    $query_string = base64_encode("creative_id=$creative_id&airing_id=$airing_id&date=".time()."&page=Thumbnail");
    return 'http://'.HOST."/drmetrix/video/{$query_string}?video=2";
}

function networkExcelExport(){
    if(!isset($_REQUEST) || !count($_REQUEST)) {
        $request    = Slim::getInstance()->request();
        $_REQUEST   = (array) json_decode($request->getBody());
    }
    $db = getConnection();
    $requestData = array();
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    $requestData['skip_category_clause'] = 0; 
    $excel_header = array(); 
    $network_code_arr = explode(',', $_REQUEST['network_code']);
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    if( !isset($set_one) || count($set_one) == 0 ) {
        $set_one = $_REQUEST;
    }
    $raw_data = array();
    if(isset($_REQUEST)) {
        $raw_data = $requestData = $_REQUEST;
        if( !isset($requestData['skip_category_clause']) ) {
            $requestData['skip_category_clause'] = 0;
        }
    } else {
        foreach($set_one as $k =>$v){
            $raw_data                       = explode('=',$v);
            $requestData[$raw_data[0]]      = $raw_data[1];
        }
    }
    //$brand_array = getArrayForNetworkTab($requestData, '__query_get_airings_brands_networks');
    $brand_array = isset($_SESSION['export_network']) ? $_SESSION['export_network'] : (isset($_REQUEST['export_network']) ? unserialize($_REQUEST['export_network']) : '');

    //$network_array = $requestData['network_array'];
    $sd     = $requestData['sd'];
    $ed     = $requestData['ed'];
    $val    = $requestData['val'];
    $c      = urldecode($requestData['c']);
    $tab    = $requestData['type']; 
    $search = !empty($requestData['search_text']) ? $requestData['search_text'] : 'none';
    $requestData['network_sub_tab']    = $requestData['networkTab'];
    $count  = count($brand_array);  
    /*$sum = 0;
    
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
            $sum += $nw_arr[ 'projected_score' ];
        }
    }
    
    $sum = $requestData['total_spend'];*/

    if($tab == 1){
        //foreach($brand_array as $key => $value){
            
           // $nestedData['Brand Name']            = $value['_creatives_']['name'];
            $excel_head_col1 = 'Creatives';
            $excel_head_col2 = 'Brand Name';
            //$_creatives_                    = $brand_array[$key]['_creatives_'];
            //$nestedData['Creatives']   = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;

            /*foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);                    
                    if($requestData['network_sub_tab'] == 'spend_index'){
                        $projected_score = round($nw_arr['projected_score']*100/$sum,2);
                        $nestedData[$nw.'_spend_index'] = $projected_score ? $projected_score  : '0' ;                        
                    }else{
                        $nestedData[$nw.'_airings'] = $nw_arr['airings'] ? $nw_arr['airings'] : '0' ;
                    }
                }
            }*/
            if($requestData['network_sub_tab'] == 'spend_index'){
                //$nestedData['Total Share']  = $value['_creatives_']['Spend Index'];
                $excel_head_col3 = 'Total Dollars';
            }else{
                //$nestedData['Airings']  = $value['_creatives_']['Airings'];
                $excel_head_col3 = 'Airings';
            }
            //$data[] = $nestedData;
        //}
    }else{
        //foreach($brand_array as $key => $value){
            
            //$nestedData['Advertiser Name']  = $value['_creatives_']['name'];
            $excel_head_col1 = 'Brands';
            $excel_head_col2 = 'Advertiser Name';
            //$_creatives_                = $brand_array[$key]['_creatives_'];            
            //$nestedData['Brands']       = $_creatives_['creative_count'] ? $_creatives_['creative_count'] : 0;
            /*foreach($value as $nw => $nw_arr){
                if ($nw != '_creatives_') {
                    $nw = stripslashes($nw);
                    if($requestData['network_sub_tab'] == 'spend_index'){
                        $projected_score = round($nw_arr['projected_score']*100/$sum,2);
                        $nestedData[$nw.'_spend_index'] = $projected_score;
                    }else{
                        $nestedData[$nw.'_airings'] = $nw_arr['airings'];
                    }
                }
            }*/
            if($requestData['network_sub_tab'] == 'spend_index'){
               // $nestedData['Total Share']  = $value['_creatives_']['Spend Index'];
                $excel_head_col3 = 'Total Dollars';
            }else{
                //$nestedData['Airings']  = $value['_creatives_']['Airings'];
                $excel_head_col3 = 'Airings';
            }
            //$data[] = $nestedData;
        //}
    }
    array_push($excel_header, $excel_head_col1);
    array_push($excel_header, $excel_head_col2);
    $x =  2;
    foreach ($network_code_arr as $value) {
        array_push($excel_header, $value);
        $x++;
    }   
    array_push($excel_header, $excel_head_col3);
    
    $q = $x;

    $json_data['rows']      = $brand_array;//$data;
    $json_data['records']   = $count;
    //echo "<pre>excel_header"; print_r($excel_header);echo "<pre> --rows"; print_r($json_data['rows']); exit;
    //To create excel

    $styleHeader = array(
        'font'  => array(
            'size'  => 16,            
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            //'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
            'rotation'   => 90,
            'startcolor' => array(
                'argb' => 'B5B5B5'
            ),
            'endcolor'   => array(
                'argb' => 'E0E0E0'
            )
        )
    );    
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );

    $styleArray = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
            )
        )
    );
    
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  

    $sub_tab_title = 'Airings';
    $_report_type = 'network_airings';
    if($requestData['network_sub_tab'] == 'spend_index'){
        $sub_tab_title = "Market Dollars";
        $_report_type = 'network_market_share';
    }

    $title = $tab == 1 ? 'DRM Network Report All Brands ('.$sub_tab_title.') '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His')  : 'DRM Network Report All Advertisers ('.$sub_tab_title.') '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His');
    
    $report_title = $tab == 1 ? 'Brands ('.$sub_tab_title.')' : 'Advertisers ('.$sub_tab_title.')';

    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $spanish                = urldecode($_REQUEST['spanish']);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $cat                    = rtrim($cat,",");
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }

    $breaktype = 'All';
    if(isset($_REQUEST['breaktype'])){
        if($_REQUEST['breaktype'] == 'L'){
            $breaktype = 'DPI';
        }else if ($_REQUEST['breaktype'] == 'N'){
            $breaktype = 'National';
        }
    }
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Network Report For All ".$report_title." \n");


    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter." | Break Type - ".$breaktype." | Response Type - ".$response_type_filter." | Categories - ".$cat_filter." | Search Text - ".$search;

    $i = 2; 
    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K','L');
    $last_col = count($excel_header) - 1;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);

    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(20);
    $objDrawing->setOffsetY(30);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$col_arr[$last_col].'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$col_arr[$last_col]."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(30);

   

    $objPHPExcel->getProperties()->setTitle($title)
                                ->setDescription("Network report");  
     
    $column_in_number_format = [];
    $colFormatStart = 'B';
    foreach($excel_header as $a => $b){
        $colFormatStart++;
        array_push($column_in_number_format,$colFormatStart);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleArray, False);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleSubHeader);
        if($col_arr[$a] !='A')
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$a])->setAutoSize(true);
    }
    $i++;  
  
    $cnt = 0;
    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
    foreach($json_data['rows'] as $key => $val){
        if(gettype($val) == "object") $val = (array) $val;
        foreach ($val as $ky => $vl) {
            if(gettype($vl) == "object") $vl = (array) $vl;
            $flag_unset  = 0;
            if (!empty($search) && $search != 'none'){
                if(isset($vl['Brand Name']))
                    $search_name = $vl['Brand Name'];
                else
                    $search_name = $vl['Advertiser Name'];
                
                if(stripos($search_name, $search) !== false){
                    $flag_unset  = 0;
                }else{
                    $flag_unset  = 1;
                }
            }
          
            $z = 0;
         
            if(!$flag_unset){
                foreach ($excel_header as $k => $v) {
                    if($k == count($excel_header) - 1 && gettype($vl) == "array") {
                        $vl[$v] = filter_var($vl[$v], FILTER_SANITIZE_NUMBER_INT);
                    }
                    if(isset($vl[$v]) && isset($col_arr[$z]) && gettype($vl) == "array"){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$z].$i,$vl[$v]);
                        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$z].$i.":".$col_arr[$z].$i)->applyFromArray($styleArray, False);
                        $objPHPExcel->getActiveSheet()->getStyle($col_arr[$z].$i)->getAlignment()->applyFromArray(
                            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)
                        );
                    }else if(isset($vl[$v.'_'.$requestData['network_sub_tab']]) && isset($col_arr[$z]) && gettype($vl) == "array"){
                        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$z].$i,$vl[$v.'_'.$requestData['network_sub_tab']]);
                        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$z].$i.":".$col_arr[$z].$i)->applyFromArray($styleArray, False);
                       $objPHPExcel->getActiveSheet()->getStyle($col_arr[$z].$i)->getAlignment()->applyFromArray(
                           array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)
                       );
                    }

                     $z++;               
                }
                $i++;
            }
        }
    }
    
        $objPHPExcel->getActiveSheet()->getStyle('B3:B'.($i+1))->getAlignment()->applyFromArray(
            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)
        );

    if(empty($brand_array)){
        $displayTab = $tab == 1 ? 'brands' : 'advertiser';
        $objPHPExcel->getActiveSheet()->mergeCells('A2:'.$col_arr[$last_col].'2');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A2','There are no '.$displayTab.' matches within the classification and categories selected and media dates selected.');
    }

    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Network report');
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';

    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);

    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['status']              = 'completed';
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = $_report_type;
    $requestData['no_of_rows']          = $json_data['records'];    
    //addExcelExportInfo($requestData);
    //echo json_encode(array('status'=>1, 'done'=>'done'));
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));

}

function refineExcelExport() {
    if(!isset($_REQUEST) || !count($_REQUEST)) {
        $request    = Slim::getInstance()->request();
        $_REQUEST   = (array) json_decode($request->getBody());
    }
    $db = getConnection();
    $requestData = array();
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    $requestData['skip_category_clause'] = 0; 
    $excel_header = array('Creative', 'Brand', 'Advertiser', 'Airings','TFN','URL','First Aired', 'Last Aired');
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $raw_data = array();
    if( isset($_REQUEST) && count($_REQUEST) != 0 ) {
        $set_one = $requestData = $_REQUEST;
    } else {
        foreach($set_one as $k =>$v) {
            $raw_data                   = explode('=',$v);
            $requestData[$raw_data[0]]  = $raw_data[1];
        }
    }
    //$brand_array = getArrayForNetworkTab($requestData, '__query_get_airings_brands_networks');
    $brand_array = isset($_SESSION['export_refine_records']) ? $_SESSION['export_refine_records'] : array('rows' => unserialize($_REQUEST['export_refine_records']));
    //$network_array = $requestData['network_array'];
    $sd     = $requestData['sd'];
    $ed     = $requestData['ed'];
    $val    = $requestData['val'];
    $c      = urldecode($requestData['c']);
    $tab    = $requestData['type']; 
    $search = !empty($requestData['search_text']) ? $requestData['search_text'] : 'none';
    $count  = count($brand_array);  
    /*$sum = 0;
    
    foreach($brand_array as $num => $value) {
        foreach($value as $nw => $nw_arr){
            $sum += $nw_arr[ 'projected_score' ];
        }
    }
    
    $sum = $requestData['total_spend'];*/
    $x =  2;
    
    $json_data['rows']      = $brand_array;//$data;
    $json_data['records']   = $count;
    //echo "<pre>excel_header"; print_r($excel_header);echo "<pre> --rows"; print_r($json_data['rows']); exit;
    //To create excel
    $styleHeader = array(
        'font'  => array(
            'size'  => 16,            
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            //'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
            'rotation'   => 90,
            'startcolor' => array(
                'argb' => 'B5B5B5'
            ),
            'endcolor'   => array(
                'argb' => 'E0E0E0'
            )
        )
    );    
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );
    $styleArray = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
            )
        )
    );
    
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  
    $displayLabel = strtoupper($requestData['refine_filter_opt']);
    if($requestData['refine_filter_opt'] == '800') {
        $displayLabel = 'TFN';
    }
    $sub_tab_title = 'Refine by '.$displayLabel.' with '.$requestData['refine_filter_opt_text'];
    $title = $tab == 1 ? 'DRM Report All Brands ('.$sub_tab_title.') '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His')  : 'DRM  Report All Advertisers ('.$sub_tab_title.') '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His');
    
    $report_title = $tab == 1 ? 'Brands ('.$sub_tab_title.')' : 'Advertisers ('.$sub_tab_title.')';
    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $spanish                = urldecode($_REQUEST['spanish']);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $cat                    = rtrim($cat,",");
    $active_flag            = (isset($_REQUEST['flag']) && ($_REQUEST['flag']!= 'undefined')) ? $_REQUEST['flag'] : '2';
    $new_filter_opt         = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $new_filter             = $new_filter_opt == 'none' ? 'All' : ucfirst($new_filter_opt);
    $program_ids            = isset($_REQUEST['programs_ids']) ? urldecode($_REQUEST['programs_ids']) : '';
    $network_name           = isset($_REQUEST['network_name']) ? $_REQUEST['network_name'] : '-';
    $program_text           = empty($program_ids) ? 'All' : 'Custom';
    $active_inactive_filter = 'All';
    if($active_flag == 1){
       $active_inactive_filter = 'Active';
    }elseif($active_flag == 0){
        $active_inactive_filter = 'Inactive';
    }
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Report For All ".$report_title." \n");
    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter."  | Response Type - ".$response_type_filter." | Categories - ".$cat_filter."  | Network - ".htmlspecialchars_decode($network_name)."| New - ".$new_filter." | Active/Inactive - ".$active_inactive_filter ." | Search Text - ".$search. "| Programs - ".$program_text;
    $i = 2; 
    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K','L');
    $last_col = 'H';
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(20);
    $objDrawing->setOffsetY(30);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$last_col.'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$last_col."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(70);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("E")->setWidth(25);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("F")->setWidth(25);


    $objPHPExcel->getProperties()->setTitle($title);
    foreach($excel_header as $a => $b){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleArray, False);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleSubHeader);
        if($col_arr[$a] !='A' && $col_arr[$a] !='E' && $col_arr[$a] !='F')
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$a])->setAutoSize(true);
    }
    $char = 'A';
    $row = 2;
    foreach($json_data['rows'] as $key => $val){
        foreach ($val as $ky => $vl) {
            $char = 'A';   
            $row++;
            foreach($vl as $array_key => $array_value){
                $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$row,$array_value);
                $char++;
            }
        }
    }
    $lastrow = $objPHPExcel->getActiveSheet()->getHighestRow();
    $objPHPExcel->getActiveSheet()
        ->getStyle('D1:D'.$lastrow)
        ->getAlignment()
        ->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    if(count($json_data['rows']) == 0){
        $displayTab = $tab == 1 ? 'brands' : 'advertiser';
        $objPHPExcel->getActiveSheet()->mergeCells('A3:F3');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A3','There are no '.$displayTab.' matches within the classification and categories selected and media dates selected.');
    }
    $displayTab = $tab == 1 ? 'Brands Report' : 'Advertiser Report';
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle($displayTab);
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['status']              = 'completed';
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = 'ranking';
    $requestData['no_of_rows']          = $json_data['records'];    
    //addExcelExportInfo($requestData);
    //echo json_encode(array('status'=>1, 'done'=>'done'));
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
}

function networksExcel() {
    $db = getConnection();
    $requestData = array();
    $result     = array();
    $data       = array();
    $json_data  = array();
    $params     = array();
    $where_category = $join_category = '';
    $requestData['skip_category_clause'] = 0; 
    $excel_header = array('Rank', 'Network Name', 'DPi', 'Total Spend','Total Airings','National Airings','National %', 'National Spend','DPI Airings','DPI %','DPI Spend');
    $params       = getRequestDataForRefineFilters();
    $result       = get_query_result('__queries_networks_ranking_report', $params, 'FETCH_OBJ');
    $x =  2;
    
    $json_data['rows']      = $result;//$data;
    $json_data['records']   = count($result);

    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  
    extract($params);
    $title = $type == 1 ? 'DRM Report All Brand Networks '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His')  : 'DRM  Report All Advertiser Networks'.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His');
    $sub_tab_title   = 'Network Ranking Report';
    $report_title = $tab == 1 ? 'Brands ('.$sub_tab_title.')' : 'Advertisers ('.$sub_tab_title.')';
    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $spanish                = urldecode($_REQUEST['spanish']);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $cat                    = rtrim($cat,",");
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }
    
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Report For All ".$report_title." \n");
    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter."  | Response Type - ".$response_type_filter." | Categories - ".$cat_filter;
    $i = 2; 

    $styleHeader    =styleHeaderExcel();
    $styleSubHeader = styleSubHeaderRankingExcel();
    $styleArray     = styleExcel();

    $col_arr = array('A','B','C','D','E','F','G','H','I','J','K','L');
    $last_col = 'L';
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(20);
    $objDrawing->setOffsetY(30);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$last_col.'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$last_col."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(70);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("E")->setWidth(25);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("F")->setWidth(25);


    $objPHPExcel->getProperties()->setTitle($title);
    foreach($excel_header as $a => $b){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($col_arr[$a].$i,$b);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleArray, False);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($col_arr[$a].$i.":".$col_arr[$a].$i)->applyFromArray($styleSubHeader);
        if($col_arr[$a] !='A' && $col_arr[$a] !='E' && $col_arr[$a] !='F')
            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($col_arr[$a])->setAutoSize(true);
    }
    $char = 'A';
    $row = 2;
    $networkIds = [];

    foreach($json_data['rows'] as $key => $val) {
        foreach($val as $array_key => $array_value){
            if($array_key == 'network_id') {
                array_push($networkIds , $array_value) ;
            }
        }
    }
    array_unique($networkIds);
    $params['networksIds'] = $networkIds;
    $result                = get_query_result('__queries_networks_by_id', $params, 'FETCH_OBJ');
    foreach($json_data['rows'] as $key => $val){
        foreach($result as $network_key => $network_value){
            if($val->network_id == $network_value->network_id) {
                $val->network_name = $network_value->network_alias;
                $val->dpi = $network_value->dpi;
            }
        }
    }
    $rank = 0;
    foreach($json_data['rows'] as $key => $val){ 
            $excel_array[$key]['rank']              = $rank++;
            $excel_array[$key]['network_name']      = $val->network_name;
            $excel_array[$key]['dpi']               = $val->dpi == 1 ? 'Y' : 'N';
            $excel_array[$key]['total_spend']       = $val->total_spend;
            $excel_array[$key]['total_airings']       = $val->airings;
            $excel_array[$key]['national_airings']  = $val->national_airings;
            $excel_array[$key]['national_percent']  = $val->national; 
            $excel_array[$key]['national_spend']    = $val->national_spend; 
            $excel_array[$key]['local_airings']     = $val->local_airings;
            $excel_array[$key]['local_percent']     = $val->local; 
            $excel_array[$key]['local_spend']       = $val->local_spend; 
    }
    foreach($excel_array as $key => $val){   
            $char = 'A';   
            $row++;
            foreach($val as $array_key => $array_value){
                $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$row,$array_value);
                $char++;
            }
    }
    $lastrow = $objPHPExcel->getActiveSheet()->getHighestRow();
    $objPHPExcel->getActiveSheet()
        ->getStyle('D1:D'.$lastrow)
        ->getAlignment()
        ->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    if(count($json_data['rows']) == 0){
        $displayTab = $tab == 1 ? 'brands' : 'advertiser';
        $objPHPExcel->getActiveSheet()->mergeCells('A3:L3');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A3','No Records Found');
    }
    $displayTab = $tab == 1 ? 'Brands Network Ranking Report' : 'Advertiser Network Ranking Report';
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle($displayTab);
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = $_SESSION['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);
    $requestData = $params;
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['status']              = 'completed';
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = 'ranking';
    $requestData['no_of_rows']          = $json_data['records'];    
    $requestData['c']                   = $c;
    $requestData['sd']                  = $sd;
    // show($requestData, 1);
    //addExcelExportInfo($requestData);
    //echo json_encode(array('status'=>1, 'done'=>'done'));
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
}

function submitUserRateFeedback() {
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    parse_str($query_string, $output);

    $db = execute_query('__query_insert_user_rate_feedback', $output);
    echo json_encode(array('status'=>1));
}

function manageNetworkTab(){
    $db  = getConnection();
    $company_id = explode('_',$_REQUEST['company_id']);
    $sql = "UPDATE company SET network_tab = '".$_REQUEST['network_tab_checked']."' WHERE id = '".$company_id[3]."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $network_tab = 'false';
    if($_REQUEST['network_tab_checked'])
        $network_tab = 'true';
    $zoho_account_id = getCompanyInfo($company_id[3]); 
    $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
    $company_details['network_tab'] = $network_tab;

    APIManageZOHOAccount('manageNetworkTab',$company_details);
    echo json_encode(array('status'=>1));
}

function manageSkipAuthy(){
    $request = Slim::getInstance()->request();
    $_REQUEST = (array) json_decode($request->getBody());

    $authy_bypass_until = $_REQUEST['skip_authy_checked'] ? 'now()' : '"0000-00-00"';

    $db  = getConnection();
    if( isset($_REQUEST['company_id']) ) {
        $company_id = $_REQUEST['company_id'];
        /*$sql = 'UPDATE user SET authy_bypass_until = '.$authy_bypass_until.' WHERE company_id = '.$company_id.';';
         $stmt = $db->prepare($sql);
         $stmt->execute();*/

        // $authy_bypass_until = $_REQUEST['staging_access_checked'] ? '(now() + INTERVAL 24 HOUR)' : '0000-00-00';
        // $sql = 'UPDATE user u, admin_user au SET authy_bypass_until = '.$authy_bypass_until.' WHERE au.user_id = u.user_id and au.admin_id = '.$company_id.';';
        $sql = 'UPDATE user u, user a, admin_user au SET u.authy_bypass_until = '.$authy_bypass_until.', a.authy_bypass_until = '.$authy_bypass_until.'
                WHERE au.user_id = u.user_id and a.user_id = au.admin_id and a.company_id = '.$company_id.';';
    } else {
        $user_id = $_REQUEST['user_id'];

        $sql = 'UPDATE user SET authy_bypass_until = '.$authy_bypass_until.' WHERE user_id = '.$user_id.';';
    }
    $stmt = $db->prepare($sql);
    $stmt->execute();

    /*$staging_access = 'false';
     if($_REQUEST['staging_access_checked'])
     $staging_access = 'true';
     $zoho_account_id = getCompanyInfo($company_id[3]);
     $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
     $company_details['staging_access'] = $staging_access;

     APIManageZOHOAccount('manageStagingAccess',$company_details);*/
     echo json_encode(array('status'=>1));
}

function manageStagingAccess(){
    $db  = getConnection();
    $company_id = explode('_',$_REQUEST['company_id']);
    $sql = "UPDATE company SET staging_access = '".$_REQUEST['staging_access_checked']."' WHERE id = '".$company_id[3]."'";
    $stmt = $db->prepare($sql);
    $stmt->execute();
    $staging_access = 'false';
    if($_REQUEST['staging_access_checked'])
        $staging_access = 'true';
    $zoho_account_id = getCompanyInfo($company_id[3]);
    $company_details['zoho_account_id'] = $zoho_account_id[0]->zoho_account_id;
    $company_details['staging_access'] = $staging_access;

    APIManageZOHOAccount('manageStagingAccess',$company_details);
    echo json_encode(array('status'=>1));
}

function updateUserDetails($admin_info){
    $server = explode(':',$_SERVER['HTTP_HOST']);
    if ($server[0] != "adsphere.drmetrix.com") { //avoide to create record in zoho through text evn.
         return true;
    }
    $final_array = array();
    $sql_user = "SELECT
                    u.user_id,                      
                    u.zoho_contact_id,
                    u.client
                FROM 
                    user as u 
                INNER JOIN 
                    admin_user au ON au.user_id = u.user_id 
                WHERE 
                    au.admin_id = '".$admin_info['ads_record_id']."' ";
    $result_user = getResult($sql_user);
    foreach($result_user as $key => $value){        
        //$value['client'] = $admin_info['client'];
        $value['company_type'] = $admin_info['company_type'];
        $value['contact_owner'] = $admin_info['contact_owner'];
        array_push($final_array, $value) ; 
    }
    $i = 0;
    $db  = getConnection();
    foreach ($final_array as $key => $value) {
        //$client = ($admin_info['client'] == 'true') ? 'Yes' : 'No';
        if($admin_info['client'] == 'false'){
                $client = $admin_info['client'];
            }else{
                $client = ($value['client'] == 'Yes') ? 'true' : 'false';
            }

        $sql_update = "UPDATE user SET account_owner='".$value['contact_owner'] ."' WHERE user_id ='".$value['user_id']."'";        
        $stmt = $db->prepare($sql_update);
        $stmt->execute();
        $xml  = '<?xml version="1.0" encoding="UTF-8"?>
                <Contacts>
                <row no="1"> 
                <FL val="Company Type">'.$value['company_type'].'</FL>
                <FL val="Client">'.$client.'</FL>
                <FL val="Contact Owner">'.$value['contact_owner'].'</FL>
                </row>
                </Contacts>';
        $url = CONTACT_UPDATE_URL;
        $query="authtoken=".ZOHO_APIKEY."&scope=crmapi&wfTrigger=true&id=".$value['zoho_contact_id']."&xmlData=".$xml;
        process_curl($url, $query);    
        $i++;        
    }
}

function getAccountOwner(){
    $result = explode(',',ACCOUNT_OWNER);
    echo json_encode(array('status'=> 1, 'result' => $result,'count' => count($result)));
}

function saveUserFilter(){
    if(isset($_SESSION['filter_type']) && isset($_SESSION['filter_data']) && !empty($_SESSION['filter_type']) && !empty($_SESSION['filter_data'])){
        $params = $isDuplicateName = $isDuplicateCriteria =  $isDuplicateFilters = array();
        $list_ids = $primary_tab = '';
        $request  = Slim::getInstance()->request();
        $response = json_decode($request->getBody());
        $params['user_id']          = $_SESSION['user_id'];
        $params['filter_type']      = $_SESSION['filter_type'];
        $flag = isset($response->flag) ? $response->flag : '';
        $query_string               = $_SESSION['filter_data'];
        if(strpos($query_string, 'search_text') !== false){
            $query_string_arr       = explode('&search_text', $query_string);
            $query_string           = $query_string_arr[0];
        }
        if(strpos($query_string, 'list_id') !== false){
            $query_string_arr       = explode('&list_id', $query_string);
            $query_string_arr       = explode('&', $query_string_arr[1]);
            $filter_list_id         = str_replace('=','',$query_string_arr[0]); // if filter is saved as list ,then save list id in user_filters table
        }
        if(strpos($query_string, 'applied_ids') !== false){
            $query_string_arr       = explode('&applied_ids', $query_string);
            $query_string_arr       = explode('&', $query_string_arr[1]);
            
            $list_ids               = str_replace('=','',$query_string_arr[0]); // if filter is saved as list ,then save criteria ids in user_filters table
            $primary_tab            = str_replace('primary_tab=', '',$query_string_arr[1]);

        }
        $query_string                =  $query_string . "&search_text=" . str_replace('&', 'XxX', $response->search_text)  . "&active_inactive_flag=" . $flag;
        $query_string                = $query_string.'&page_call='.$response->page;
        $params['list_ids']          = isset($response->list_ids) ? urldecode($response->list_ids) : $list_ids;
        $params['list_type']         = isset($response->list_type) ? $response->list_type : $primary_tab;
        $params['list_id']           = isset($filter_list_id) ? $filter_list_id : '';
        $criteria                   = get_filter_text($query_string);
        $params['criteria']         = addslashes($criteria['save_text']);
        $params['filter_data']      = addslashes($query_string);
        $params['created_date']     = date("Y-m-d H:i:s");
        $name_of_report_filter      = addslashes(trim($response->filter_name));
        $params['filter_name']      = $params['brand_class'] = $name_of_report_filter;
        $params['page']             = $response->page;
        $params['primary_tab']      = $response->primary_tab;
        $params['secondary_tab']    = $response->secondary_tab;
        $params['overwrite_flag']   = $overwrite_flag =  $response->overwrite_flag;
        $params['programs']         = isset($response->programs) ? addslashes(serialize($response->programs)) : '';
        $params['filter_id'] = $filter_id = isset($response->filter_id) ? $response->filter_id : ''  ;
        $params['duplicate_found']   = $duplicate_found = $response->duplicate_found;
        $frequency = $params['frequency'] = $response->frequency;
        $schedule_email = $params['schedule_email'] = $frequency && $frequency != 'none' ? 1 : 0;
        $export_refine_apply_filter  = $response->export_refine_apply_filter;
        // $params['export_refine_records'] = $export_refine_apply_filter ? $_SESSION['export_refine_records'] : $_SESSION['export'];

        $params['status']           = 'active';
        $params['tracked_elements'] = $params['alert_type'] = 'filter';
        $params['user_id']          = $_SESSION['user_id'];
        $params['created_date']     = customDate('Y-m-d H:i:s');
        $email_schedulable          = false;
        if($duplicate_found != 1) {
            $isDuplicateFilters = get_query_result('__check_duplicate_filters', $params);
            $filter_id = '';
            if(!empty($isDuplicateFilters)) {
                $filter_id = $isDuplicateFilters[0]['id'];
                $filter_name = $isDuplicateFilters[0]['name'];
            }
        }

        if((count($isDuplicateFilters) <= 1 || $filter_id != '') && $duplicate_found != 1) {
            $isDuplicateName = get_query_result('__check_duplicate_name_filters', $params);
            $filter_id = '';
            if(!empty($isDuplicateName)) {
                $filter_id = $isDuplicateName[0]['id'];
            }
        }

        if(empty($isDuplicateName)  && $duplicate_found != 1) {
            $isDuplicateCriteria = get_query_result('__check_duplicate_criteria_filters', $params);
            $filter_id = '';
            if(!empty($isDuplicateCriteria)) {
                $filter_id = $isDuplicateCriteria[0]['id'];
            }
        }

        $email_schedulable = strpos(strtolower($params['criteria']), strtolower('Last Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Week')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Month')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Last Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Quarter')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Current Year - YTD')) !== false ||
        strpos(strtolower($params['criteria']), strtolower('Lifetime')) !== false;

        if(!empty($isDuplicateFilters) && count($isDuplicateFilters) > 1 ) {
            echo json_encode(array('status'=>3, 'isDuplicate' =>'both', 'message'=>'Filter with same criteria already exists with name "'.$filter_name.'" ', 'filter_id'=> $filter_id));
        } else if(!empty($isDuplicateName && empty($isDuplicateCriteria))){
            echo json_encode(array('status'=>0, 'isDuplicate' =>'name', 'message'=>'Filter with same name already exists', 'filter_id' => $filter_id));
        }else if(empty($isDuplicateName) && !empty($isDuplicateCriteria)) {
            echo json_encode(array('status'=>0, 'isDuplicate' =>'criteria', 'message'=>'Filter with same criteria already exists', 'filter_id'=> $filter_id));
        } else if($filter_id!= '' && $duplicate_found == 1) {
            execute_query('__qurey_update_user_filters', $params);
            echo json_encode(array('status'=>2));
            if($email_schedulable) {
                $params['type_id'] = $filter_id;
                $brand_class = $params['filter_name'];
                $user_id = $_SESSION['user_id'];
                $tracked_elements = $alert_type = 'filter';
                if($schedule_email) {
                    $params['status'] = 'active';
                } else {
                    $params['status'] = 'inactive';
                }
                $status  = execute_query('__query_update_tracking_details', $params, 'FETCH_OBJ');
            }
        } else {
            $db = execute_query('__qurey_insert_user_filters', $params);
            $params['type_id'] = $db->lastInsertId();

            echo json_encode(array('status'=>1));

            if($email_schedulable) {
                execute_query('__query_set_tracking_details', $params, 'FETCH_OBJ');
            }

            $server = explode(':',$_SERVER['HTTP_HOST']);
            if($server[0] != "localhost" && $schedule_email && $_SESSION['tracking_alert_subscribed']) {
                require_once dirname(__FILE__) . '/PHPMailer/class.phpmailer.php';
                require_once dirname(__FILE__) . '/email-template/schedule_email_template.php';
                $user_name      = $_SESSION['full_name'];
                $user_id        = $_SESSION['user_id'];
                $user_email     = $_SESSION['username'];
                $report_filter  = 'filter';

                $email_content  = alert_email($user_name, $user_id, $frequency, $report_filter, $name_of_report_filter, $params['type_id']);

                if ($email_content == '') {
                    return false;
                }

                $subject    = 'Scheduling email alert ';
                $from_name  = FROM_NAME;
                $from_email = FROM_EMAIL;

                $to_name    = $user_name;
                $to_email   = $user_email;

                $body     = $email_content;
                $body     = wordwrap($body, 50);

                $mail     = new PHPMailer(); //New instance, with exceptions enabled
                $mail->IsSendmail();  // tell the class to use Sendmail
                $mail->SetFrom($from_email, $from_name);
                //$mail->addCustomHeader('MIME-Version: 1.0');
                //$mail->addCustomHeader('Content-Type: text/html; charset=ISO-8859-1');
                $mail->AddAddress($to_email, $to_name);
                $mail->Subject  = $subject;
                $mail->MsgHTML($body);
                $mail->MsgHTML(wordwrap($body, 50));
                $mail->IsHTML(true); // send as HTML

                $tracking_email_recipients_array = explode(",", TRACKING_EMAIL_RECIPIENTS);

                foreach ($tracking_email_recipients_array as $email_address) {
                    $email_address = trim($email_address);
                    $mail->addBCC($email_address, $email_address);
                }

                //echo $body;
                if ($mail->Send()) {
                    // echo 'email sent';
                } else {
                    echo 'error while sending an email';
                }
            }

        }
    }else{
        echo json_encode(array('status'=>0));
    }
}

function fetchSelectedFilter(){
    $request = Slim::getInstance()->request();
    $response = json_decode($request->getBody());
    //$db = getConnection();
    $params = array();
    $params['user_id']              = $_SESSION['user_id'];
    $params['selected_filter_id']   = $response->selected_filter_id;
    $result                         = get_query_result('__query_fetch_selected_filter_list', $params, 'FETCH_OBJ');   

    $query_string                   = process_dates_for_filter ($result[0]->query_string, $result[0]->criteria);
    $set_one                        = explode('&', $query_string);
    $requestData                    = $raw_data = array();

    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        if($raw_data[0] == 'c'){
            $raw_data[1] = str_replace('+', " ", $raw_data[1]);                                                                             
        }else if($raw_data[0] == 'cat'){
            $raw_data[1] = str_replace('%2C', ",", $raw_data[1]);
        }
        
        if($raw_data[0] == 'unchecked_category'){
            $raw_data[1] = str_replace('%2C', ",", $raw_data[1]);
        }
        if( $raw_data[0] == 'responseType'){
                $requestData[$raw_data[0]] = urldecode($raw_data[1]);
        }else{
            $requestData[$raw_data[0]] = $raw_data[1];
        }
    }
    $pageData['page'] = $result[0]->page;
    $pageData['primary_tab'] = $result[0]->primary_tab;
    $pageData['secondary_tab'] = $result[0]->secondary_tab;

    echo json_encode(array('status'=>1, 'result' => $requestData, 'pageData' => $pageData));
}

function getUserFilterList(){
    $db = getConnection();
    $requestData = array();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();

    parse_str($query_string, $output);
    $requestData = (array)json_decode($query_string, TRUE);

    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $requestData['user_id']             = $_SESSION['user_id'];
    $columns = array( 
        'created_date'      => 'created_date',
        'name'              => 'name',
        'primary_tab'       => 'primary_tab',
        'shared_date'       => 'shared_date',
        'full_name'        => 'full_name'
    );

    $sql    = __query_get_user_filter_list($requestData); 
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
    $totalData  = count($obj);
    $count      = $totalData;
        
        
    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }
    if ($page > $total_pages) {
      $page = $total_pages;
    }
    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;
    if ($offset < 0) {
      $offset = 0;       
    }

    $_order_by = $columns[$sidx] ." ".$sord;//." LIMIT ".$offset. ", ".$limit;
    $order_by = " ORDER BY ".$_order_by;
    $requestData['order_by'] = $order_by;
    $sql    = sprintf(__query_get_user_filter_list($requestData));    
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
    $data = array();

    // $params['user_id']  = $_SESSION['user_id'];
    // $get_result         = get_query_result('__query_get_user_info_by_id', $params, 'FETCH_OBJ');
    // $assistant_admin    = $get_result[0]->assistant_admin;
    foreach($obj as $result_key => $result){
        $checked_shared_filter =  $checked_copy_filter = $checked_schedule_email = '';
        if($result['shared_by'] == $_SESSION['user_id']){
            $checked_shared_filter      =  'checked = checked';
        }

        if($result['email_schedulable'] && $result['schedule_email']) {
            $checked_schedule_email     =  'checked = checked';
        }

        if(($result['parent_id'] != 0)){
            $checked_copy_filter        =  'checked = checked';
        }

        $nestedData['id']               = $result['id'];
        $nestedData['name']             = urldecode($result['name']);
        $nestedData['primary_tab']      = ($result['primary_tab'] == 'adv') ? 'Advertiser' : 'Brand';

        if($requestData['tab'] == 'network'){
             $nestedData['secondary_tab']      = ($result['secondary_tab'] == 'market_share') ? 'Market Dollars' : 'Airings';
        }

        $disabled_shared_filter =  $disabled_class = $disable_copy_filter = $disabled_copy_filter_class = $disabled_schedule_email = $disabled_schedule_email_class = '';

        // if(!empty($result['shared_by']) && $result['shared_by'] != $_SESSION['user_id'] ) {
        if((!empty($result['shared_by']) && $result['shared_by'] != $_SESSION['user_id'] ) ) {
            $disabled_class             = 'other-opa';
            $disabled_shared_filter     = 'disabled = disabled';
        }else {
            $disabled_copy_filter_class = 'other-opa';
            $disable_copy_filter        = 'disabled = disabled';
        }

        /*if((!empty($result['email_schedulable']) && !$result['email_schedulable'])) {
            $disabled_schedule_email_class = 'other-opa';
            $disabled_schedule_email    = 'disabled = disabled';
        }*/
        $nestedData['checked_shared_filter'] = $checked_shared_filter;
        $nestedData['disabled_shared_filter'] = $disabled_shared_filter;
        $nestedData['disabled_class'] = $disabled_class;
        $nestedData['checked_schedule_email'] = $checked_schedule_email;
        $nestedData['disabled_schedule_email'] = $disabled_schedule_email;
        $nestedData['disabled_schedule_email_class'] = $disabled_schedule_email_class;
        $nestedData['email_schedulable_direct'] = $result['email_schedulable_direct'];
        $nestedData['checked_copy_filter'] = $checked_copy_filter;
        $nestedData['disable_copy_filter'] = $disable_copy_filter;
        $nestedData['disabled_copy_filter_class'] = $disabled_copy_filter_class;

        $shared_filter                  = $checked_shared_filter;

        $schedule_email = '';
        if($result['email_schedulable']) {
            $schedule_email             = $disabled_schedule_email_class;
        }
        $copy_filter                    = '<div class="checkbox"><input type="checkbox"  id="copy_filter_'.$result['id'].'" name="copy_filter" class="copy_filter checkbox-custom" onclick="copySharedFilter('.$result['id'].');" '.$checked_copy_filter.''.$disable_copy_filter.'><label class="checkbox-custom-label '.$disabled_copy_filter_class.'" for="copy_filter_'.$result['id'].'"></label></div>';
        $result['query_string']         = $result['query_string'].'&page_call='.$result['page'];
        $filter_text                    = get_filter_text($result['query_string']);
        $filter_text                    = str_replace('XxX', '&', $filter_text['display_text']);
        $nestedData['tab']              = $requestData['tab'];
        // $nestedData['query_string']     = substr($filter_text, 0, 100).'...';
        $nestedData['query_string']     = $filter_text;
        $nestedData['schedule_email']   = $schedule_email;
        $nestedData['shared_filter']    = $shared_filter;
        $nestedData['copy_filter']      = $copy_filter;
        $nestedData['full_name']        = $result['full_name'];
        $nestedData['shared_by']        = $result['shared_by'] != '' ? $result['shared_by'] : ' ';
        $nestedData['programs']         = json_encode(unserialize($result['programs']));
        $nestedData['created_date']     = standardDateTimeFormat('m-d-Y h:i A', strtotime($result['created_date']));
        $shared_date  = standardDateTimeFormat('m-d-Y h:i A', strtotime($result['shared_date']));
        $nestedData['shared_date']      = '<span title="'.$shared_date.'">'.readMoreHelper($shared_date, 10).'</span>' ;
        $nestedData['apply']            = 'Apply';
        $nestedData['json_data']        = query_string_to_json($result);
        $data[] = $nestedData;
    }
    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count; 
        
    echo json_encode($json_data); 
}

function deleteFilterRow(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $params['id'] = trim(urldecode($requestData['id']),",");
    execute_query('__qurey_delete_user_filters', $params);

    //$params                     = array();
    $params['alert_type']       = 'filter';
    $params['schedule_email']   = 1;
    $params['type_id']          = $params['id'];
    $params['user_id']          = $_SESSION['user_id'];
    execute_query('__query_delete_tracking_details', $params, 'FETCH_OBJ');

    echo "Deleted";
}

function updateAdminUserStatus($admin_info){
    $server = explode(':',$_SERVER['HTTP_HOST']);
    if(!makeZohoApiCalls()){
        return true;
    }
    // if ($server[0] != "adsphere.drmetrix.com") { //avoide to create record in zoho through text evn.
    //     return true;
    // }
    $final_array = array();
    $sql_user = "SELECT
                    u.user_id,                      
                    u.zoho_contact_id,
                    u.status,
                    u.client
                FROM 
                    user as u 
                INNER JOIN 
                    admin_user au ON au.user_id = u.user_id 
                WHERE 
                    au.admin_id = '".$admin_info['ads_record_id']."' ";
    $result_user = getResult($sql_user);
    if(!empty($result_user)){        
        foreach ($result_user as $key => $value) {
            if(strtolower($admin_info['status']) == 'inactive'){
                $u_status = $admin_info['status'];
                //$client = 'false';
            }else{
                $u_status = ucfirst($value['status']);
                //$client = ($value['client'] == 'Yes') ? 'true' : 'false';
            }
            $user_details['zoho_contact_id'] = $value['zoho_contact_id'];
            $user_details['status']          = $u_status;
            $updateStatus = APIManageZOHOContact("userStatusUpdate",$user_details);
            //<FL val="Client">'.$client.'</FL>
            /*$xml  = '<?xml version="1.0" encoding="UTF-8"?>
                <Contacts>
                <row no="1"> 
                <FL val="ADS User Status">'.$u_status.'</FL>
                </row>
                </Contacts>';
            $url = CONTACT_UPDATE_URL;
            $query="authtoken=".ZOHO_APIKEY."&scope=crmapi&wfTrigger=true&id=".$value['zoho_contact_id']."&xmlData=".$xml;
            process_curl($url, $query); */
        }
    }
}

function getAdvpageBrands(){
    $requestData = array();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $raw_data = array();
     foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $c                                  = urldecode($requestData['c']);
    $tab                                = $requestData['type'];
    $val                                = $requestData['val'];
    $creative_durations                 = $requestData['creative_duration'];
    $_resp_type                         = urldecode($requestData['resp_type']);
    $spanish = $requestData['spanish']  = urldecode($requestData['spanish']);
    $network_code                       = (isset($requestData['network_code']) && !empty($requestData['network_code'])) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $sd = $requestData['sd'] ;           
    $ed = $requestData['ed'];
    $cols =  ' ';   
    if($c > 5){
        $active_col = 'long_active';
    }else{
        $active_col = 'short_active';
    }
    if($requestData['form_type'] == 'short_form') {
        $cat_drop = "advshort_cat_col_dropdown_";
    } else {
        $cat_drop = "advlong_cat_col_dropdown_";
    }
    $cols = $cols.' b.'.$active_col .' as is_active_brand, adv.'.$active_col .' as is_active_adv';
    $cols .= ',b.main_sub_category_id, b.alt_sub_category_id';
    $requestData['cols']                 = $cols;

    $brand_classification = getBrandClassification($c,$creative_durations);
    $requestData['brand_classification'] = $brand_classification['brand_classification'];

    $columns = array(
            'rank' =>  'rank', 
            'search' =>  'search', 
            'brand_name' => 'brand_name',
            'category_name'=>'category',
            'creative_count'=>'creative_count',
            'advertiser_name' => 'display_name',
            'creatives_count' => 'creatives_count',
            'airings' => 'airings',
            'spend_index' => 'spend_index',
            'hidden_spend_index' => 'spend_index',
            'national' => 'national',
            'local' => 'DPI',
            'asd' => 'asd',
            'weeks' => 'weeks',
            'networks' => 'networks',
            'hidden_category'=>'category',
            'hidden_creatives'=>'creative_count',
            'hidden_airings' => 'airings',
            'brand_name_search' => 'brand_name_search',
            'tracking' => 'tracking'
        );

    $_order_by = $columns[$sidx] ." ".$sord;
    $order_by = " ORDER BY ".$_order_by;
    $requestData['order_by'] = $order_by;
    
    $result     = get_query_result('__query_summary_advpage_brands', $requestData, 'FETCH_OBJ');
    $totalData  = count($result);
    $count      = $totalData;
        
        
    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }
    if ($page > $total_pages) {
      $page = $total_pages;
    }
    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;
    if ($offset < 0) {
      $offset = 0;
    }

    /*
    $_order_by = $columns[$sidx] ." ".$sord;
    $order_by = " ORDER BY ".$_order_by;
    $requestData['order_by'] = $order_by;
    $result     = get_query_result('__query_summary_advpage_brands', $requestData, 'FETCH_OBJ');  
    */
    $result = reorderResultForRanking ($result);

    $data = array();
    if($result){
      foreach($result as $k => $v){
        $v->category = get_category_names_by_ids($v->main_sub_category_id, $v->alt_sub_category_id);
        if($v->asd != ''){
            $v->asd = $v->asd.' sec';
        }

        if($c >= 6){
           $v->national = 'NA';
           $v->local = 'NA';
           $v->asd = 'NA';
        }
      }
    }
    $exp_data = array();
    $rank = $spend_index = 0;

    foreach($result as $resultK => $resultV){
        if($rank==0) { $spend_index = $resultV->spend_index; $_SESSION['max_spend_adv'] = $resultV->spend_index; }
            $spendIndexCalculate['projected_score'] = $resultV->spend_index;
            $spendIndexCalculate['classification']  = $c;
            $spendIndexCalculate['sum']             = $_SESSION['max_spend_adv'] ;
            $resultV->spend_index                   = findSpendIndex($spendIndexCalculate);
            $resultV->hidden_spend_index            = findSpendIndex($spendIndexCalculate , 0);
        ++$rank;

        if(isset($requestData['othr_grid_for']) && ($requestData['othr_grid_for'] == 'brand') && ($requestData['call_id'] == $resultV->ID)){ continue; }

        if(isset($requestData['call_from']) && ($requestData['call_from'] == 'brand') && ($requestData['call_id'] != $resultV->ID)){ continue; }

        $nestedData = $export           = array();
        $active_class                   = ($resultV->is_active_brand == 1) ? 'active_btn' : 'inactive_btn';
        $url_brand                      = "/drmetrix/brandDetail/".$resultV->ID."/brand/browse//";
        $url_adv                        = "/drmetrix/advDetail/".$resultV->adv_id."/adv/browse/";
        $nestedData['brand_name_search']= $resultV->brand_name;

        $nestedData['id']               = $resultV->ID;

        $nestedData['rank']             = $rank;
        $export['current_week']         = $nestedData['rank'];
        // Make brand name clickable in adv_page
        //$nestedData['brand_name'] = '<i class="fa fa-circle" id="'.$active_class.'"></i><span><a href="#" onclick="view_adv_tab(\''.addslashes($resultV->advertiser_name).'\','.$resultV->adv_id.','.$c.',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\'brand\','.$resultV->ID.')" >'.$resultV->brand_name.'</a></span>';

        $nestedData['status']           = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
        $nestedData['brand_name']       = '<span>'.$resultV->brand_name.'</span>';
        $export['brand_name']           = $resultV->brand_name;
        $nestedData['creative_count']   = $resultV->creative_count ? '<a href="#"><span id="brand_plus_'.$resultV->ID.'" style="display:inline;padding-right: 0.5em;"><span class="icon-border icon-border-plus"></span></span></a><a href="#"><span style="display:none;padding-right: 0.5em;" id="brand_minus_'.$resultV->ID.'"><span class="icon-border icon-border-minus"></span></span></a>'.$resultV->creative_count : 0;
        $export['creative_count']       = $resultV->creative_count ?  $resultV->creative_count : 0;
        $nestedData['is_active_brand']  = $resultV->is_active_brand ;
        $export['is_active_brand']      = $resultV->is_active_brand ;
        $string                         = $resultV->category;
        if(strlen($resultV->category) > STRING_LENGTH){
            $string = substr($resultV->category, 0, 23).'...';
        }
        $nestedData['category_name']    = isset($resultV->category) ? '<span class="tooltip-hover" onclick="fetchList('.$resultV->ID.',\''.$tab.'\',\''.addslashes($resultV->category).'\');"><i class="fa fa-caret-down float-right"></i>'. $resultV->category.'</span><div class="cat_col_dropdown select_cat_dropdown" id="'.$cat_drop.$resultV->ID.'" style="display:none;"></div>' :  '-' ;
        $export['category']             = isset($resultV->category) ? $resultV->category : '-';
        $nestedData['first_aired']      = $resultV->first_aired ? $resultV->first_aired : '-' ;
        $export['first_aired']          = $resultV->first_aired ? $resultV->first_aired : '-' ;
        $nestedData['last_aired']       = $resultV->last_aired ? $resultV->last_aired : '-' ;
        $export['last_aired']           = $resultV->last_aired ? $resultV->last_aired : '-' ;
        $nestedData['price']            = $resultV->price ? $resultV->price : '-' ;
        $export['price']                = $resultV->price ? $resultV->price : '-' ;
        $nestedData['advertiser_name']  = !empty($resultV->advertiser_name) ? '<span>'.$resultV->advertiser_name.'</span>' : '-' ;
        $export['advertiser_name']      = !empty($resultV->advertiser_name) ? $resultV->advertiser_name : '-' ;
        $nestedData['hidden_creatives'] = $resultV->creative_count;
        $nestedData['hidden_category']  = $resultV->category;
        $nestedData['hidden_airings']   = $resultV->airings;
        $nestedData['hidden_spend_index']   = $resultV->hidden_spend_index;
        
        
        $nestedData['airings']          = $resultV->airings ? '<a href="#" onclick="viewAiringGraph(\''.addslashes($resultV->brand_name).'\','.$resultV->ID.',\'dow\',\''.$network_code.'\',\'all_day\',\'all_hour\','.$resultV->networks.','.$resultV->airings.',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$_resp_type.'\',\''.$spanish.'\',\'brand\',\'\',\'\',\'\')" >'.number_format($resultV->airings).'</a>' : 0 ;
        $export['airings']              = $resultV->airings ? $resultV->airings : 0;
        if($_SESSION['max_spend_adv'] <= 0) {
            $max_spend = 1;
        } else {
            $max_spend = $_SESSION['max_spend_adv'];
        }

        
            $nestedData['spend_index']          = $resultV->spend_index ? '<a href="#" onclick="viewAiringSpendGraph(\''.addslashes($resultV->brand_name).'\','.$resultV->ID.',\'dow\',\''.$network_code.'\',\'all_day\',\'all_hour\','.$resultV->networks.',\''.$resultV->spend_index.'\',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$_resp_type.'\',\''.$spanish.'\',\'brand\',\'\',\'\',\'\')" >'.$resultV->spend_index.'</a>' : 0 ;
       
    //    
        $nestedData['national']         = $resultV->national ? $resultV->national : 0;
        $nestedData['local']            = $resultV->local  ? $resultV->local : 0;
        $nestedData['asd']              = $resultV->asd ? $resultV->asd : '0 sec' ;
        $nestedData['total_weeks']      = $resultV->total_weeks ? $resultV->total_weeks : 0 ;
        $export['spend_index']          = $resultV->spend_index ? $resultV->spend_index : 0 ;

        if($resultV->spanish_creative_count == $resultV->total_creative_count) {
            $nestedData['language']     = 'ES';
            $export['language']         = 'ES';
        } else {
            $nestedData['language']     = 'EN';
            $export['language']         = 'EN';
        }
        if($active_col === 'short_active'){
            $export['national']         = $resultV->national ? $resultV->national : 0;
            $export['local']            = $resultV->local  ? $resultV->local : 0;
            $export['asd']              = $resultV->asd ? $resultV->asd : '0 sec' ;
        }
        $export['total_weeks']          = $resultV->total_weeks ? $resultV->total_weeks : 0 ;
        $nestedData['networks']         = $resultV->networks ? $resultV->networks : '-' ;
        if(isTrackingPresent('brand', $resultV->ID)) {
            $nestedData['tracking']     = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->ID.',\''.addslashes($resultV->brand_name).'\');"><i custom-attr="brand_'.$resultV->ID.'" class="fa fa-eye blue-eye" title="Track"></i></a>';
        } else {
            $nestedData['tracking']     = '<a href="#" onclick="viewTrackingDialogue(\'brand\','.$resultV->ID.',\''.addslashes($resultV->brand_name).'\');"><i custom-attr="brand_'.$resultV->ID.'" class="fa fa-eye-slash grey-eye" title="Track"></i></a>';
        }
        $data[]                         = $nestedData;
        $exp_data[]                     = $export;
    }

    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count; 
    $_SESSION['advpage_export']['rows']     = $exp_data;
    echo json_encode($json_data); 
}

function getAdvertiserDetail() {
    $result                         = array();
    $request                        = Slim::getInstance()->request();
    $query_string                   = $request->post();

    extract($query_string);

    $params['sd']                   = isset($sd) ? $sd : LIFETIME_START_DATE;
    $params['ed']                   = isset($ed) ? $ed : customDate('Y-m-d');
    $params['advertiser_id']        = $advertiser_id;
    $params['length_condition']     = ' <= ' . LENGTH;
    $params['type']                 = 'short';
    $brand_creative_count_result    = get_query_result('__query_advertiser_lifetime_airing_detail', $params, 'FETCH_ASSOC');
    $spend_index_result             = get_query_result('__query_advertiser_detail_from_advertiser_pages', $params, 'FETCH_ASSOC');

    if (empty($brand_creative_count_result[0]) || empty($spend_index_result[0])) {
        $array['adv_id']        = $advertiser_id;
        $array['rank']          = 'N/A';
        $array['rate']          = 'N/A';
        $array['spend_index']   = 'N/A';
        $array['airings']       = 'N/A';
        $array['brands']        = 'N/A';
        $array['creative']      = 'N/A';
        $brand_creative_count_result[0] = $spend_index_result[0] = $array;
    }

    $result['short']                = array_merge($brand_creative_count_result[0], $spend_index_result[0]);
    $result['short']['rate']        = $result['short']['rate'] ? number_format( intVal($result['short']['rate']) , 0 ) : 0;

    $params['length_condition']     = ' > ' . LENGTH;
    $params['type']                 = 'long';
    $brand_creative_count_result    = get_query_result('__query_advertiser_lifetime_airing_detail', $params, 'FETCH_ASSOC');
    $spend_index_result             = get_query_result('__query_advertiser_detail_from_advertiser_pages', $params, 'FETCH_ASSOC');

    if (empty($brand_creative_count_result[0]) || empty($spend_index_result[0])) {
        $array['adv_id']        = $advertiser_id;
        $array['rank']          = 'N/A';
        $array['rate']          = 'N/A';
        $array['spend_index']   = 'N/A';
        $array['airings']       = 'N/A';
        $array['brands']        = 'N/A';
        $array['creative']      = 'N/A';
        $brand_creative_count_result[0] = $spend_index_result[0] = $array;
    }

    $result['long']                = array_merge($brand_creative_count_result[0], $spend_index_result[0]);
    $result['long']['rate']        = $result['long']['rate'] ? number_format( intVal($result['long']['rate']) , 0 ) : 0;
    $result['tracking']            = isTrackingPresent('advertiser', $advertiser_id);

    $adv_params['advertiser_id'] = $advertiser_id;//2063;
    $adv_zoho_data       = get_query_result('__query_adv_zoho_data', $adv_params, 'FETCH_ASSOC');
    if(!empty($adv_zoho_data)){
        $adv_zoho_data[0]['adv_details'] = unserialize($adv_zoho_data[0]['data']);
        $adv_params['zoho_adv_id'] = $adv_zoho_data[0]['zoho_id'];
        $adv_contacts_data   = get_query_result('__query_adv_contact_data', $adv_params, 'FETCH_ASSOC');
        foreach ($adv_contacts_data as $key => $value) {
            $adv_zoho_data[0]['adv_details']['contact'][] = unserialize($value['data']);
        }    
        if(isset($_SESSION['access_network_tab']) && $_SESSION['access_network_tab'] == 1){
            $adv_agency  = get_query_result('__query_adv_agency_data', $adv_params, 'FETCH_ASSOC');
            $i = 0;
            foreach ($adv_agency as $key => $value) {
                $agency_params['zoho_agency_id'] = $value['zoho_agency_id'];
                $agency_data       = get_query_result('__query_agency_data', $agency_params, 'FETCH_ASSOC');
                if(!empty($agency_data)){
                    $adv_zoho_data[0]['agency_details']['agency'][$i] = unserialize($agency_data[0]['data']);
                    if($adv_params['zoho_adv_id'] == $agency_params['zoho_agency_id']) {
                        $adv_zoho_data[0]['agency_details']['agency'][$i]['advertiser']['account_name'] = 'In-House Agency';
                    }
                    $agency_params['zoho_adv_id'] = $value['zoho_agency_id'];
                    $agency_contacts_data   = get_query_result('__query_adv_contact_data', $agency_params, 'FETCH_ASSOC');
                    foreach ($agency_contacts_data as $Akey => $Avalue) {
                        $adv_zoho_data[0]['agency_details']['agency'][$i]['contact'][] = unserialize($Avalue['data']);
                    } 
                    $i++;
                }
            }
        }else{
            $adv_zoho_data[0]['agency_details'] = array();
        }

        unset($adv_zoho_data[0]['data']);
        unset($adv_zoho_data[0]['zoho_id']);
        if(empty($adv_zoho_data[0]['agency_details']))
            $adv_zoho_data[0]['agency_details'] = '';

        $result['adv_zoho_data'] = $adv_zoho_data[0];
    }

    echo json_encode($result);
}

function advpageCreatives($request_data = null){
    $data           = array();
    $nestedData     = array();
    $requestData    = $raw_data = array();
    $data           = array();
    $nestedData     = array();
    $max_spend      = 0 ;
    $db = getConnection();

    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $c                                  = urldecode($requestData['c']);
    $tab                                = $requestData['type'];
    $val                                = $requestData['val'];
    $creative_id                        = $requestData['call_id'];
    $creative_durations                 = $requestData['creative_duration'];
    $_resp_type                         = urldecode($requestData['resp_type']);
    $responseType                       = "(".$_resp_type.")";
    $spanish = $requestData['spanish']  = urldecode($requestData['spanish']);
    $network_code                       = (isset($requestData['network_code']) && !empty($requestData['network_code'])) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $sd                                 = isset($requestData['sd']) ? $requestData['sd'] : LIFETIME_START_DATE;
    $ed                                 = isset($requestData['ed']) ? $requestData['ed'] : customDate('Y-m-d');

    $cols =  ' ';
    if($c > 5){
        $active_col = 'long_active';
    }else{
        $active_col = 'short_active';
    }
    $cols = $cols.' b.'.$active_col .' as is_active_brand, adv.'.$active_col .' as is_active_adv';
    $cols .= ',ca.category';
    $requestData['cols']                 = $cols;

    $brand_classification = getBrandClassification($c,$creative_durations);
    $requestData['brand_classification'] = $brand_classification['brand_classification'];

     $columns   = array(
        'creative_name'     => 'c.creative_name',
        'duration'          => 's.length',
        'price'             => 'c.price',
        'airings'           => 'airings',
        'hidden_airings'    => 'airings',
        'first_detection'   => 'c.first_detection',
        'last_aired'        => 'c.last_aired',
    );
    $_order_by             = $columns['hidden_airings'] ." desc";

    $params_brand_creatives['creative_id']          = $creative_id;
    $params_brand_creatives['spanish']              = $spanish;
    $params_brand_creatives['network_code']         = $network_code;
    $params_brand_creatives['responseType']         = $responseType;
    $params_brand_creatives['sd']                   = $sd;
    $params_brand_creatives['ed']                   = $ed;
    $params_brand_creatives['brand_classification'] = $brand_classification['brand_classification'];
    $params_brand_creatives['cols']                 = $cols;
    //$params_brand_creatives['brand_id']             = $brand_id;
    $params_brand_creatives['order_by']             = $_order_by;

    $result = get_query_result('__queries_display_advpage_creatives', $params_brand_creatives, 'FETCH_OBJ');

    $totalData = count($result);
    $count = $totalData;

    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }

    if ($page > $total_pages) {
      $page = $total_pages;
    }

    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;

    if ($offset < 0) {
      $offset = 0;
    }

    $network_code_grid = 0;
    $result = reorderResultForRanking ($result);
    foreach($result as $resultK => $resultV){
        if($max_spend == 0) { $max_spend = $resultV->spend;  }
        $ResTypeImg = '<span class="response_img">';
            if($resultV->response_url == 1){
            $ResTypeImg .= '<a href="#" title="URL"><img src="/drmetrix/assets/img/url-icon.svg" alt="URL" /></a>';
        }
            if($resultV->response_sms == 1){
            $ResTypeImg .= '<a href="#" title="SMS"><img src="/drmetrix/assets/img/sms-icon.svg" alt="SMS" /></a>';
        }
            if($resultV->response_tfn == 1){
            $ResTypeImg .= '<a href="#" title="Telephone"><img src="/drmetrix/assets/img/telephone-icon.svg" alt="Telephone" /></a>';
        }
            if($resultV->response_mar == 1){
            $ResTypeImg .= '<a href="#" title="Mobile"><img src="/drmetrix/assets/img/mobile-icon.svg" alt="Mobile" /></a>';
        }
        $ResTypeImg .= '</span>';

        $active_class = ($resultV->is_active == 1) ? 'active_btn' : 'inactive_btn';

        $u = $resultV->length <= LENGTH ? 'short' : 'long';

        if($resultV->length <= LENGTH ){
            $u = 'short';
            $national = $resultV->national;
            $local = $resultV->local;
            $airings = $resultV->airings;
            $duration = $resultV->length.' sec';
        }else{
            $u = 'long';
            $national = 'NA';
            $local = 'NA';
            $airings = $resultV->airings;
            $duration = ($resultV->length/60).' m';
        }
        $spendIndexCalculate['classification'] = $c;
        $spendIndexCalculate['projected_score'] = $resultV->spend;
        $spendIndexCalculate['sum']             = $max_spend;
        $nestedData['spend']                    =$spend =  findSpendIndex($spendIndexCalculate);
     //   $opt_array['spend_index_excel']         = findSpendIndex($spendIndexCalculate, 0);

    //    $spend = number_format($resultV->spend, 0);
        $price = getCreativePrice($resultV->price, $resultV->payments);
        $url_creative = "/drmetrix/creativeDetail/".$resultV->creative_id."/".$u."/browse/";
        $creative_type = $resultV->type  ;
        $creative_cls =   $creative_type  ?   $creative_type . ' - ' . $resultV->class  :   $resultV->class ;
        $nestedData['id'] = $resultV->creative_id;
        $nestedData['classification'] = $creative_cls ? $creative_cls : '-' ;
        $nestedData['duration'] = $duration ? $duration: '-' ;
        $nestedData['price'] = $price;
        $nestedData['national'] = $national;
        $nestedData['local'] = $local ;
        $nestedData['response_type'] = $ResTypeImg ;
        $nestedData['brand_name'] =  $resultV->brand_name;

        $nestedData['spend'] = '<a href="#" onclick="viewAiringSpendGraph(\''.addslashes($resultV->creative_name).'\','.$resultV->creative_id.',\'dow\',\''.$network_code.'\',\'all_day\',\'all_hour\',0,\''.$spend.'\',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$_resp_type.'\',\''.$spanish.'\',\'creative\',\''.addslashes($resultV->display_name).'\',\''.addslashes($resultV->brand_name).'\','.$resultV->brand_id.')" >'.$spend.'</a>' ;  
  
        $nestedData['first_detection'] = $resultV->first_aired_date ? $resultV->first_aired_date : '-' ;
        $nestedData['last_aired'] = $resultV->last_aired_date ? $resultV->last_aired_date : '-' ;

        if($resultV->spanish_creative_count == $resultV->total_creative_count) {
            $nestedData['language'] = 'ES';
        } else {
            $nestedData['language'] = 'EN';
        }

        //$nestedData['creative_name'] = '<i class="fa fa-circle" id="'.$active_class.'"></i><span><a href="#" onclick="view_adv_tab(\''.addslashes($resultV->display_name).'\','.$resultV->adv_id.','.$c.',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\'creatives\','.$resultV->creative_id.',\''.addslashes($resultV->creative_name).'\')" >'.$resultV->creative_name.'</a></span>';
        $nestedData['status']        = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
        $nestedData['creative_name'] = $resultV->creative_name;
        $creative_name = "'".addslashes(htmlspecialchars($resultV->creative_name)).' - '.$nestedData['duration']."'";
        $brand_name = "'".addslashes($resultV->brand_name)."'";
        $adv_name = "'".addslashes($resultV->display_name)."'";
        $nestedData['airings'] = $airings  ? '<a href="#" onclick="viewAiringGraph('.$creative_name.','.$resultV->creative_id.',\'dow\',\''.$network_code.'\',\'all_day\',\'all_hour\',0,'.$resultV->airings.',\''.$c.'\',\''.$tab.'\',\''.$val.'\',\''.$sd.'\',\''.$ed.'\',\''.$_resp_type.'\',\''.$spanish.'\',\'creative\','.$adv_name.','.$brand_name.','.$resultV->brand_id.')" >'.number_format($airings).'</a>'  : '-' ;  
        if(!$resultV->thumbnail){
           $nestedData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
        }else{
           $nestedData['video'] = '<a href="#basicModalCamp"><i class="fa fa-play-circle-o fa-2x" onclick="playvideo('.$resultV->thumbnail.',\''.$sd.'\',\''.$ed.'\',\''.$network_code_grid.'\',\'none\')"></i></a>';
        }
      $nestedData['hidden_airings'] = $resultV->airings;
      $data[] = $nestedData;
    }

    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count;

    echo json_encode($json_data);
}

//get Adv/brand/creatives for global search input
function getBrandAdvCreativeSearchList(){

    $requestData                        = array();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $raw_data                           = array();
    foreach($set_one as $k => $v) {
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }

    $params['srch_txt']     =   addslashes(trim(urldecode($requestData['srch_text'])));
    $advertisers            =   '';
    $brands                 =   '';
    $creatives              =   '';
    $c                      =   1;
    $sd                     = LIFETIME_START_DATE;
    $ed                     = customDate('Y-m-d');

    $adv_result = get_query_result('__query_get_adv_for_global_srch', $params, 'FETCH_OBJ');
    $adv_count = count($adv_result);
    $adv_view_all = '';
    if(count($adv_result) > 0) {
        $count = 0;
        foreach ($adv_result as $key => $value) {
            $count += 1;
            if($count > 5){
                break;
            }
            if(($value->short_form > 0 && $value->long_form > 0) || ($value->short_form > 0 && $value->long_form == 0)) {
                $c = 1;
            } else if($value->short_form == 0 && $value->long_form > 0){
                $c = 6;
            } else {
                $c = 1;
            }
            if(!$requestData['tracking']){
                $advertisers  .= '<li><span><a onclick="view_adv_tab(\''.addslashes($value->display_name).'\','.$value->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'adv\',\'\',\'\',\'ranking\','.$value->need_help.')" >'.$value->display_name.'</a></span></li>';
            }else{
                $adv_url  = "/drmetrix/ranking?data=".base64_encode("adv_name=".$value->display_name."&adv_id=".$value->adv_id."&need_help=".$value->need_help."&call_from=adv&c=".$c."&call_id=&call_name=");
                $advertisers  .= '<li><span><a href="'.$adv_url.'">'.$value->display_name.'</a></span></li>';  
            }

        }
        if(!$requestData['tracking']){
            $adv_view_all = '<a class="view-all-link" onclick="viewAllGlobalSearch(\'adv\');">View All</a>';
        }else{
            $adv_href = "/drmetrix/ranking?data=".base64_encode("view_all=adv&search=".urlencode(stripslashes($params['srch_txt']))."&1=1");
            $adv_view_all = '<a href="'.$adv_href.'" class="view-all-link" >View All</a>';
        }
    } else {
        $advertisers = 'NA';
    }

    $br_result  = get_query_result('__query_get_brand_for_global_srch', $params, 'FETCH_OBJ');
    $brand_count = count($br_result);
    $brand_view_all = '';
    if(count($br_result) > 0) {
        $count = 0;
        foreach ($br_result as $key => $value) {
            $count += 1;
            if($count > 5){
                break;
            }
            if(($value->short_form > 0 && $value->long_form > 0) || ($value->short_form > 0 && $value->long_form == 0)) {
                $c = 1;
            } else if($value->short_form == 0 && $value->long_form > 0){
                $c = 6;
            } else {
                $c = 1;
            }
            if(!$requestData['tracking']){
                $brands     .= '<li><span><a onclick="view_adv_tab(\''.addslashes($value->adv_name).'\','.$value->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'brand\','.$value->brand_id.',\''.addslashes($value->brand_name).'\',\'ranking\','.$value->need_help.')" >'.$value->brand_name.'</a></span></li>';
            }else{
                $brand_url  = "/drmetrix/ranking?data=".base64_encode("adv_name=".$value->adv_name."&adv_id=".$value->adv_id."&need_help=".$value->need_help."&call_from=brand&c=".$c."&call_id=".$value->brand_id."&call_name=".$value->brand_name);
                $brands  .= '<li><span><a href="'.$brand_url.'">'.$value->brand_name.'</a></span></li>';  
            }
        }
        if(!$requestData['tracking']){
            $brand_view_all = '<a class="view-all-link" onclick="viewAllGlobalSearch(\'brands\');">View All</a>';
        }else{
            $brand_href = "/drmetrix/ranking?data=".base64_encode("view_all=brands&search=".urlencode(stripslashes($params['srch_txt'])));
            $brand_view_all = '<a href="'.$brand_href.'" class="view-all-link" >View All</a>';
        }
    } else {
        $brands = 'NA';
    }

    $cr_result  = get_query_result('__query_get_creative_for_global_srch', $params, 'FETCH_OBJ');

    $creative_count = count($cr_result);
    $creative_view_all ='';
    if(count($cr_result) > 0) {
        $count = 0;
        foreach ($cr_result as $key => $value) {
            $count += 1;
            if($count > 5){
                break;
            }
            if(($value->short_form > 0 && $value->long_form > 0) || ($value->short_form > 0 && $value->long_form == 0)) {
                $c = 1;
            } else if($value->short_form == 0 && $value->long_form > 0){
                $c = 6;
            } else {
                $c = 1;
            }
            if(!$requestData['tracking']){
                $creatives  .= '<li><span><a onclick="view_adv_tab(\''.addslashes($value->adv_name).'\','.$value->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'creatives\','.$value->creative_id.',\''.addslashes(htmlspecialchars($value->creative_name)).'\',\'ranking\','.$value->need_help.')" >'.$value->creative_name.' - '.$value->duration. ' sec</a></span></li>';
            }else{
                $creative_url  = "/drmetrix/ranking?data=".base64_encode("adv_name=".$value->adv_name."&adv_id=".$value->adv_id."&need_help=".$value->need_help."&call_from=creatives&c=".$c."&call_id=".$value->creative_id."&call_name=".$value->creative_name);
                $creatives  .= '<li><span><a href="'.$creative_url.'">'.$value->creative_name.' - '.$value->duration. ' sec</a></span></li>';  
            }
        }
        if(!$requestData['tracking']){
            $creative_view_all = '<a class="view-all-link" onclick="viewAllGlobalSearch(\'creatives\');">View All</a>';
        }else{
            $creative_href = "/drmetrix/ranking?data=".base64_encode("view_all=creatives&search=".urlencode(stripslashes($params['srch_txt'])));
            $creative_view_all = '<a href="'.$creative_href.'" class="view-all-link" >View All</a>';
        }
    } else {
        $creatives = 'NA';
    }

    $json_data                      = array();
    $json_data['creatives']         = $creatives;
    $json_data['brands']            = $brands;
    $json_data['advertisers']       = $advertisers;
    $json_data['adv_count']         = $adv_count;
    $json_data['brand_count']       = $brand_count;
    $json_data['creative_count']    = $creative_count;
    $json_data['creative_view_all'] = $creative_view_all;
    $json_data['brand_view_all']    = $brand_view_all;
    $json_data['adv_view_all']      = $adv_view_all;

    echo json_encode($json_data);
}

function getGlobalSearchData(){
    $requestData                        = array();
    $nestedData                         = array();
    $data                               = array();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    parse_str($query_string, $output);
    $requestData = (array)json_decode($query_string, TRUE);

    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $c                                  = urldecode($requestData['c_dir']);
    $srch_txt= $requestData['srch_txt'] = urldecode(addslashes(trim(urldecode($requestData['srch_txt']))));
    $creative_durations                 = $requestData['creative_duration'];
    $_resp_type                         = urldecode($requestData['resp_type']);
    $responseType                       = "(".$_resp_type.")";
    $spanish = $requestData['spanish']  = urldecode($requestData['spanish']);
    $network_code                       = (isset($requestData['network_code']) && !empty($requestData['network_code'])) ? trim(addslashes(urldecode($requestData['network_code']))) : '';
    $sd = $requestData['sd']            = LIFETIME_START_DATE;
    $ed = $requestData['ed']            = customDate('Y-m-d');

    $cols =  ' ';
    if($c > 5){
        $active_col = 'long_active';
    }else{
        $active_col = 'short_active';
    }

    if($requestData['grid_type'] == 'adv') {
        $cols = $cols.' adv.'.$active_col .' as is_active_adv';
    } else if($requestData['grid_type'] == 'brands') {
        $cols = $cols.' b.'.$active_col .' as is_active_brand';
    } else if($requestData['grid_type'] == 'creatives'){
        $cols = $cols.' c.is_active as is_active_creative';
    }

    $requestData['cols']    = $cols;

    $brand_classification = getBrandClassification($c,$creative_durations);
    $requestData['brand_classification'] = $brand_classification['brand_classification'];

    if($requestData['grid_type'] == 'adv'){
        $result  = get_query_result('__query_adv_lifetime_global_search_detail', $requestData, 'FETCH_OBJ');
    }
    if($requestData['grid_type'] == 'brands'){
        $result  = get_query_result('__query_brand_lifetime_global_search_detail', $requestData, 'FETCH_OBJ');
    }
    if($requestData['grid_type'] == 'creatives'){
        $result  = get_query_result('__query_creative_lifetime_global_search_detail', $requestData, 'FETCH_OBJ');
    }

    $totalData = count($result);
    $count = $totalData;

    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }

    if ($page > $total_pages) {
      $page = $total_pages;
    }

    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;

    if ($offset < 0) {
      $offset = 0;
    }

    $rank = $spend_index = 0;
    $network_code_grid = 0;

    foreach ($result as $resultK => $resultV) {

        if($requestData['grid_type'] == 'adv'){
            if($rank==0) { $spend_index = $resultV->spend_index; $_SESSION['max_spend'] = $resultV->spend_index; }
            ++$rank;

            $nestedData['id']           = $resultV->adv_id;
            //$nestedData['rank']         = $rank;
            $active_class               = ($resultV->is_active_adv == 1) ? 'active_btn' : 'inactive_btn';
            $nestedData['is_active_adv'] = $resultV->is_active_adv;
            $nestedData['status']       = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
            $nestedData['adv_name']     = '<span><a href="#" style="color: rgb(0, 190, 255);" onclick="view_adv_tab(\''.addslashes($resultV->adv_name).'\','.$resultV->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'adv\',\'\',\'\',\'global_search\','.$resultV->need_help.')" >'.$resultV->adv_name.'</a></span>';
            $nestedData['adv_name_search'] = $resultV->adv_name;
            $nestedData['no_of_brands'] =   $resultV->brands;
            $nestedData['creatives']    =   $resultV->creative;
            //$nestedData['spend_index']  =   round($resultV->spend_index / $_SESSION['max_spend'] * 100, 2);
            $nestedData['advertiser_name_hidden']   = $resultV->adv_name;
            $nestedData['for_space']   = '';
        }

        if($requestData['grid_type'] == 'brands'){
            $nestedData['id']           = $resultV->brand_id;
            $nestedData['airings']      = number_format($resultV->airings_count);
            $nestedData['spend_index']  = number_format($resultV->spend_index);
            //$nestedData['rank']         = $rank;
            $active_class               = ($resultV->is_active_brand == 1) ? 'active_btn' : 'inactive_btn';
            $nestedData['is_active_brand'] = $resultV->is_active_brand;
            $nestedData['status']       = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
            $nestedData['brand_name']   = '<span><a href="#" style="color: rgb(0, 190, 255);" onclick="view_adv_tab(\''.addslashes($resultV->adv_name).'\','.$resultV->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'brand\','.$resultV->brand_id.',\''.addslashes($resultV->brand_name).'\',\'global_search\','.$resultV->need_help.')" >'.$resultV->brand_name.'</a></span>';
            $nestedData['brand_name_search'] = $resultV->brand_name;

            $resultV->category              = get_category_names_by_ids($resultV->main_sub_category_id, $resultV->alt_sub_category_id);
            $nestedData['category_name']    = isset($resultV->category) ? '<span class="tooltip-hover" onclick="fetchList('.$resultV->brand_id.',1,\''.addslashes($resultV->category).'\');"><i class="fa fa-caret-down float-right"></i>'. $resultV->category.'</span><div class="cat_col_dropdown select_cat_dropdown" id="cat_col_dropdown_'.$resultV->brand_id.'" style="display:none;"></div>' :  '-' ;//$resultV->category;

            $nestedData['advertiser_name']  = '<span><a href="#" style="color: rgb(0, 190, 255);" onclick="view_adv_tab(\''.addslashes($resultV->adv_name).'\','.$resultV->adv_id.',\''.$c.'\',\'\',\'\',\''.$sd.'\',\''.$ed.'\',\'adv\',\'\',\'\',\'global_search\','.$resultV->need_help.')" >'.$resultV->adv_name.'</a></span>';
            $nestedData['airings_hidden']   = $resultV->airings_count;
            $nestedData['brand_name_hidden']= $resultV->brand_name;
            $nestedData['hidden_category']  = $resultV->category;
            $nestedData['advertiser_name_hidden'] = $resultV->adv_name;
            $nestedData['for_space']   = '';
        }

        if($requestData['grid_type'] == 'creatives'){
            $ResTypeImg = '<span class="response_img">';
            if($resultV->response_url == 1){
                $ResTypeImg .= '<a href="#" title="URL"><img src="/drmetrix_angular_clean/assets/images/url-icon.svg" alt="URL" /></a>';
                $nestedData['response_url'] = $resultV->response_url;
            }
            if($resultV->response_sms == 1){
                $ResTypeImg .= '<a href="#" title="SMS"><img src="/drmetrix_angular_clean/assets/images/sms-icon.svg" alt="SMS" /></a>';
                $nestedData['response_sms'] = $resultV->response_sms;
            }
            if($resultV->response_tfn == 1){
                $ResTypeImg .= '<a href="#" title="Telephone"><img src="/drmetrix_angular_clean/assets/images/telephone-icon.svg" alt="Telephone" /></a>';
                $nestedData['response_tfn'] = $resultV->response_tfn;
            }
            if($resultV->response_mar == 1){
                $ResTypeImg .= '<a href="#" title="Mobile"><img src="/drmetrix_angular_clean/assets/images/mobile-icon.svg" alt="Mobile" /></a>';
                $nestedData['response_mar'] = $resultV->response_mar;
            }
            $ResTypeImg .= '</span>';

            $nestedData['id']               = $resultV->creative_id;
            $nestedData['brand_id'] = $resultV->brand_id;
            $nestedData['adv_id'] = $resultV->adv_id;
            $nestedData['airings']          = number_format($resultV->airings_count);
            $nestedData['spend_index']      = number_format($resultV->spend_index);
            $active_class                   = ($resultV->is_active_creative == 1) ? 'active_btn' : 'inactive_btn';
            $nestedData['is_active_creative'] = $resultV->is_active_creative;
            $nestedData['status']           = '<i class="fa fa-circle" id="'.$active_class.'"></i>';
            $nestedData['creative_name']    = addslashes(htmlspecialchars($resultV->creative_name));
            $nestedData['creative_name_search'] = $resultV->creative_name;
            $nestedData['duration'] = $resultV->length.' sec';
            $nestedData['brand_name']       = $resultV->brand_name;
            $nestedData['airings_hidden']   = number_format($resultV->airings_count, 0, '', '');

            $nestedData['adv_name']         =$resultV->adv_name;
            $nestedData['advertiser_name_hidden'] = $resultV->adv_name;
            $nestedData['hidden_creatives'] = $resultV->creative_name;            $nestedData['brand_name_hidden']= $resultV->brand_name;
            $nestedData['response_type']    = $ResTypeImg;
            $nestedData['thumbnail'] = $resultV->thumbnail;
            $nestedData['network_code_grid'] = $network_code_grid;
            if(!$resultV->thumbnail){
                $nestedData['video'] = '';
            }else{
                $nestedData['video'] = '';
            }
        }
        $nestedData['need_help'] = $resultV->need_help;

        $data[]                     =   $nestedData;
    }

    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count;

    echo json_encode($json_data);
}

function sendGlobalSearchFeedback(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $search_text    = urldecode($requestData['search_text']);
    $feedback_text  = urldecode($requestData['feedback_text']);

    $name   = 'Joseph';
    $sub    = 'DRMetrix - User feedback';
    $to     = FEEDBACK_EMAIL;

    $subject    =   $sub;
    $message    =   $name.',<br/><br/>';
    $message   .=   'Following are the details:<br>
                    User Email:         "'.$_SESSION['username'].'"<br>
                    Global Search Text: <b>"'.$search_text.'"</b><br>
                    Feedback:           <b>"'.$feedback_text.'"</b>
                    <br><br><br>
                    Thanks,<br>
                    DRMetrix';

    $headers = 'From: info@drmetrix.com' . "\r\n" .
                'MIME-Version: 1.0' . "\r\n" .
                'Content-type: text/html; charset=iso-8859-1' . "\r\n";
    require 'PHPMailer/class.phpmailer.php';
    try {
            $mail = new PHPMailer(); //New instance, with exceptions enabled
            $mail->IsSendmail();  // tell the class to use Sendmail
            $body = $message;
            $to   = $to;
            $mail->SetFrom('info@drmetrix.com', 'DRMetrix');
            $mail->AddAddress($to);
            $mail->Subject  = $subject;
            $mail->AltBody  = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
            $mail->WordWrap = 80; // set word wrap
            $mail->MsgHTML($body);
            $mail->IsHTML(true); // send as HTML
            $mail->Send();
            echo json_encode(array('status'=>1));
    } catch (phpmailerException $e) {
            echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }
}

function getTrackingDetail(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $requestData =(array)json_decode($query_string, TRUE);
    $params['alert_type']   =   $alert_type = $requestData['alert_type'];
    $params['name']         =   $name       = urldecode($requestData['name']);
    $type_id = $requestData['type_id'];
    $params['type_id']      =   $type_id;
    $params['user_id']      =   $user_id    = $_SESSION['user_id'];

    $result  = get_query_result('__query_get_tracking_details', $params, 'FETCH_OBJ');
    $json_data = array();
    $data = array();

    if(count($result) > 0) {
        foreach ($result as $resultK => $resultV) {
            $data['alert_type']         = $resultV->alert_type;
            $data['type_id']            = $resultV->type_id;
            $data['track_elements']     = $resultV->track_elements;
            $data['frequency']          = $resultV->frequency;
            $data['status']             = $resultV->status;
            if(empty($resultV->classification)){
                $classification         = '';
            } else {
                $classification         = explode(',', $resultV->classification);
            }
            $data['classification']     = $classification;
        }

        $json_data['data']      = $data;
        $json_data['status']    = 1;
    } else {
        $json_data['data']      = '';
        $json_data['status']    = 0;
    }

    echo json_encode($json_data);
}

//--Get Alerts detail from DB
function getAlertsList(){
    $requestData                        = array();
    $nestedData                         = array();
    $data                               = array();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $raw_data                           = array();
    $requestData = (array)json_decode($query_string, TRUE);
    $user_id = $requestData['user_id']  = $_SESSION['user_id'];
    
    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    if(isset($requestData['network'])) {
        $requestData['network']         = trim(urldecode($requestData['network']));
    }
    if(isset($requestData['brand'])) {
        $requestData['brand']           = trim(urldecode($requestData['brand']));
    }
    if(isset($requestData['category'])) {
        $requestData['category']        = trim(urldecode($requestData['category']));
    }
    if(isset($requestData['advertiser'])) {
        $requestData['advertiser']      = trim(urldecode($requestData['advertiser']));
    }
    if(isset($requestData['type_id'])) {
        $requestData['type_id']      = trim(urldecode($requestData['type_id']));
    }

    $result  = get_query_result('__query_get_user_alerts', $requestData, 'FETCH_OBJ');

    $totalData = count($result);
    $count = $totalData;

    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }

    if ($page > $total_pages) {
      $page = $total_pages;
    }

    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;

    if ($offset < 0) {
        $offset = 0;
    }

    foreach ($result as $resultK => $resultV) {
        $nestedData['id']               =   $resultV->id;
        $nestedData['alert_type']       =   ucfirst($resultV->alert_type);
        switch ($resultV->alert_type) {
            case 'filter':
                $source = $resultV->classification;
                break;
            case 'brand':
                $source = get_brand_details($resultV->type_id);
                break;
            case 'advertiser':
                $source = get_advertiser_details($resultV->type_id);
                break;
            case 'network':
                $source = get_network_details($resultV->type_id, 'network_alias');
                break;
            case 'category':
                $source = get_category_details($resultV->type_id, 'sub_category_name', true);
                break;
        }
        
        if (empty($source)) {
            continue;
        }
        $nestedData['type_id'] = $resultV->type_id;
        $nestedData['source']           =   $source;
        $nestedData['email_schedulable_direct']     =   $resultV->email_schedulable_direct;
        $nestedData['classification']           = $resultV->classification;
        if(!empty($resultV->classification)) {
            $nestedData['classification-data']           = getClassificationData($resultV->classification);
            $nestedData['classification_hidden']    = getClassificationData($resultV->classification);
        } else {
            $nestedData['classification-data']           = '-';
            $nestedData['classification_hidden']    = '-';
        }
        $nestedData['frequency']        =   ucfirst($resultV->frequency);
        $nestedData['frequency_hidden'] =   ucfirst($resultV->frequency);
        $nestedData['status'] = $resultV->status;
        $nestedData['tracking_status']  =   $resultV->status == 'active'? '<a href="javascript:" onclick="$(\'#alert_type_val\').val(\''.$resultV->alert_type.'\');$(\'#type_id_val\').val('.$resultV->type_id.');$(\'#tracker_element_name\').html(\''.$source.'\');inactiveTracking($(\'[custom-attr=config_alert_filter_'.$resultV->type_id.']\').hasClass(\'grey-eye\')?\'active\':\'inactive\');"><i class="fa fa-eye blue-eye" custom-attr="config_alert_'.$resultV->alert_type.'_'.$resultV->type_id.'" title="Tracking Active"></i></a>' : '<a href="javascript:" onclick="$(\'#alert_type_val\').val(\''.$resultV->alert_type.'\');$(\'#type_id_val\').val('.$resultV->type_id.');$(\'#tracker_element_name\').html(\''.$source.'\');inactiveTracking($(\'[custom-attr=config_alert_'.$resultV->alert_type.'_'.$resultV->type_id.']\').hasClass(\'grey-eye\')?\'active\':\'inactive\');"><i class="fa grey-eye fa-eye-slash" custom-attr="config_alert_'.$resultV->alert_type.'_'.$resultV->type_id.'" title="Tracking Inactive"></i></a>';
        $nestedData['triggered_on']     =   $resultV->created_date;
        /*if($resultV->email_schedulable_direct) {
            $nestedData['operation']    =   '';
        } else {*/
        $showMonthlyOption = strpos(strtolower($resultV->criteria), strtolower('Current Quarter')) !== false
                             || strpos(strtolower($resultV->criteria), strtolower('Current Year - YTD')) !== false
                             || strpos(strtolower($resultV->criteria), strtolower('Lifetime')) !== false;
        $email_schedulable_direct = $resultV->email_schedulable_direct?$resultV->email_schedulable_direct:'';
        $nestedData['email_schedulable_direct'] = $email_schedulable_direct;
        $showMonthlyOption = $showMonthlyOption ? 1 : 0;
        $nestedData['showMonthlyOption'] = $showMonthlyOption;
        $nestedData['alert_type_filter'] = $resultV->alert_type=='filter'?$resultV->type_id:$resultV->id;
        $nestedData['operation']    =   '<a href="#" onclick="viewTrackingDialogue(\''.$resultV->alert_type.'\','.$resultV->type_id.',\''.addslashes($source).'\', \''.($email_schedulable_direct).'\', '.($showMonthlyOption ? 1 : 0).');"><i class="fa fa-pencil edit-icon" title="Edit"></i></a><a href="#" onclick="setDeleteTrackingBtn(\''.($resultV->alert_type=='filter'?$resultV->type_id:$resultV->id).'\', \''.$resultV->alert_type.'\');"><i class="fa fa-trash-o delete-icon" title="Delete"></i></a>';
        $nestedData['operation']    =   '';
        //}
        $data[]                     =   $nestedData;
    }

    //get subscribe status of user
    $subscribe_result       = get_query_result('__query_get_subscribe_status', $requestData, 'FETCH_OBJ');
    $subscribe_status       = $subscribe_result[0]->tracking_alert_subscribed;

    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count;
    $json_data['subscribe'] = $subscribe_status;

    echo json_encode($json_data);
}

function setTrackingDetail(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $requestData = (array)json_decode($query_string, TRUE);

    $params['alert_type']       =   $requestData['alert_type'];
    $params['name']             =   urldecode($requestData['name']);
    $params['brand_class']      =   rtrim(urldecode($requestData['brand_class']),',');

    if($requestData['type_id'] == ""){
        $type_id = getNetworkIdByAlias(addslashes($params['name']));
    } else {
        $type_id = $requestData['type_id'];
    }

    $params['type_id']          = $type_id;
    $params['frequency']        = $frequency = urldecode($requestData['frequency']);
    $params['status']           = $requestData['status'];
    $params['tracked_elements'] = rtrim(urldecode($requestData['tracked_elements']),',');
    $params['user_id']          = $_SESSION['user_id'];
    $params['created_date']     = customDate('Y-m-d H:i:s');
    $params['schedule_email']   = $schedule_email_val = $frequency && $frequency != 'none' ? 1 : 0;

    $result = get_query_result('__query_get_tracking_details', $params, 'FETCH_OBJ');

    if(count($result) > 0) {
        $status  = execute_query('__query_update_tracking_details', $params, 'FETCH_OBJ');
    } else {
        $status  = execute_query('__query_set_tracking_details', $params, 'FETCH_OBJ');
    }

    $tracking_id = 0;
    $result  = get_query_result('__query_get_tracking_details', $params, 'FETCH_OBJ');
    if(count($result) > 0) {
        foreach ($result as $resultK => $resultV) {
            $tracking_id = $resultV->type_id;
        }
    }
    if($tracking_id && $requestData['alert_type'] == 'filter') {
        // $params['user_id']          = $_SESSION['user_id'];

        if($schedule_email_val == 1) {
            $set_schedule_email_col = 'schedule_email = 1, frequency = "'.$frequency.'"';
            $params['status']       =   'active';
        } else {
            $set_schedule_email_col = 'schedule_email = 0, frequency = "none"';
            $params['status']       =   'inactive';
        }

        $db     = getConnection();
        $sql = 'UPDATE user_filters set '.$set_schedule_email_col.' where id = ' .$tracking_id;
        $stmt = $db->prepare($sql);
        $stmt->execute();

        // echo json_encode(array('status'=>1));
        $server = explode(':',$_SERVER['HTTP_HOST']);
        if($server[0] != "localhost" && $schedule_email_val == 1 && $_SESSION['tracking_alert_subscribed']) {
            require_once dirname(__FILE__) . '/PHPMailer/class.phpmailer.php';
            require_once dirname(__FILE__) . '/email-template/schedule_email_template.php';
            $user_name      = $_SESSION['full_name'];
            $user_id        = $_SESSION['user_id'];
            $user_email     = $_SESSION['username'];
            $report_filter  = 'filter';

            $params['selected_filter_id'] = $tracking_id;
            $result                 = get_query_result('__query_fetch_selected_filter_list', $params, 'FETCH_OBJ');
            $name_of_report_filter  = $result[0]->name;

            $email_content  = alert_email($user_name, $user_id, $frequency, $report_filter, $name_of_report_filter, $tracking_id);

            if ($email_content == '') {
                return false;
            }

            $subject    = 'Scheduling email alert ';
            $from_name  = FROM_NAME;
            $from_email = FROM_EMAIL;

            $to_name    = $user_name;
            $to_email   = $user_email;

            $body     = $email_content;
            $body     = wordwrap($body, 50);

            $mail     = new PHPMailer(); //New instance, with exceptions enabled
            $mail->IsSendmail();  // tell the class to use Sendmail
            $mail->SetFrom($from_email, $from_name);
            //$mail->addCustomHeader('MIME-Version: 1.0');
            //$mail->addCustomHeader('Content-Type: text/html; charset=ISO-8859-1');
            $mail->AddAddress($to_email, $to_name);
            $mail->Subject  = $subject;
            $mail->MsgHTML($body);
            $mail->MsgHTML(wordwrap($body, 50));
            $mail->IsHTML(true); // send as HTML

            $tracking_email_recipients_array = explode(",", TRACKING_EMAIL_RECIPIENTS);

            foreach ($tracking_email_recipients_array as $email_address) {
                $email_address = trim($email_address);
                $mail->addBCC($email_address, $email_address);
            }

            //echo $body;
            if ($mail->Send()) {
                // echo 'email sent';
            } else {
                echo 'error while sending an email';
            }
        }
    }
    //update tracking data into session
    setTrackingDataIntoSession();

    $json_data = array();
    $json_data['status'] = $status;

    echo json_encode($json_data);
}

function updateTrackingStatus(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $params['alert_type']   =   $alert_type = $requestData['alert_type'];
    $params['name']         =   $name       = urldecode($requestData['name']);

    if($alert_type == 'network'){
        $type_id = getNetworkIdByAlias(addslashes($name));
    }else{
        $type_id = $requestData['type_id'];
    }
    $params['type_id']      =   $type_id;
    $params['status']       =   $requestData['status'];
    $params['user_id']      =   $user_id    = $_SESSION['user_id'];
    $json_data = array();

    if(execute_query('__query_update_tracking_status', $params, 'FETCH_OBJ')) {
        $json_data['status']    = true;
    } else {
        $json_data['status']    = false;
    }

    if( $params['alert_type'] == 'filter' ) {
        $db = getConnection();
        if($params['status'] == 'active') {
            $set_schedule_email_col = 'schedule_email = 1';
            $params['status']       = 'active';
        } else {
            $set_schedule_email_col = 'schedule_email = 0';
            $params['status']       =   'inactive';
        }
        $sql = "UPDATE user_filters set $set_schedule_email_col where id = ".$params['type_id'];
        $stmt = $db->prepare($sql);
        $stmt->execute();
    }

    echo json_encode($json_data);
}

function deleteTrackingDetails(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $params['user_id']      = $_SESSION['user_id'];
    $params['alert_type']   = isset($requestData['alert_type']) ? $requestData['alert_type'] : '';
    $params['tracking_id']  = $params['type_id'] = $requestData['tracking_id'];
    if( $params['alert_type'] && $params['alert_type'] == 'filter' ) {
        $params['schedule_email'] = 1;
    }

    $json_data = array();

    if(execute_query('__query_delete_tracking_details', $params, 'FETCH_OBJ')) {
        $json_data['status']    = 'true';
    } else {
        $json_data['status']    = 'false';
    }
    //update tracking data into session
    setTrackingDataIntoSession();

    echo json_encode($json_data);
}

function getCategorylistWithCategorytracking(){
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    $requestData                        = $raw_data = array();

    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }

    $params['alert_type']               = $requestData['alert_type'];
    $params['user_id']                  = $_SESSION['user_id'];
    $params['type_id']                  = '\'\'';

    try {
        $main_category_result           = get_query_result('_sql_get_main_categories_list', $params, 'FETCH_OBJ');

        for($intW=0; $intW < count($main_category_result); $intW++)
        {
            $category_id                = $main_category_result[$intW]->category_id;
            $main_category_result[$intW]->subcategory = getSubCategoriesList($category_id);
        }

        $brand_tracking_data            = get_query_result('__query_get_category_brand_tracking_details', $params, 'FETCH_OBJ');
        $creative_tracking_data         = get_query_result('__query_get_category_creative_tracking_details', $params, 'FETCH_OBJ');

        if (count($brand_tracking_data) == 0) {
            $brand_data = '' ;
        } else {
            $brand_data = $brand_tracking_data[0]->brand;
        }

        if (count($creative_tracking_data) == 0) {
            $creative_data = '' ;
        } else {
            $creative_data = $creative_tracking_data[0]->creative;
        }
        
        $class_frequency_data           = get_query_result('__query_get_category_frequency_and_classification_data', $params, 'FETCH_OBJ');
        if (count($class_frequency_data) == 0) {
            $frequency      = '';
            $brand_class    = '';
        } else {
            $frequency      = $class_frequency_data[0]->frequency;
            $brand_class    = $class_frequency_data[0]->classification;
            if(empty($brand_class)) {
                $brand_class = '';
            } else {
                $brand_class = explode(',', $brand_class);
            }
        }

        $json_data                      = array();
        $json_data['result']            = $main_category_result;
        $json_data['status']            = count($main_category_result) ? 1 : 2;
        $json_data['brand_data']        = $brand_data;
        $json_data['creative_data']     = $creative_data;
        $json_data['frequency']         = $frequency;
        $json_data['classification']    = $brand_class;

        echo json_encode($json_data);
    } catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function setCategoryTrackingDetail(){
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data   = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $params['alert_type']       =   $requestData['alert_type'];
    $params['frequency']        =   urldecode($requestData['frequency']);
    $params['status']           =   $requestData['status'];
    $params['user_id']          =   $_SESSION['user_id'];
    $params['created_date']     =   customDate('Y-m-d H:i:s');
    $params['brand_class']      =   rtrim(urldecode($requestData['brand_class']),',');

    $type_ids = json_decode(urldecode($requestData['type_id']));
    $status   = false;

    $d_status = execute_query('__query_delete_previous_tracking_details', $params, 'FETCH_OBJ');

    //return if all categoies are not selected
    $arr_typeids = (array) $type_ids;
    if(empty($arr_typeids)){
        //update tracking data into session
        setTrackingDataIntoSession();
        $response           = array();
        $response['status'] = true;
        $response['data_inserted'] = 'empty';
        echo json_encode($response);

    } else {
        $insert_string                  = '';
        $sql                            = 'INSERT INTO tracking_and_alerts (user_id,alert_type,type_id,track_elements,frequency,status,created_date,classification) VALUES ';

        foreach ($type_ids as $key => $value) {
            $params['type_id']          = $key;
            $params['tracked_elements'] = rtrim(urldecode($value),',');

            extract($params);
            $insert_string              .= ' ('.$user_id.',"'.$alert_type.'",'.$type_id.',"'.$tracked_elements.'","'.$frequency.'","'.$status.'","'.$created_date.'","'.$brand_class.'"), ';
        }

        $sql                .= rtrim($insert_string, ', ');
        $json_data           = array();

        if(execute_sql($sql)) {
            $json_data['status'] = true;
        } else {
            $json_data['status'] = false;
        }
        $response['data_inserted'] = 'non_empty';
        //update tracking data into session
        setTrackingDataIntoSession();
        echo json_encode($json_data);
    }
}

function unsubscribeUser(){
    $request    = Slim::getInstance()->request();
    $user       = json_decode($request->getBody());

    $user_id    = isset($user->user_id) ? $user->user_id : '';

    $params['user_id']  = $user_id;
    $status             = true;
    if(execute_query('__query_unsubscribe_user', $params)) {
        $status    = true;
    } else {
        $status    = false;
    }

    echo json_encode(array('status'=> $status));
}

function getNetworkTrackingStatus(){
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    parse_str($query_string, $requestData);
    $requestData = (array)json_decode($query_string, TRUE);
    $network_id   =   $requestData['network_id'];
    $status         =   isTrackingPresent('network', $network_id);
    echo json_encode(array('status'=> $status));
}

function updateSubscribeStatus(){
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data   = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $params['subscribe_status'] = $_SESSION['tracking_alert_subscribed'] = $requestData['subscribe_flag'];
    $params['user_id']          = $_SESSION['user_id'];

    if(execute_query('__query_update_subscribe_status', $params)) {
        $status    = true;
    } else {
        $status    = false;
    }

    echo json_encode(array('status'=> $status));
}

function deleteTrackingAlerts() {
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $requestData = (array)json_decode($query_string, TRUE);

    $params['delete_all']       = isset($requestData['delete_all']) ? $requestData['delete_all'] : '';
    $params['tracking_ids']     = isset($requestData['tracking_ids']) ? urldecode($requestData['tracking_ids']) : '';
    $params['user_id']          = $_SESSION['user_id'];

    if(execute_query('__query_delete_tracking_alerts', $params)) {
        $json_data['status']    = 'true';
    } else {
        $json_data['status']    = 'false';
    }
   
    //update tracking data into session
    setTrackingDataIntoSession();

    echo json_encode($json_data);
}

function  forCreativeVideo($json_a,$video_info,$creative_id){
    $url = VIDEO_STREAMING_URL. "api/v1/ads/".$creative_id;
    if (!isset($json_a['html5_streaming_url']) || $json_a['html5_streaming_url'] == "") {
        if(empty($video_info)){
            APITimOut($url);
        }else{
            $json_a = retreiveStreamingUrl($creative_id);
            $json_a['msg'] = "This is a sample video and not specific to network";
            $json_a['adid'] = $creative_id;
            if (!isset($json_a['html5_streaming_url']) || $json_a['html5_streaming_url'] == "") {
                APITimOut($url);
            }
        }
    }
    return $json_a;
}

function fetchLastExportedData($id) {
    $params['id']          = $id;

    $db         = getConnection(); 
    $sql        = __query_fetch_excel_export_data($params); 
    $stmt       = $db->prepare($sql);
    $stmt->execute();
    $obj        = $stmt->fetchAll(PDO::FETCH_OBJ);
    foreach($obj as $key => $value) {
        $obj[$key]->file_path = str_replace("\'", "", $value->file_path);
     }
       return $obj[0];  
}

function fetchLastExportedId() {
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data   = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    
    $params['id']          = $requestData['id'];

    try{
        $db         = getConnection(); 
        $sql        = __query_fetch_excel_export_data($params); 
        $stmt       = $db->prepare($sql);
        $stmt->execute();
        $obj        = $stmt->fetchAll(PDO::FETCH_OBJ);
        echo json_encode(array('status'=> 1, 'obj' => $obj[0]));
    } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
   
}

function updateExcelExportFilename(){
    $db             = getConnection(); 
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = array();
    
    foreach($set_one as $k =>$v){
        $raw_data                       = explode('=',$v);
        $requestData[$raw_data[0]]      = $raw_data[1];
    }
    //$find       = array("{", "%7B", "}", "%7D", "'");
    $file_name = urlDecode($requestData['file_name']);
    $file_name = cleanFileName($file_name);
  //  $file_name = str_replace($find, "", $file_name);
   
    $rowid          = $requestData['rowid'];
    $old_filepath   = urlDecode($requestData['file_path']);
    
    $params_for_my_report['file_name']  = addslashes($file_name);
    $params_for_my_report['id']         = $rowid;
  
    $file_name_array    = explode('/', $old_filepath);
    $file_name_withext  = $file_name_array[count($file_name_array) - 1];
    $exploded           = explode('.',$file_name_withext);
    $extension          = end($exploded);
    $old_file_path      = str_replace($file_name_withext, '', $old_filepath);

    if(!empty($extension)){
        $params_for_my_report['file_path']  = $newfilepath = $old_file_path.$file_name.'.'.$extension;
    } else {
        $params_for_my_report['file_path']  = $newfilepath = $old_file_path.$file_name.'.xlsx';
    }

    try {
        $sql        = __query_get_report_data_for_id($params_for_my_report); 
        $stmt       = $db->prepare($sql);
        $stmt->execute();
        $obj        = $stmt->fetchAll(PDO::FETCH_OBJ);
     
        $filepath   = $obj[0]->file_path;
        
        $sql        = __query_update_for_my_report($params_for_my_report); 
        execute_sql($sql);
        moveFiles($filepath , $newfilepath);
        echo json_encode(array('newFilePath' => $newfilepath , 'status'=> 1));
    } catch (Exception $ex) {
        echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }     
}

function brandExportFromGrid(){
    $spendIndexCalculate   = [];
    $val                    = $_REQUEST['val'];
    $sd                     = $_REQUEST['sd'];
    $ed                     = $_REQUEST['ed'];
    $tab                    = $_REQUEST['type'];
    $c                      = urldecode($_REQUEST['c']);
    $network_code           = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $network_id             = isset($_REQUEST['network_id']) ? $_REQUEST['network_id'] : '';
    $network_name           = isset($_REQUEST['network_name']) ? $_REQUEST['network_name'] : '-';
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $responseType           = "(".urldecode($_REQUEST['responseType']).")";
    $spanish                = urldecode($_REQUEST['spanish']);
    $lang_type              = $spanish == 0 ? '' : 'sp-';
    $active_flag            = (isset($_REQUEST['flag']) && ($_REQUEST['flag']!= 'undefined')) ? $_REQUEST['flag'] : '2';
    $cat                    = rtrim($cat,",");
    $catIn                  = '('.$cat.')';
    //, SUM(rate) spend
    $cols                   = $c > 5 ? ',' : ', round(100 * sum(if(d.breaktype="N", 1, 0)) / count(*), 0) national, round(100 * sum(if(d.breaktype="L", 1, 0)) / count(*), 0) local,';
    $search                 = '';
    $max_spend              = 0;
    $brand_classification   = '';
    $countExcelCols         = 0;
    $count_unchecked_cat    = $_REQUEST['length_unchecked'];
    $word                   = ($tab == 1) ? 'brand_name' : 'display_name';
    $advOrBrandId           = $tab == 1 ? 'b.brand_id' : 'adv.adv_id'; 
    $unchecked_category     = $_REQUEST['unchecked_category'];
    $unchecked_category     = rtrim($unchecked_category,",");
    $uncheckedCatIn         = '('.$unchecked_category.')';
    $requestData            = $_REQUEST;
    $new_filter_opt         = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $program_ids            = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $creative_durations     = $_REQUEST['creative_duration'];
    //create filter details
    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $new_filter             = $new_filter_opt == 'none' ? 'All' : ucfirst($new_filter_opt);
    $network_filter         = !empty($network_code) ?  $network_code : 'All';
    $program_text           = empty($program_ids) ? 'All' : 'Custom';
    $active_inactive_filter = 'All';
    $brand_ids              = $_REQUEST['brand_ids'];
    $rank_ids               = $_REQUEST['rank_ids'];

    // process brand_ids to add rank in excel
    $rank_brand_ids         = array_combine(explode(',',$rank_ids), explode(',', $brand_ids));
    ksort($rank_brand_ids);
    $brand_ids              = implode(',', array_values($rank_brand_ids));
    $rank_ids               = array_keys($rank_brand_ids);

    if($active_flag == 1){
        $active_inactive_filter = 'Active';
    }elseif($active_flag == 0){
        $active_inactive_filter = 'Inactive';
    }
    
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }     
   
    if($c > 5){
        $active_col = 'long_active';
    }else{
        $active_col = 'short_active';
    }

    $brand_classification = getBrandClassification($c,$creative_durations);
    $_order_by             = " (b.brand_id,".$brand_ids." ), airings desc";

    $params_brand_creatives['spanish']              = $spanish;
    $params_brand_creatives['network_code']         = $network_code;
    $params_brand_creatives['network_id']           = $network_id;
    $params_brand_creatives['responseType']         = $responseType;
    $params_brand_creatives['sd']                   = $sd;
    $params_brand_creatives['ed']                   = $ed;
    $params_brand_creatives['brand_classification'] = $brand_classification['brand_classification'];
    $params_brand_creatives['cols']                 = $cols;
    $params_brand_creatives['brand_ids']            = $brand_ids;
    $params_brand_creatives['order_by']             = $_order_by;
    $params_brand_creatives['new_filter_opt']       = $new_filter_opt;
    $params_brand_creatives['program_ids']          = $program_ids;
    
    $result = get_query_result('_query_export_selected_brand', $params_brand_creatives, 'FETCH_OBJ');
    

    if( !isset($_SESSION['max_spend']) || $_SESSION['max_spend'] <= 0) {
        $max_spend = 1;
    } else {
        $max_spend = $_SESSION['max_spend'];
    }

    $final_result = $opt_array = array();
    if(!empty($result)){
        $rank = $index = $b_rank = 0;
        foreach($result as $k => $v){
            $v = (object) $v;
            if($index == 0){
                $b_rank    = ++$rank;
            }else if(isset($result[$index - 1]) && $result[$index - 1]->brand_name != $v->brand_name ) {
                $b_rank    = ++$rank;
            }

            if($active_flag != 2){
                if($tab == 1){
                    if($v->is_active != $active_flag){
                        unset($result[$k]);
                    }
                }
            }
            $brand_id   = $v->brand_id;
            $ranks      = array_search($brand_id, $rank_brand_ids);

            $opt_array['rank'] = $ranks;
            $opt_array['brand_name'] = $v->brand_name;
            $opt_array['category'] = get_category_names_by_ids($v->main_sub_category_id, $v->alt_sub_category_id);
            $opt_array['advertiser_name'] = $v->advertiser_name;
            $opt_array['creative_name'] = $v->creative_name;
            $creative_type = $v->type  ;
            $creative_cls =   $creative_type  ?   $creative_type . ' - ' . $v->class  :   $v->class ;
            $opt_array['classification'] = $creative_cls;
           
            if($v->length <= LENGTH ){
                $duration = $v->length.' sec';
              }else{
                $duration = ($v->length/60).' m';
              }
            if($active_col === 'short_active'){
                $opt_array['national'] = $v->national;
                $opt_array['local'] = $v->local;    
             //   $opt_array['spend'] = $v->spend;       
            }
            $opt_array['duration'] = $duration;
            $opt_array['airings'] = $v->airings;

            $spendIndexCalculate['classification'] = $c;
            $spendIndexCalculate['projected_score'] = $v->projected_score;
            $spendIndexCalculate['sum']             = $max_spend;
            $opt_array['spend_index']               = findSpendIndex($spendIndexCalculate);
            $opt_array['spend_index_excel']         = findSpendIndex($spendIndexCalculate, 0);
            $opt_array['first_detection'] = $v->first_aired_date ? $v->first_aired_date : '-' ;
            $opt_array['last_aired'] = $v->last_aired_date ? $v->last_aired_date : '-' ;
            $opt_array['video'] = base64_encode("creative_id=".$v->creative_id."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($network_code));
            $index++;
            $final_array[]     = $opt_array;
        }
    }
    
    $result = $final_array;
   
    $styleHeader = styleHeaderExcel();
    
    $styleSubHeader = styleSubHeaderRankingExcel();
    $styleArray = styleExcel();

    $hightLightRow = highlightRowExcel();
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  
    $header_array = array();
    if($c > 5){
        $column_brand = 'L';
        $headings = array('Rank','Brand Name', 'Category','Advertiser','Creatives','Classification','Duration','Airings','Spend ($)','First Aired','Last Aired','Play');
    }else{
        $column_brand = 'N';
        $headings = array('Rank','Brand Name', 'Category','Advertiser','Creatives','Classification','Duration','Airings','Spend ($)','National %','DPI %','First Aired','Last Aired','Play');
        
    }    

    for($column="A", $i = 0; $column <= "Z", $i < count($headings); $column++,$i++){
        $header_array[$column.'2'] = $headings[$i];
     }

    $title = 'DRM Ranking Report All Brands with Creatives '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His') ;
   
    $alignColRank = 'A';
    $report_title = 'Brands';

    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Ranking Report For All Brands with Creatives \n");
    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter." | Response Type - ".$response_type_filter." | Categories - ".$cat_filter." | Network - ".htmlspecialchars_decode($network_name)." | New - ".$new_filter." | Active/Inactive - ".$active_inactive_filter. "| Programs - ".$program_text;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);

    $objPHPExcel = new PHPExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');

    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$column_brand.'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$column_brand."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getActiveSheet()->getStyle("A2:".$column_brand."2")->applyFromArray($styleSubHeader);
    
    $objPHPExcel->getProperties()->setTitle($title)
                                ->setDescription("Selected Brand Report");
    
    $activeSheet = $objPHPExcel->getActiveSheet();
        
    $activeSheet->getStyle($alignColRank)
                 ->getAlignment()
                 ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

        //$data not used later
    foreach($header_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B',$column_brand) as $columnID) {
        $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
    }
    $i = 3;

    $column_in_number_format = ['H','I'];
    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
    
    foreach ($result as $key => $val) {
        $objPHPExcel->getActiveSheet()->getStyle("A".($i).":".$column_brand.($i))->applyFromArray($styleArray, False);
        if($c > 5){
             $resp_array = array('A'.$i=>$val['rank'],'B'.$i=>$val['brand_name'],'C'.$i=>$val['category'],'D'.$i=>$val['advertiser_name'],'E'.$i=>$val['creative_name'],'F'.$i=>$val['classification'],'G'.$i=>$val['duration'],'H'.$i=>$val['airings'],'I'.$i=>$val['spend_index_excel'],'J'.$i=>dateFormateForGridDate($val['first_detection']),'K'.$i=>dateFormateForGridDate($val['last_aired']),'L'.$i=>'Play');
        }else{
            $resp_array = array('A'.$i=>$val['rank'],'B'.$i=>$val['brand_name'],'C'.$i=>$val['category'],'D'.$i=>$val['advertiser_name'],'E'.$i=>$val['creative_name'],'F'.$i=>$val['classification'],'G'.$i=>$val['duration'],'H'.$i=>$val['airings'],'I'.$i=>$val['spend_index_excel'],'J'.$i=>$val['national'],'K'.$i=>$val['local'],'L'.$i=>dateFormateForGridDate($val['first_detection']),'M'.$i=>dateFormateForGridDate($val['last_aired']),'N'.$i=>'Play');
        }

        foreach($resp_array as $k => $v){
            if($v == 'Play'){
                $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
            }else{            
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
            }
            $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);           
            if($k[0] == 'H' || $k[0] == 'I' || $k[0] == 'J' || $k[0] == 'K' || $k[0] == 'L' || $k[0] == 'M'){
                $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(
                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
                );
            }
        }
        $i++;
    }
    
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Selected Brand Report');

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = $_SESSION['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['status']              = 'completed';
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = "ranking";
    $requestData['no_of_rows']          = count($result);
    
    
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    //$objWriter->setOffice2003Compatibility(true);//commented because it was creating problem with Copy and paste in excel PT##132219317
    $objWriter->save($newFilePath);
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1, 'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData, 'done'=>'done'));
}

function sendValidateInfoFeedback(){
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $feedback_text  = urldecode($requestData['feedback_text']);
    $resp_data  = explode('_', $requestData['obj_to_validate']);

    $params['type']       = $resp_data[0];
    $params['zoho_id']    = $resp_data[1];
    
    $result = get_query_result('_query_validate_info', $params, 'FETCH_OBJ');
    $obj_detail = unserialize($result[0]->data);
    $detail = '';
    if($resp_data[0] == 'advertiser' || $resp_data[0] == 'agency'){
        $detail .= 'Name:- <b>'.$obj_detail['advertiser']['account_name'].'</b><br>';
        if(isset($obj_detail['advertiser']['phone']) && !empty($obj_detail['advertiser']['phone']))
            $detail .= 'Phone:- '.$obj_detail['advertiser']['phone'].'<br>';

        if(isset($obj_detail['advertiser']['state']) && !empty($obj_detail['advertiser']['state']))
            $detail .= 'State:- '.$obj_detail['advertiser']['state'].'<br>';

        if(isset($obj_detail['advertiser']['street']) && !empty($obj_detail['advertiser']['street']))
            $detail .= 'Street:- '.$obj_detail['advertiser']['street'].'<br>';
        
        if(isset($obj_detail['advertiser']['city']) && !empty($obj_detail['advertiser']['city']))
            $detail .= 'City:- '.$obj_detail['advertiser']['city'].'<br>';
        
        if(isset($obj_detail['advertiser']['country']) && !empty($obj_detail['advertiser']['country']))
            $detail .= 'Country:- '.$obj_detail['advertiser']['country'].'<br>';
        
        if(isset($obj_detail['advertiser']['zip']) && !empty($obj_detail['advertiser']['zip']))
            $detail .= 'Zip:- '.$obj_detail['advertiser']['zip'].'<br>';
    }else{        
        $detail .= 'Name:- <b>'.$obj_detail['first_name'] .' '. $obj_detail['last_name'].' | '.$obj_detail['title'].'</b><br>';
        $detail .= 'Email:- '.$obj_detail['email'].'<br>';
        if(isset($obj_detail['phone']) && !empty($obj_detail['phone']))
            $detail .= 'Phone:- '.$obj_detail['phone'].'<br>';

        if(isset($obj_detail['state']) && !empty($obj_detail['state']))
            $detail .= 'State:- '.$obj_detail['state'].'<br>';

        if(isset($obj_detail['street']) && !empty($obj_detail['street']))
            $detail .= 'Street:- '.$obj_detail['street'].'<br>';

        if(isset($obj_detail['city']) && !empty($obj_detail['city']))
            $detail .= 'City:- '.$obj_detail['city'].'<br>';

        if(isset($obj_detail['country']) && !empty($obj_detail['country']))
            $detail .= 'Country:- '.$obj_detail['country'].'<br>';

        if(isset($obj_detail['zip']) && !empty($obj_detail['zip']))
            $detail .= 'Zip:- '.$obj_detail['zip'].'<br>';
    }

    $name   = 'Joseph / Pinakin ';
    $sub    = 'DRMetrix - Advertiser/Agency/Contact detail feedback';
    $to     = explode(',',ADV_INFO_EMAIL);


    $subject    =   $sub;
    $message    =   'Dear '.$name.',<br/><br/>';
    $message   .=   'Following is the information of Advertiser/Agency/Contact detail feedback:<br>
                    Feedback received from:- "'.$_SESSION['username'].'"<br><br>
                    '.ucfirst($params['type']).' detail: <br>'.$detail.'<br>
                    Feedback:           <b>"'.$feedback_text.'"</b>
                    <br><br><br>
                    Thanks,<br>
                    DRMetrix';

    $headers = 'From: info@drmetrix.com' . "\r\n" .
                'MIME-Version: 1.0' . "\r\n" .
                'Content-type: text/html; charset=iso-8859-1' . "\r\n";
    require 'PHPMailer/class.phpmailer.php';
    try {
            ob_start();
            $mail = new PHPMailer(); //New instance, with exceptions enabled
            $mail->IsSendmail();  // tell the class to use Sendmail
            $body = $message;
            //$to   = $to;
            $mail->SetFrom('info@drmetrix.com', 'DRMetrix');
            foreach ($to as $key => $value) {
                $mail->AddAddress($value);
            }
            $mail->Subject  = $subject;
            $mail->AltBody  = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
            $mail->WordWrap = 80; // set word wrap
            $mail->MsgHTML($body);
            $mail->IsHTML(true); // send as HTML
            $mail->Send();
            ob_end_clean();
            echo json_encode(array('status'=>1));
    } catch (phpmailerException $e) {
            echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }
}

function behindCommercialFeedback(){
    
    $request = Slim::getInstance()->request();
    $query_string = $request->getBody();
    $set_one = explode('&', $query_string);
    $requestData = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data  = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }
    $feedback_text  = urldecode($requestData['feedback_text']);
    $adv_name       = urldecode($requestData['adv_name']);

    $name   = 'Joseph / Pinakin ';
    $sub    = 'DRMetrix - Advertiser behind the commercial Info';
    $to     = explode(',',ADV_INFO_EMAIL);

    $subject    =   $sub;
    $message    =   'Dear '.$name.',<br/><br/>';
    $message   .=   'Following is the information of Advertiser behind the commercial:<br>
                    Feedback received from:- "'.$_SESSION['username'].'"<br><br>
                    Advertiser:- <b>'.$adv_name.'</b><br>
                    Feedback:           <b>"'.$feedback_text.'"</b>
                    <br><br><br>
                    Thanks,<br>
                    DRMetrix';

    $headers = 'From: info@drmetrix.com' . "\r\n" .
                'MIME-Version: 1.0' . "\r\n" .
                'Content-type: text/html; charset=iso-8859-1' . "\r\n";
    require 'PHPMailer/class.phpmailer.php';
    try {
            ob_start();
            $mail = new PHPMailer(); //New instance, with exceptions enabled
            $mail->IsSendmail();  // tell the class to use Sendmail
            $body = $message;
            //$to   = $to;
            $mail->SetFrom('info@drmetrix.com', 'DRMetrix');
            foreach ($to as $key => $value) {
                $mail->AddAddress($value);
            }
            //$mail->AddAddress($to);
            $mail->Subject  = $subject;
            $mail->AltBody  = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
            $mail->WordWrap = 80; // set word wrap
            $mail->MsgHTML($body);
            $mail->IsHTML(true); // send as HTML
            $mail->Send();
            ob_end_clean();
            echo json_encode(array('status'=>1));
    } catch (phpmailerException $e) {
            echo '{"status"=>0,"error":{"text":'. $e->getMessage() .'}}';
    }
}

function getNetworkLogData($type='', $year='', $week='', $date='') {
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    $set_one        = explode('&', $query_string);
    $requestData    = $raw_data = array();
    foreach($set_one as $k =>$v){
        $raw_data   = explode('=',$v);
        $requestData[$raw_data[0]] = $raw_data[1];
    }

    $filter_result = $requestData['filter_result'];
    $type   = $requestData['type'];
    $year   = isset($requestData['year']) ? $requestData['year'] : '';
    $week   = isset($requestData['week']) ? $requestData['week'] : '';
    $date   = isset($requestData['date']) ? urldecode($requestData['date']) : '';
    $network_code = $requestData['network_code'];
    $network_id   = $requestData['network_id'];
    $program_ids  = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    // $sidx       = $requestData['sidx'];
    $sord       = $requestData['sord'];
    $page       = $requestData['page'];
    $limit      = $requestData['rows'];
    $nestedData     = array();
    $exportData     = array();
    $data           = array();
    $session_data   = array();

    if ($type == 'current_week') {
        $current_week           = getCurrentWeekDetails();
        $year                   = date('Y', strtotime($current_week['sd']));

        $return['start_date']   = $current_week['start_date'];
        $return['end_date']     = $current_week['end_date'];
        $return['date_str']     = $current_week['start_date'] . ' thru ' . $current_week['end_date'];
        $weeks_all_day          = getWeekAllDays($current_week['sd'], $current_week['ed']);

        if (empty($weeks_all_day)) {// if today's day is Monday then broadcast day would be last day of previous week.
            $current_week           = Slim_App_Lib_Common::getLastMediaWeek();
            $year                   = date('Y', strtotime($current_week['sd']));

            $return['start_date']   = $current_week['start_date'];
            $return['end_date']     = $current_week['end_date'];
            $return['date_str']     = $current_week['start_date'] . ' thru ' . $current_week['end_date'];
            $weeks_all_day          = getWeekAllDays($current_week['sd'], $current_week['ed']);
        }

        $weeks_all_day_r        = array_reverse($weeks_all_day);
        
        if(empty($week)) {
            $week               = $current_week['calendar_id'];
            $date               = date_format(new DateTime($weeks_all_day_r[0]),"Y-m-d");
        } else {
            $date               = date_format(new DateTime($date),"Y-m-d");
        }
        $return['week_days']    = $weeks_all_day;
        $year_list              = getMediaYearOnly();
        $return['year_list']    = $year_list;
    } elseif ($type == 'last_week') {
        $last_week              = getLastMediaWeekDetail();
        $year                   = date('Y', strtotime($last_week['sd']));

        $return['start_date']   = $last_week['start_date'];
        $return['end_date']     = $last_week['end_date'];
        $return['date_str']     = $last_week['start_date'] . ' thru ' . $last_week['end_date'];
        $weeks_all_day          = getWeekAllDays($last_week['sd'], $last_week['ed']);
        $weeks_all_day_r        = array_reverse($weeks_all_day);

        if(empty($week)) {
            $week               = $last_week['calendar_id'];
            $date               = date_format(new DateTime($weeks_all_day_r[0]),"Y-m-d");
        } else {
            $date               = date_format(new DateTime($date),"Y-m-d");
        }

        $return['week_days']    = $weeks_all_day;
        $year_list              = getMediaYearOnly();
        $return['year_list']    = $year_list;
    } elseif ($type == 'media_year') {
        if($year == 'current_week' || $year == 'last_week'){
            $year = date('Y');
        }
        $year_data = getMediaCalendarWeekData();
        $year_data = $year_data[$year];
        $week_list = array();

        if(empty($week)) {
            foreach ($year_data as $key => $value) {
                $week           = $key;
                $start_date     = $value['start_date'];
                $end_date       = $value['end_date'];
                $weeks_all_day  = $value['week_days'];
                $weeks_all_day_r= array_reverse($weeks_all_day);
                $date           = date_format(new DateTime($weeks_all_day_r[0]),"Y-m-d");
                break;
            }
        } else if(!empty($week)) {
            foreach ($year_data as $key => $value) {
                if(intval($key) == $week){
                    $start_date = $value['start_date'];
                    $end_date   = $value['end_date'];
                    $weeks_all_day  = $value['week_days'];
                    $weeks_all_day_r= array_reverse($weeks_all_day);
                    if(empty($date)) {
                        $date       = date_format(new DateTime($weeks_all_day_r[0]),"Y-m-d");
                    } else {
                        $date       = date_format(new DateTime($date),"Y-m-d");
                    }
                    break;
                }
            }
        }
        foreach ($year_data as $key => $value) {
            $week_list[$key] = $key . ' - '.$value['start_date'].' to '.$value['end_date'].'';
        }

        $year_list              = getMediaYearOnly();
        $return['year_list']    = $year_list;
        $return['start_date']   = $start_date;
        $return['end_date']     = $end_date;
        $return['date_str']     = $start_date . ' thru ' . $end_date;
        $return['week_days']    = array_reverse($weeks_all_day);
        $return['week_list']    = $week_list;
    
} elseif($type == 'datepicker_date') {

    // $year = date('Y');
    $year_data = getMediaCalendarWeekData();   

    $date_details = get_calendar_details($date);
    $year = $date_details['media_year'];
    $week = $date_details['media_week'];

    $year_data = $year_data[$year];
    $week_list = array();

    $timestamp = strtotime($date);
    $date = date("m/d/Y", $timestamp);

    //get calendar id for selected date.
    /*
    foreach ($year_data as $key => $value) {
        foreach($value['week_days'] as $week_day => $week_value){
            if($week_value == $date)
            {
                $week = $value['media_week'];
                break;
            }
        }     
    }
    */

    $timestamp = strtotime($date);
    $date = date("Y-m-d", $timestamp);
      
     if(!empty($week)) {
            foreach ($year_data as $key => $value) {
                if(intval($key) == $week){
                    $start_date = $value['start_date'];
                    $end_date   = $value['end_date'];
                    $weeks_all_day  = $value['week_days'];
                    $weeks_all_day_r= array_reverse($weeks_all_day);
                    if(empty($date)) {
                        $date       = date_format(new DateTime($weeks_all_day_r[0]),"Y-m-d");
                    } else {
                        $date       = date_format(new DateTime($date),"Y-m-d");
                    }
                    break;
                }
            }
        }

         foreach ($year_data as $key => $value) {
            $week_list[$key] = $key . ' - '.$value['start_date'].' to '.$value['end_date'].'';
        }

        $year_list              = getMediaYearOnly();
        $return['year_list']    = $year_list;
        $return['start_date']   = $start_date;
        $return['end_date']     = $end_date;
        $return['date_str']     = $start_date . ' thru ' . $end_date;
        $return['week_days']    = array_reverse($weeks_all_day);
        $return['week_list']    = $week_list;
        $return['week']         = urldecode($week);
    
}
    $return['year']         = $year;
    $return['week']         = urldecode($week);
    $return['date']         = $date;
    $sd_dir                 = LIFETIME_START_DATE;
    $ed_dir                 = customDate('Y-m-d');
    $c_dir                  = urldecode($requestData['c']);
    $spanish                = urldecode($requestData['spanish']);
    $creative_durations     = urldecode($requestData['creative_duration']);
    $brand_classification   = getBrandClassification($c_dir, $creative_durations);
    $_resp_type             = urldecode($requestData['responseType']);

    $cat                    = rtrim(urldecode($requestData['cat']),",");
    $cat                    = rtrim($cat,"all,");
    $catIn                  = '('.$cat.')';
    $uncheckedCatIn         = '('.rtrim(urldecode($requestData['unchecked_category']),",").')';
    $count_unchecked_cat    = $requestData['length_unchecked'];
    if($count_unchecked_cat <= CATEGORY_UNCHECKED_LIMIT && $count_unchecked_cat != 0){
        $categories         = ' AND (b.main_sub_category_id NOT IN '.$uncheckedCatIn .' OR b.alt_sub_category_id NOT IN '.$uncheckedCatIn.') ';
    }else{
        $categories         = !$cat || $cat == 'all' ? '' : ' AND (b.main_sub_category_id IN '.$catIn .' OR b.alt_sub_category_id IN '.$catIn .')';
    }

    $params['filter_result'] = $filter_result;
    $params['start_date']    = $date;
    $params['network_code'] = $network_code;
    $params['network_id']   = $network_id;
    $params['program']      = isset($requestData['program']) ? str_replace('+'," ", urldecode($requestData['program'])) : '';
    $params['daypart']      = isset($requestData['daypart']) ? str_replace('+'," ", urldecode($requestData['daypart'])) : '';
    $params['adv_id']       = !empty($requestData['advertiser']) ? $requestData['advertiser'] : '';
    $params['brand_id']     = !empty($requestData['brand']) ? $requestData['brand'] : '';
    $params['creative_id']  = !empty($requestData['creative']) ? $requestData['creative'] : '';
    $params['language_condition']   = ' AND c.spanish IN ('. $spanish . ') ';
    $params['brand_classification'] =  $brand_classification['brand_classification'];
    $params['responseType'] = '('.$_resp_type.')';
    $params['categories']   = $categories;
    $params['program_ids']  = $program_ids;

    $programs               = array();
    $dayparts               = array();
    $advertisers            = array();
    $brands                 = array();
    $creatives              = array();
    $cr_return              = array();
    $count                  = 0;
    if($c_dir > 5) {
        $c_dir = 6;
    } else {
        $c_dir = 1;
    }

    $result = get_query_result('__query_get_network_log_view', $params, 'FETCH_ASSOC');
    $totalData = count($result);
    $count = $totalData;

    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }

    if ($page > $total_pages) {
      $page = $total_pages;
    }

    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;

    if ($offset < 0) {
      $offset = 0;       
    }
    $base_url             = "http://".HOST ."/drmetrix/ranking?data=";
    foreach ($result as $key => $value) {
        $start_date                         = $value['start'];
        $et_time                            = date("g:i:s a",strtotime($start_date));
        $nestedData['time']                 = $start_date;
        $exportData['time']                 = $et_time;

        $adv_display_name = str_replace("&","XXX",$value['display_name']);
        $advertiser_url_params  = base64_encode("adv_name=".$adv_display_name."&adv_id=".$value['adv_id']."&back_to_nl=0&call_from=adv&call_id=&call_name=&duration=".$value['length']);

        $brand_display_name  = str_replace("&","XXX",$value['brand_name']);
        $brand_url_params = base64_encode ("adv_name=".$adv_display_name."&adv_id=".$value['adv_id']."&back_to_nl=0&call_from=brand&call_id=".$value['brand_id']."&call_name=".$brand_display_name."&duration=".$value['length']);

        $creative_display_name = str_replace("&","XXX",$value['creative_name']);
        $creative_url_params = base64_encode("adv_name=".$adv_display_name."&adv_id=".$value['adv_id']."&back_to_nl=0&call_from=creatives&call_id=".$value['creative_id']."&call_name=".$creative_display_name."&duration=".$value['length']);

        //$nestedData['creative_name']        = '<span><a href="javascript:void(0);" onclick="viewAdvTabFromNetworkLog(\''.addslashes($value['display_name']).'\','.$value['adv_id'].','.$c_dir.',\'\',\'\',\''.$sd_dir.'\',\''.$ed_dir.'\',\'creatives\','.$value['creative_id'].',\''.addslashes(htmlspecialchars($value['creative_name'])).'\',\'network_log\')" >'.$value['creative_name'].' - '.$value['length'].' Sec</a></span>';

        $nestedData['creative_name']        = '<span><a style="color: rgb(0, 190, 255);" attr-href="'.$base_url.$creative_url_params.'" airing_id="'.$value['airing_id'].'" href="javascript:void(0);" onclick="highlightRow(\'\',\''.addslashes(htmlspecialchars($value['creative_name'])).'\', \'creative\', $(this))" >'.$value['creative_name'].'</a></span>';
        $exportData['creative_name']        = $value['creative_name'];
        $exportData['creative_id']          = $value['creative_id'];
        $creative_id                        = $value['creative_id'];
        $length                             = $value['length'];

        $creatives[$length][$creative_id]   = $value['creative_name'];

        $nestedData['id']                   = $value['airing_id'];
        $exportData['airing_id']            = $value['airing_id'];
        $nestedData['hidden_creative']      = $value['creative_name'];
        $nestedData['hidden_creative_duration'] = $value['creative_name'] . ' - '.$value['length'].' Sec';
        $exportData['hidden_creative_duration'] = $value['creative_name'] . ' - '.$value['length'].' Sec';

        //$nestedData['brand_name']           = '<span><a href="javascript:void(0);" onclick="viewAdvTabFromNetworkLog(\''.addslashes($value['display_name']).'\','.$value['adv_id'].','.$c_dir.',\'\',\'\',\''.$sd_dir.'\',\''.$ed_dir.'\',\'brand\','.$value['brand_id'].',\''.addslashes($value['brand_name']).'\',\'network_log\')" >'.$value['brand_name'].'</a></span>';
        
        $nestedData['brand_name']           = '<span><a style="color: rgb(0, 190, 255);" attr-href="'.$base_url.$brand_url_params.'" airing_id="'.$value['airing_id'].'" href="javascript:void(0);" onclick="highlightRow(\'\',\''.addslashes($value['brand_name']).'\',\'brand\', $(this))" >'.$value['brand_name'].'</a></span>';
        $exportData['brand_name']           = $value['brand_name'];
        $exportData['brand_id']             = $value['brand_id'];
        $brands[$value['brand_id']]         = $value['brand_name'];
        $nestedData['hidden_brand']         = $value['brand_name'];

        //$nestedData['adv_name']             = '<span><a href="javascript:void(0);" onclick="viewAdvTabFromNetworkLog(\''.addslashes($value['display_name']).'\','.$value['adv_id'].','.$c_dir.',\'\',\'\',\''.$sd_dir.'\',\''.$ed_dir.'\',\'adv\',\'\',\'\',\'network_log\')" >'.$value['display_name'].'</a></span>';
        
        $nestedData['adv_name']             = '<span><a style="color: rgb(0, 190, 255);" attr-href="'.$base_url.$advertiser_url_params.'" airing_id="'.$value['airing_id'].'" href="javascript:void(0);" onclick="highlightRow(\'\',\''.addslashes($value['display_name']).'\',\'adv\', $(this))" >'.$value['display_name'].'</a></span>';
        $exportData['adv_name']             = $value['display_name'];
        $exportData['adv_id']               = $value['adv_id'];
        $advertisers[$value['adv_id']]      = $value['display_name'];
        $nestedData['hidden_adv']           = $value['display_name'];

        $nestedData['program']              = $value['program'];
        $exportData['program']              = $value['program'];
        $programs[]                         = $value['program'];

        $arr = explode("-",substr($value['daypart'],8));
        $start = date("g:i A",strtotime($arr[0]));
        $end = date("g:i A",strtotime($arr[1]));
        $dayparts[$value['daypart']]        = $start.' - '.$end;

        $nestedData['classification']       = $value['class'];
        $exportData['classification']       = $value['class'];
        $nestedData['breaktype']            = $value['breaktype'] == 'N' ? 'National' : 'DPI';
        $exportData['breaktype']            = $value['breaktype'] == 'N' ? 'National' : 'DPI';
        $nestedData['duration']             = '<span><a style="color: rgb(0, 190, 255);cursor: default;" href="javascript:void(0);" onclick="highlightRow(\'\',\''.addslashes(htmlspecialchars($value['creative_name'])).' - '.$value['length'].' Sec\',\'duration\', \'blank_element\')" >'.$value['length'].' sec </a></span>';
        $exportData['duration']             = $value['length'] . ' sec';
        $nestedData['hidden_duration']      = $value['length'];

        if(!$value['thumbnail']){
           $nestedData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
           $exportData['video'] = '<i class="fa fa-play-circle-o fa-2x" style="color:#cbcccc;"></i>';
           $nestedData['thumbnail'] = '<i class="fa fa-picture-o fa-2x" aria-hidden="true" style="color:#cbcccc;"></i>';
           
        }else{
           $nestedData['video'] = '<a href="javascript:void(0);"><i class="fa fa-play-circle-o fa-2x" onclick="playvideoFromNetworkLog('.$value['airing_id'].',\'\',\'\',\''.$network_code.'\',\'network_log_video\')"></i></a>';
           $exportData['video'] =  base64_encode("creative_id=".$creative_id."&airing_id=".$value['airing_id']."&date=".time());
           $nestedData['thumbnail'] = '<a href="javascript:void(0);"><i class="fa fa-picture-o fa-2x col-00beff" onclick="playvideoFromNetworkLog('.$value['airing_id'].',\'\',\'\',\''.$network_code.'\',\'network_log_thumbnil\')"></i></a>';
           //base64_encode("creative_id=".$creative_id."&airing_id=0000&date=".time()."&only=creative&network_code=".base64_encode($network_code));
        }

        $data[]                             = $nestedData;
        $session_data[]                     = $exportData;
        $count++;
    }

    foreach ($creatives as $length => $creative_arr) {
        $return_creative['text'] = $length;
        $cr_arr_all              = [];
        foreach ($creative_arr as $key => $value) {
            $cr_arr['id']     = $key;
            $cr_arr['text']   = $value;
            $cr_arr_all[]     = $cr_arr;
        }
        $return_creative['children'] = $cr_arr_all;
        $cr_return[] = $return_creative;
    }

    $programs                               = array_unique($programs);
    $dayparts                               = array_unique($dayparts);
    $advertisers                            = array_unique($advertisers);
    $brands                                 = array_unique($brands);
    asort($advertisers);
    asort($brands);
    $grid_data['rows']                      = $data;
    $grid_data['page']                      = '1';
    $grid_data['total']                     = '1';
    $grid_data['records']                   = $count;
    $grid_data['sord']                      = 'desc';

    $_SESSION['network_log_data']           = $session_data;

    $_SESSION['network_log_rsq_data']       = $requestData;

    $json_data                              = array();
    $json_data['rows']                      = $data;
    $json_data['page']                      = $page;
    $json_data['total']                     = $total_pages;
    $json_data['records']                   = $count; 
    $json_data['status']                    = 1;
    $json_data['weeks_data']                = $return;
    $json_data['result']                    = $grid_data;
    $json_data['programs']                  = $programs;
    $json_data['dayparts']                  = $dayparts;
    $json_data['advertisers']               = $advertisers;
    $json_data['brands']                    = $brands;
    $json_data['creatives']['results']      = $cr_return;
    $json_data['broadcastDate']             = '';
    
    $network_name                           = getNetworkNamebyCode($network_code);    
    //if(stripos($network_name, 'Off Air') !== false){
       $bdate = get_query_result('__query_get_networks_max_broadcast_startdate', $params, 'FETCH_ASSOC');
       $json_data['broadcastDate'] =  standardDateTimeFormat('m/d/Y',strtotime($bdate[0]['sdate']));
    //}
    echo json_encode($json_data);
}

function getProgramViewByNetwork($export = 0, $request_arr = NULL) {
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    parse_str($query_string, $requestData);
    $requestData = (array)json_decode($query_string, TRUE);
   
    $c_dir                  = urldecode($requestData['c']);
    $spanish                = urldecode($requestData['spanish']);
    $creative_durations     = urldecode($requestData['creative_duration']);
    $brand_classification   = getBrandClassification($c_dir, $creative_durations);
    $_resp_type             = urldecode($requestData['responseType']);
  
    $categories = '';
    $hours                  = isset($requestData['hour']) ? $requestData['hour']   : '';
    $dayparts               = isset($requestData['daypart']) ? $requestData['daypart'] :  '';
    $days                   = isset($requestData['day']) ? $requestData['day'] : '';

    $day_string             = is_array($days) ? implode_call($days)     : $days;
    $hours_string           = is_array($hours)    ? implode_call($hours)    : $hours;
    $dayparts_string        = is_array($dayparts)    ? implode_call($dayparts)    : $dayparts;
    $breaktype = '';
    if(isset($requestData['dp_color']) && $requestData['dp_color'] != '') {
        if($requestData['dp_color'] == '#cd3b36'){
            $breaktype = 'N';
        }else{
            $breaktype = 'L';
        }
    }
   
    $program_ids            = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
    $network_id                    =  $requestData['network_id'];

    $params['network_id']   = $network_id;
    $params['sd']           = $requestData['sd'];
    $params['ed']           = $requestData['ed'];
    $params['spanish']      = $spanish;
    $params['id']           = $requestData['id'] ;
    $params['area']         = $requestData['area'];
    if(!empty($breaktype)) {
        $params['breaktype']    = " AND  d.breaktype = '".$breaktype."'";
    }
    $params['brand_classification'] =  $brand_classification['brand_classification'];
    $params['responseType'] = '('.$_resp_type.')';
    $params['categories']   = $categories;
    $params['hours']        = $hours_string;
    $params['dayparts']     = $dayparts_string;
    $params['days']         = $day_string;
    $params['c_dir']        = $c_dir;
    $params['day_short']    =  isset($requestData['day_short']) ? $requestData['day_short']   : '';
    $params['program_ids']  = $program_ids;

    if(isset($requestData['dp_time'])) {
        $time_arr = explode("-",$requestData['dp_time']);
   
        $d0 = str_replace("%3A",":",$time_arr[0]);
        $d01 = str_replace("+"," ",$d0);
     
        $d1 = str_replace("%3A",":",$time_arr[1]);
        $d11 = str_replace("+"," ",$d1);
      
        $start_time = date("H:i:s", strtotime($d01));
        $end_time = date("H:i:s", strtotime($d11));
        $params['start_time']                          = $start_time;
        $params['end_time']                            = $end_time;
    }
 
     

    $programs               = array();
    $dayparts               = array();
    $advertisers            = array();
    $brands                 = array();
    $creatives              = array();
    $cr_return              = array();
    $data                   = $session_data = array();
    $count                  = 0;
   
    $result = get_query_result('__query_get_programs_view', $params, 'FETCH_OBJ');
    $totalData = count($result);
    $count = $totalData;

    //Calculate paging related values $total_pages, $page
    $sord       = $requestData['sord'];
    $page       = $requestData['page'];
    $limit      = $requestData['rows'];
    if ($count > 0) {
    $total_pages = ceil($count / $limit);
    } else {
    $total_pages = 0;
    }

    if ($page > $total_pages) {
    $page = $total_pages;
    }

    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;

    if ($offset < 0) {
    $offset = 0;       
    }
    $name = $brandName = '';
    foreach ($result as $key => $resultV) {
        $start_time = date("h:i A", strtotime($resultV->start_date.' '.$resultV->start_hour.':'.$resultV->start_half_hour.':00'));
        if($c_dir > 5) {
            $nestedData['program']              = $exportData['program']        = $resultV->program;
            $nestedData['start_time']           = $exportData['start_time']     = $start_time;
            $nestedData['total_airings']        = number_format($resultV->total_airings);
            $exportData['total_airings']        =  $resultV->total_airings;
            $nestedData['total_spend']          = number_format($resultV->total_spend, 0);
            $exportData['total_spend']          = $resultV->total_spend;
            $nestedData['hidden_total_spend']   = $resultV->total_spend;
            $nestedData['hidden_total_airings']  = $resultV->total_airings;
        } else {
            $nestedData['program']              = $exportData['program']        = $resultV->program;
            $nestedData['start_time']           = $exportData['start_time']     = $start_time;
            $nestedData['total_airings']        = number_format($resultV->total_airings);
            $exportData['total_airings']        =  $resultV->total_airings;
            $nestedData['total_spend']          = number_format($resultV->total_spend, 0);
            $exportData['total_spend']          = $resultV->total_spend;
            $nestedData['national_airings']     = number_format($resultV->national_airings);
            $exportData['national_airings']     = $resultV->national_airings;
            $nestedData['national_percent']     = $exportData['national_percent'] = $resultV->nationalP;//round($resultV->nat/$resultV->total_airings * 100, 2);
            $nestedData['national_spend']       = number_format( $resultV->nat_spend , 0);
            $exportData['national_spend']       = $resultV->nat_spend;
            $nestedData['local_airings']        = number_format($resultV->local_airings);
            $exportData['local_airings']        = $resultV->local_airings;
            $nestedData['local_percent']        = $exportData['local_percent']  = $resultV->localP;//round($resultV->loc/$resultV->total_airings * 100, 2);
            $nestedData['local_spend']          = number_format($resultV->loc_spend, 0);
            $exportData['local_spend']          = $resultV->loc_spend;
            $nestedData['hidden_total_spend']   = $resultV->total_spend;
            $nestedData['hidden_total_airings']  = $resultV->total_airings;
            $nestedData['hidden_national_spend'] = $resultV->nat_spend;
            $nestedData['hidden_local_spend']   = $resultV->loc_spend;
        }
        $nestedData['airing_id']            = $resultV->airing_id;
        $data[]                             = $nestedData;
        $session_data[]                     = $exportData;
        $name                               = $resultV->name;
        $brandName                          = isset($resultV->brand_name) ? $resultV->brand_name : '';
    }
   
    $json_data                              = array();
    $json_data['rows']                      = $data;
    $json_data['name']                      = $name;
    $json_data['brand_name']                = $brandName;
    $json_data['page']                      = $page;
    $json_data['total']                     = $total_pages;
    $json_data['records']                   = $count; 
    $_SESSION['export_programs']['rows']    = json_encode($session_data);     
    echo json_encode($json_data);
    exit;
}
function exportNetworkLog(){ 
    $date_range = $_REQUEST['date_range_str'];
    $range_text = $_REQUEST['range_text'];
    $requestData = array();
    $requestData =  $_SESSION['network_log_rsq_data'];
    $network_log_data = $_SESSION['network_log_data'];
    $styleHeader = array(
        'font'  => array(
            'size'  => 16,            
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            //'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
                'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
                'rotation'   => 90,
                'startcolor' => array(
                    'argb' => 'B5B5B5'
                ),
                'endcolor'   => array(
                    'argb' => 'E0E0E0'
                )
            )
    );
    
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );

    $styleArray = array(
        'borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
        )
    );

    $hightLightRow = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '05beff')
        )
    );

    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  
    
    $title = 'Network Log - '.stripslashes(getNetworkNamebyCode($requestData['network_code'])).' '.$range_text.' '.str_replace('/', '-', $date_range).' '.'Week - '.$_REQUEST['week_list_current'].' Date - '.str_replace('/', '-', urldecode($_REQUEST['log_date_list'])).'_time_'.date('m-d-y_His') ;
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText('Network Log - '.getNetworkNamebyCode($requestData['network_code']) ."\n");
    $adv_name = $brand_name = $creative_name = $programs =  '-';
    
    if($_REQUEST['adv_name'] != 'empty_str')
        $adv_name = $_REQUEST['adv_name'];

    if($_REQUEST['brand_name'] != 'empty_str')
        $brand_name = $_REQUEST['brand_name'];

    if($_REQUEST['creative_name'] != 'empty_str')
        $creative_name = $_REQUEST['creative_name'];

    if($_REQUEST['programs_name'] != 'empty_str')
        $programs = $_REQUEST['programs_name'];

    $filter_detail =  $range_text.'  '.$date_range.' | '.'Week - '.$_REQUEST['week_list_current'].' | Date - '.urldecode($_REQUEST['log_date_list']) ; 
    //.' | Program - '.htmlspecialchars_decode($programs).' | Advertiser - '.htmlspecialchars_decode($adv_name).' | Brand - '.htmlspecialchars_decode($brand_name).' | Creative - '.htmlspecialchars_decode($creative_name)

    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:J1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:J1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getActiveSheet()->getStyle("A2:J2")->applyFromArray($styleSubHeader);
        
    $objPHPExcel->getProperties()->setTitle($title)
                                ->setDescription("Network Log Report");
    
    $activeSheet = $objPHPExcel->getActiveSheet();

    //$header_array = array('A2'=>'Time','B2'=>'Creative','C2'=>'Duration','D2'=>'Brand','E2'=>'Advertiser','F2'=>'Program','G2'=>'Classification','H2'=>'Break Type','I2'=>'Play','J2'=>'Thumbnail');
    $header_array = array('A2'=>'Time','B2'=>'Program','C2'=>'Advertiser','D2'=>'Brand','E2'=>'Creative','F2'=>'Duration','G2'=>'Classification','H2'=>'Break Type','I2'=>'Play','J2'=>'Thumbnail');
    
      //$data not used later
    foreach($header_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B','J') as $columnID) {
        if($columnID == 'C' || $columnID == 'D' || $columnID == 'E' ){
            $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setWidth(43);
        }else{
            $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
        }
    }
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $i = 3;
    foreach ($network_log_data as $key => $val) {        
        if(!empty($_REQUEST['adv_name']) || !empty($_REQUEST['brand_name']) ||  !empty($_REQUEST['creative_name']) || !empty($_REQUEST['programs_name'])){
            
            if ($_REQUEST['creative_name'] != '' && stripos($val['creative_name'], $_REQUEST['creative_name']) === false ) {
                continue;
            }

            if ($_REQUEST['brand_name'] != '' && stripos($val['brand_name'], $_REQUEST['brand_name']) === false ) {
                continue;
            }

            if ($_REQUEST['adv_name'] != '' && stripos($val['adv_name'], $_REQUEST['adv_name']) === false ) {
                continue;
            }

            if ($_REQUEST['programs_name'] != '' && stripos($val['program'], $_REQUEST['programs_name']) === false ) {
                continue;
            }
        }

        $objPHPExcel->getActiveSheet()->getStyle("A".($i).":"."J".($i))->applyFromArray($styleArray, False);
        //$resp_array = array('A'.$i=>$val['time'],'B'.$i=>$val['creative_name'],'C'.$i=>$val['duration'],'D'.$i=>$val['brand_name'],'E'.$i=>$val['adv_name'],'F'.$i=>$val['program'],'G'.$i=>$val['classification'],'H'.$i=>$val['breaktype'],'I'.$i=>'Play','J'.$i=>'Thumbnail');  
        $resp_array = array('A'.$i=>$val['time'],'B'.$i=>$val['program'],'C'.$i=>$val['adv_name'],'D'.$i=>$val['brand_name'],'E'.$i=>$val['creative_name'],'F'.$i=>$val['duration'],'G'.$i=>$val['classification'],'H'.$i=>$val['breaktype'],'I'.$i=>'Play','J'.$i=>'Thumbnail');
        if($_REQUEST['highlight_type'] == 'adv'){
            if($val['adv_name'] == $_REQUEST['highlight_name'])
                    $objPHPExcel->getActiveSheet()->getStyle("A".$i.":J".$i)->applyFromArray($hightLightRow);           
        }elseif ($_REQUEST['highlight_type'] == 'brand'){
            if($val['brand_name'] == $_REQUEST['highlight_name'])
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":J".$i)->applyFromArray($hightLightRow);
        }elseif ($_REQUEST['highlight_type'] == 'creative') {
            if($val['creative_name'] == $_REQUEST['highlight_name'])
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":J".$i)->applyFromArray($hightLightRow);
        }elseif ($_REQUEST['highlight_type'] == 'duration') {
            if($val['hidden_creative_duration'] == $_REQUEST['highlight_name'])
                $objPHPExcel->getActiveSheet()->getStyle("A".$i.":J".$i)->applyFromArray($hightLightRow);
        }

        foreach($resp_array as $k => $v){
            if($v == 'Play'){
                $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'Play');
                $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
            }elseif($v == 'Thumbnail') {
                $url = createImageLink_ranking($val['creative_id'],$val['airing_id']);
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, 'View');
                $objPHPExcel->getActiveSheet()->getStyle($k)->getFont()->setColor( $phpColor );
                $objPHPExcel->setActiveSheetIndex(0)->getCell($k)->getHyperlink('View')->setUrl($url);
            }else{            
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($k, $v);
            }
            $objPHPExcel->getActiveSheet()->getRowDimension($i)->setRowHeight(15);           
            if($k[0] == 'A'  || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I'|| $k[0] == 'J'){
                $objPHPExcel->getActiveSheet()->getStyle($k)->getAlignment()->applyFromArray(array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER));
            }
        }
        $i++;
    }

    if ($i <= 3) {
        $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A'.$i.':J'.$i);
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue('A'.$i, "No records found.");
        $objPHPExcel->getActiveSheet()->getStyle('A'.$i)->getAlignment()->applyFromArray(
            array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)
        );
    }
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle('Network Log Report');
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0);
    $user_id                            = $_SESSION['user_id'];
    $dir_name                           = createDir($user_id);
    $title                              = cleanFileName($title);
    //$title                              = str_replace(array('/', '*'), '-', $title);
    //$title                              = str_replace("'", '', $title);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  NULL;//addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  NULL;//addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['status']              = 'completed';
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = "network_log";
    $requestData['type']                = "ranking";
    $requestData['no_of_rows']          = count($_SESSION['network_log_data']);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    $objWriter->save($newFilePath);

    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1, 'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData, 'done'=>'done'));
}

function getAllActiveInactiveNetworks() {
    $result = get_query_result('__query_get_all_active_inactive_networks', array(), 'FETCH_ASSOC');
    $array = array();
    foreach($result as $k => $v){
            $array['network_id']    = $v['network_id'];
            $array['network_code']  = $v['network_code'];
            $array['network_alias'] = $v['network_alias'];
            $array['dpi']           = $v['dpi'];
            $array['live_date']     = $v['live_date'];
            $return[] = $array;
    }
    echo  json_encode(array('result' => $return, 'status'=>1));
}

function exportRefineLogWrapper() {
    $url    = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST']. '/drmetrix/api/index.php/export_refine_log' ;
    $ch     = curl_init($url);
    $_REQUEST['user_id'] = $_SESSION['user_id'];
    $_REQUEST['username'] = $_SESSION['username'];
    $array  = array_merge(array("REFINE_REQUEST" => $_REQUEST));
    curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout in seconds
 
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS,  http_build_query($array));

    curl_exec($ch);
    curl_close($ch);
}

function exportRefineLog() {
    $_REQUEST           = $_POST['REFINE_REQUEST'];
    $_invalidCharacters = array('*', ':', '/', '\\', '?', '[', ']');
    $db                 = getConnection();
    $report_title       = 'Refine log';
    $excel_header       = array('Network Name', 'Date/Time', 'BreakType', 'Phone Number', 'Web Address', 'Program Name', 'Play','View');
    $sub_tab_title      = ($_REQUEST['tab'] == 1) ? 'Brand':'Advertiser';
    $sd                 = $_REQUEST['sd'];
    $ed                 = $_REQUEST['ed'];
    $refine_by          = $_REQUEST['refine_filter_opt'] == '800' ? 'TFN' : 'URL';
    $refine_by_search_text  = str_replace($_invalidCharacters, '-', $_REQUEST['refine_filter_opt_text']);
    $i                  = 1; 
    $char               = 'A';
    $title = cleanFileName($_REQUEST['filename']);
    
    $user_id                            = $_REQUEST['user_id'];
    $requestData['username']            = $_REQUEST['username'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['user_id']             = $user_id;
    $requestData['sd']                  = $_REQUEST['sd'];
    $requestData['ed']                  = $_REQUEST['ed'];
    $requestData['spanish']             = $_REQUEST['spanish'];
    $requestData['responseType']        = $_REQUEST['responseType'];
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 0;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "calendar";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "inprogress";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = addslashes($_REQUEST['tab']) == 1 ? "brand" : "advertiser";
    $requestData['program_ids']         = isset($_REQUEST['programs_ids']) ? $_REQUEST['programs_ids'] : '';
    $requestData['type']                = "refine_list";
    $requestData['no_of_rows']          = 0;
    $requestData['c']                   = $_REQUEST['c'];    
    $db_obj = addExcelExportInfo($requestData);
    $last_insert_export_id = $db_obj->lastInsertId();
    $_REQUEST['excel_id']  = $last_insert_export_id;
    updateDownloadsCountInZoho($user_id);

    $result                     = viewAiringsLayoutTfn(1, $_REQUEST);
    $requestData['no_of_rows']  = count($result); 
    // $result                 = $_SESSION['export']['refine_url_tfn_rows'];

    $styleHeader = array(
        'font'  => array(
            'size'  => 16,            
            'name'  => 'Calibri'
        ),
        'alignment' => array(
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
            'rotation'   => 90,
            'startcolor' => array(
                'argb' => 'B5B5B5'
            ),
            'endcolor'   => array(
                'argb' => 'E0E0E0'
            )
        )
    );    
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );

    $styleArray = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
            )
        )
    );

    // Create new PHPExcel object
    $objPHPExcel = new PHPExcel();
    $objPHPExcel->getProperties()->setTitle($title)->setDescription("Refine By report");  
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
      
    foreach($excel_header as $a => $b){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i,$b);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleArray, False);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleSubHeader);
        $char++;
    }
    $i++;  
    $char   = 'A';

    $i = 2;$net_data = 1;
    foreach($result as $key => $val){    
        $char   = 'A';   
        foreach($val as $k => $v) {
            if($k == 'thumbnail') {
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i, 'View');
                $objPHPExcel->getActiveSheet()->getStyle($char.$i)->getFont()->setColor( $phpColor );
                $objPHPExcel->setActiveSheetIndex(0)->getCell($char.$i)->getHyperlink('View')->setUrl($v);
            } else if($k == 'video'){
                if($v != 'N/A') {
                    $url = $url = HOST.'/drmetrix/video/'.$v.'?video=1';
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i, 'Play');
                    $objPHPExcel->getActiveSheet()->getStyle($char.$i)->getFont()->setColor( $phpColor );
                    $objPHPExcel->setActiveSheetIndex(0)->getCell($char.$i)->getHyperlink('Play')->setUrl('http://'.$url);
                } else {
                    $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i,$v);
                }
            } else{
                $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i,$v);
            }
            $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleArray, False);
            $char++;  
            $progress = ($net_data / $requestData['no_of_rows']) * 100;
            $net_data ++;
            if($progress < 97){
                $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
                $stmt = $db_obj->prepare($sql);
                $stmt->execute();
            } 
        }
        $i++;    
    }

    foreach(range('A',$char) as $columnID)
    {
        $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
    }    
    if(empty($result)){
        $objPHPExcel->getActiveSheet()->mergeCells('A2:'.$char.'2');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A2','No Records Found');
    }
  
    // Rename worksheet
    $objPHPExcel->getActiveSheet()->setTitle(substr('Refine By '.$refine_by.'_'.$refine_by_search_text,-30));
    $objPHPExcel->setActiveSheetIndex(0);
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);
    $filesize = calculateFileSize(stripslashes($requestData['file_path']));
    $sql = "UPDATE excel_exports set status = 'completed', no_of_records = '".$requestData['no_of_rows']."', filesize  = '".$filesize."', progress='100' WHERE id ='". $last_insert_export_id."'";
    $stmt = $db_obj->prepare($sql);
    $stmt->execute();
    echo json_encode(array('status'=>1, 'done'=>'done'));
}

function exportProgramView(){
    $db                 = getConnection();
    $requestData            = $_REQUEST;
    $sd                     = $requestData['sd'];
    $ed                     = $requestData['ed'];
    $area                   = ucfirst(htmlspecialchars($requestData['area']));
    $name                   = str_replace("'","",$requestData['program_area_name']);
    $export_header          = $requestData['export_header'];
    $header_title           = 'DRM Programs Of '. $area. ' '.$name. ' For Network - '.htmlspecialchars($requestData['network_name']).' ';
    $title                  = $header_title.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His') ;
    $report_title           = cleanFileName($title);
    $totalSpendHeader       = $requestData['totalSpendHeading'];
    $totalAiringsHeading    = $requestData['totalAiringsHeading'];

    if($requestData['c'] > 5) {
        $excel_header       = array('Program','Start Time (EST)', $totalAiringsHeading ,$totalSpendHeader );
        $column_in_number_format = ['D','C'];
        $last_column = 'D';
    }else {
        $excel_header       = array('Program','Start Time (EST)', $totalAiringsHeading, $totalSpendHeader, 'National Airings', 'National %', 'National Spend ($)', 'DPI Airings','DPI%','DPI Spend ($)');
        $column_in_number_format = ['C','D','E','G','H','J'];
        $last_column = 'J';
    }

    $sd                 = $_REQUEST['sd'];
    $ed                 = $_REQUEST['ed'];
    $i                  = 2;
    $char               = 'A';
    $result = isset($_SESSION['export_programs']) ? json_decode($_SESSION['export_programs']['rows']) : [] ;
    $requestData['no_of_rows']  = count($result);

    $styleHeader = array(
        'font'  => array(
            'size'  => 16,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
         'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type'       => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
            'rotation'   => 90,
            'startcolor' => array(
                'argb' => 'B5B5B5'
            ),
            'endcolor'   => array(
                'argb' => 'E0E0E0'
            )
        )
    );
    $styleSubHeader = array(
        'font'  => array(
            'color' => array('rgb' => 'FFFFFF'),
            'size'  => 11,
            'bold'  => true,
            'name'  => 'Calibri'
        ),
        'alignment' => array(
            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
        ),
        'fill' => array(
            'type' => PHPExcel_Style_Fill::FILL_SOLID,
            'startcolor' => array('rgb' => '202b39')
        )
    );

    $styleArray = array(
        'borders' => array(
            'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
            )
        )
    );

    // Create new PHPExcel object
    $objPHPExcel = new PHPExcel();
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }
    $objPHPExcel = new PHPExcel();
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex(0));
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText($export_header);
    $objPHPExcel->setActiveSheetIndex(0)->getCell('B1')->setValue($objRichText);
    $objPHPExcel->setActiveSheetIndex(0)->getStyle('B1')->getAlignment()->setWrapText(true);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex(0)->mergeCells('B1:'.$last_column.'1');
    $objPHPExcel->setActiveSheetIndex(0)->getStyle("B1:".$last_column."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex(0)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getProperties()->setTitle($report_title)->setDescription("Programs For Network - ".htmlspecialchars($requestData['network_name']));
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');

    foreach($excel_header as $a => $b){
        $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i,$b);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleArray, False);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleSubHeader);
        $char++;
    }
    $i++;
    $char   = 'A';

    $i = 3;$net_data = 1;
    setColumnNumberFormat($objPHPExcel, $column_in_number_format);
    foreach($result as $key => $val){
        $char   = 'A';
        foreach($val as $k => $v) {
            $objPHPExcel->setActiveSheetIndex(0)->SetCellValue($char.$i,$v);
            $objPHPExcel->setActiveSheetIndex(0)->getStyle($char.$i.":".$char.$i)->applyFromArray($styleArray, False);
            $char++;
        }
        $i++;
    }

    foreach(range('B',$char) as $columnID)
    {
        $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
    }
    if(empty($result)){
        $objPHPExcel->getActiveSheet()->mergeCells('A2:'.$char.'2');
        $objPHPExcel->setActiveSheetIndex(0)
                ->setCellValue('A2','No Records Found');
    }

    $user_id                            = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);
    $file_name                          = $dir_name.$report_title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($report_title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL;
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $_REQUEST['type'] == 1 ? "brand" : "advertiser";
    $requestData['type']                = "program_view";
    $requestData['no_of_rows']          = count($result);

     //updateDontAskMe($requestData['ask_me']);
    $objPHPExcel->getActiveSheet()->setTitle('Programs');
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1,  'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData,'done'=>'done'));
    // Rename worksheet
    $objPHPExcel->setActiveSheetIndex(0);
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
    $objWriter->save($newFilePath);
}

function networkRankingExcel() {
    $url    = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST']. '/drmetrix/api/index.php/networks_ranking_export' ;
    $ch     = curl_init($url);
    $_REQUEST['user_id'] = $_SESSION['user_id'];
    $_REQUEST['username'] = $_SESSION['username'];
    $array  = array_merge(array("REQUEST" => $_REQUEST));
    curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout in seconds
 
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS,  http_build_query($array));

    curl_exec($ch);
    curl_close($ch);
}

function networkRankingExport() {
    $json_data  = $network_dayparts_excel_array = $network_weekend_excel_array = $excel_array = array();
    $_REQUEST = $_POST['REQUEST'];
    $_filter_detail_text = " | Brand - ".htmlspecialchars_decode($_REQUEST['brand_name']);
    $classification         = $_REQUEST['c'];
    $sd                     = $_REQUEST['sd'];
    $ed                     = $_REQUEST['ed'];
    $tab                    = $_REQUEST['type'];
    $c                      = urldecode($_REQUEST['c']);
    $network_code           = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $requestData            = $_REQUEST;
    $date_range             = urldecode($_REQUEST['date_range_str']);   
    $file_name              = cleanFileName($_REQUEST['filename']);
    $file_name              = urlDecode($file_name);
    $active_flag            = (isset($_REQUEST['flag']) && ($_REQUEST['flag']!= 'undefined')) ? $_REQUEST['flag'] : '2';
  
    $title                  = $file_name;
    //Infromation insert into DB
    $user_id                            = $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);    
    $requestData['user_id']             = $user_id;
    $requestData['username']            = $_REQUEST['username'];
    //$title                              = str_replace(array('/', '*',':'), '-', $title);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 0;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "inprogress";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat_id']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = "network_list";
    $requestData['no_of_rows']          = 0;
    $params['list_ids']                 = (isset($requestData['list_ids'])) ? urldecode($requestData['list_ids']) : '';
    $params['applied_ids']              =  $params['list_ids'];
    $db_obj = addExcelExportInfo($requestData);
    $last_insert_export_id = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);

    //--------------------
    $date_range             = urldecode($_REQUEST['date_range_str']);
    $classfication_filter   = urldecode($_REQUEST['classfication_filter']);
    $response_type_filter   = urldecode($_REQUEST['response_type_filter']);
    $spanish                = urldecode($_REQUEST['spanish']);
    $language_filter        = ($spanish == '0,1' ? 'All' : ($spanish == 0 ? 'English' : 'Spanish'));
    $new_filter_opt         = isset($_REQUEST['new_filter_opt']) ? $_REQUEST['new_filter_opt'] : 'none';
    $new_filter             = $new_filter_opt == 'none' ? 'All' : ucfirst($new_filter_opt);
    $active_inactive_filter = 'All';
    if($active_flag == 1){
       $active_inactive_filter = 'Active';
   }elseif($active_flag == 0){
       $active_inactive_filter = 'Inactive';
   }
    $cat                    = $_REQUEST['cat'];
    $cat                    = rtrim($cat,"all,");
    $cat                    = rtrim($cat,",");
    if(empty($cat) || $cat == 'all'){
        $cat_filter = 'All';
    }else{
        $cat_list = explode(',', $cat);
        if(isset($cat_list[1])){
            $cat_filter = 'Multiple';
        }else{
            $cat_detail = getCategoryDetail($cat_list[0]);
            $cat_filter = $cat_detail[0]['category'].' > '.$cat_detail[0]['sub_category'];
        }
    }
    $params       = getRequestDataForRefineFilters(1, $requestData);
    if ($_REQUEST['type'] == '0' ) {
        $params['list_id_condition']     = $params['list_ids'] != '' ? ' AND adv.adv_id IN ('.$params['list_ids'] .')' : '';
    } else  {
        if(isset($requestData['primary_tab']) && $requestData['primary_tab'] == 'advertiser') {
            $fetch_brands =  get_query_result('__query_get_brands_for_adv', $params, 'FETCH_OBJ');
            $params['list_ids'] = $fetch_brands[0]->brand_ids;
        }
        $params['list_id_condition']     = $params['list_ids'] != '' ? ' AND b.brand_id IN ('.$params['list_ids'] .')' : '';
    }
    try{
        $result       = get_query_result('__queries_networks_ranking_report', $params, 'FETCH_OBJ');
    }catch(Exception $e){
        api_exception_log('index.php', '__queries_networks_ranking_report', serialize($e->getMessage()));
        deleteRecordFromExcel($last_insert_export_id);
    }
    $firstTabResult = count($result);
  
    $json_data['rows']      = $result;//$data;
    $json_data['records']   = count($result);
    $networkIds = [];
    foreach($json_data['rows'] as $key => $val) {
        foreach($val as $array_key => $array_value){
            if($array_key == 'network_id') {
                array_push($networkIds , $array_value) ;
            }
        }
    }
    array_unique($networkIds);
    $weekday_array                 = array('1'=>'Monday','2'=>'Tuesday','3'=>'Wednesday','4'=>'Thursday','5'=>'Friday');
    $generic_dayparts_array        = array('1'=>'Early Morning','2'=>'Daytime','3'=>'Early Fringe','4'=>'Primetime','5'=>'Late Fringe','6'=>'Overnight (Other)');
    $params['networksIds']         = $networkIds;
    try {
        $network_result                = get_query_result('__queries_networks_by_id', $params, 'FETCH_OBJ');
    } catch(Exception $e){
        api_exception_log('index.php', '__queries_networks_by_id', serialize($params));
        deleteRecordFromExcel($last_insert_export_id);
    }
    try {
        $mfDaypartsResult                = get_query_result('__queries_networks_by_dayparts_mf', $params, 'FETCH_OBJ');
    } catch(Exception $e){
        api_exception_log('index.php', '__queries_networks_by_dayparts_mf', serialize($e->getMessage()));
        deleteRecordFromExcel($last_insert_export_id);
    }
    try {
        $ssDaypartsResult                = get_query_result('__queries_networks_by_dayparts_ss', $params, 'FETCH_OBJ');
    } catch(Exception $e){
        api_exception_log('index.php', '__queries_networks_by_dayparts_ss', serialize($e->getMessage()));
        deleteRecordFromExcel($last_insert_export_id);
    }
    $secondTabResult         = count($mfDaypartsResult);
    $thirdTabResult          = count($ssDaypartsResult);
    $programsResult = [];
    if($classification != 6  && $classification != 7) {
        try {
            $programsResult                = get_query_result('__queries_programs_by_spend', $params, 'FETCH_OBJ');
        }catch(Exception $e){
            api_exception_log('index.php', '__queries_programs_by_spend', serialize($e->getMessage()));
            deleteRecordFromExcel($last_insert_export_id);
        }
    }
   
    $fourthTabResult               = count($programsResult);
    $requestData['no_of_rows']     = count($result) + count($mfDaypartsResult) + count($ssDaypartsResult) + count($programsResult);
    $rank = 0;
    $updateExcelRecord = "update excel_exports set no_of_records =". $requestData['no_of_rows']." WHERE id =".$last_insert_export_id;
    $stmt = $db_obj->prepare($updateExcelRecord);
    $stmt->execute();
    foreach($json_data['rows'] as $key => $val){
            if($rank==0) { $spend_index = $val->total_spend; $_SESSION['network_max_spend'] = $val->total_spend; }
            $val->spend_index_export                = custom_round($val->total_spend);
            foreach($network_result as $network_key => $network_value){
                if($val->network_id == $network_value->network_id) {
                    $val->network_name = $network_value->network_alias;
                    $val->dpi = $network_value->dpi;
                }
            }
    }
    if($classification <= 5) {
        foreach($json_data['rows'] as $key => $val){
                $excel_array[$key]['rank']              = ++$rank;
                $excel_array[$key]['network_name']      = $val->network_name;
                $excel_array[$key]['dpi']               = $val->dpi == 1 ? 'Y' : 'N';
                $excel_array[$key]['total_airings']     = $val->airings;
                $excel_array[$key]['total_spend']       = $val->spend_index_export;
                $excel_array[$key]['national_airings']  = $val->national_airings;
                $excel_array[$key]['national_percent']  = $val->national; 
                $excel_array[$key]['national_spend']    = empty($val->national_spend) ? 0 : $val->national_spend;
                $excel_array[$key]['local_airings']     = $val->local_airings;
                $excel_array[$key]['local_percent']     = $val->local; 
                $excel_array[$key]['local_spend']       = empty($val->local_spend) ? 0 : $val->local_spend;
        }
    } else {
        foreach($json_data['rows'] as $key => $val){
            $excel_array[$key]['rank']              = ++$rank;
            $excel_array[$key]['network_name']      = $val->network_name;
            $excel_array[$key]['total_airings']     = $val->airings;
            $excel_array[$key]['total_spend']       = $val->spend_index_export;
        }
    }

    $styleHeader    = styleHeaderExcel();
    $styleSubHeader = styleSubHeaderRankingExcel();
    $styleArray     = styleExcel();
    $styleRowsCat   = styleRowsCatExcel();
    $styleRows      = styleRowsExcel();
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  

    $char = 'A';
    $header_array = [];
    
    if($classification <= 5) {
        $headers = array('Rank', 'Network Name', 'DPi','Total Airings', 'Total Spend ($)','National Airings','National %', 'National Spend ($)','DPI Airings','DPI %','DPI Spend ($)');
        $column_brand = 'K';
        $column_index_array = ['D','E','F','H','I','K'];
    } else {
        $headers = array('Rank', 'Network Name','Total Airings', 'Total Spend ($)',);
        $column_brand = 'D';
        $column_index_array = ['C','D'];
    }
  
    foreach($headers as $header_key => $header_value) {
        $header_array[$char.'2'] = $header_value;
        $char++;
    }
    
    $b = 0;
    $alignColRank = 'A';
    $report_title = 'Ranking Report for All Networks';
    $title = 'DRM Network Ranking Report '.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His');
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText($report_title." \n");
    $filter_detail = "Date Range - ".$date_range." | Brand Classification - ".$classfication_filter." | Creative - ".$language_filter."  | Response Type - ".$response_type_filter." | Categories - ".$cat_filter." | Network - All " ;
    ;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex($b));
    $objPHPExcel->setActiveSheetIndex($b)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex($b)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex($b)->mergeCells('B1:'.$column_brand.'1');
    $objPHPExcel->setActiveSheetIndex($b)->getStyle("B1:".$column_brand."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getActiveSheet()->getStyle("A2:".$column_brand."2")->applyFromArray($styleSubHeader);    
    $objPHPExcel->getProperties()->setTitle($title)->setDescription("Ranking Report for All Networks");
    $activeSheet = $objPHPExcel->getActiveSheet();   
    setColumnNumberFormat($objPHPExcel , $column_index_array) ;
    
    foreach($header_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B',$column_brand) as $columnID) {
        $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension($columnID)->setAutoSize(true);
    }
    $i = 3;    
   
   $row = 2;$net_data = 1; $rowNum = 1;
    foreach($excel_array as $key => $val){   
        $char = 'A';   
        $row++;
        foreach($val as $array_key => $array_value){
            $objPHPExcel->setActiveSheetIndex($b)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
            $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($char.$row,$array_value);
            $char++;
            $progress = ($rowNum /  $requestData['no_of_rows']) * 100;
            $rowNum++;
            if($progress < 99 && ($firstTabResult ) <=  $requestData['no_of_rows']){
                 $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
                 $stmt = $db_obj->prepare($sql);
                 $stmt->execute();
            }
        }
    }
    
    // Rename worksheet
    $objPHPExcel->setActiveSheetIndex($b)->setTitle('Network by Spend');

    if($classification <= 5) {
        $daypart_headers               = array('Network','Daypart','Total Airings','Total Spend ($)','National Airings','National %','National Spend ($)','DPI Airings','DPI %','DPI Spend ($)');
        $column_index_array = ['C','D','E','G','H','J'];
        $last_column = 'J';
        
    } else {
        $daypart_headers               = array('Network','Daypart','Total Airings','Total Spend ($)');
        $column_index_array = ['D','C'];
        $last_column = 'D';
    }
    $x = 1;
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($x);
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Ranking Report for Dayparts (M-F) \n");
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $objDrawing1 = new PHPExcel_Worksheet_Drawing();
    $objDrawing1->setName('Logo');
    $objDrawing1->setDescription('Logo');
    $objDrawing1->setPath($logo);  //setOffsetY has no effect
    $objDrawing1->setCoordinates('A1');
    $objDrawing1->setHeight($imageHeight);
    $objDrawing1->setWidth($imageWidth);
    $objDrawing1->setOffsetX(6);
    $objDrawing1->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex($x)->setTitle("Daypart by spend (M-F)");
    $objDrawing1->setWorksheet($objPHPExcel->setActiveSheetIndex($x));
    $objPHPExcel->setActiveSheetIndex($x)->getCell('B1')->setValue($objRichText);
    $objPHPExcel->setActiveSheetIndex($x)->getStyle('B1')->getAlignment()->setWrapText(true);
    $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex($x)->mergeCells('B1:'.$last_column.'1');
    $objPHPExcel->setActiveSheetIndex($x)->getStyle("B1:".$last_column."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension("A")->setWidth(30);

    $char = 'A';
    $header_daypart_array = array();
  
    foreach($daypart_headers as $header_key => $header_value) {
        $header_daypart_array[$char.'2'] = $header_value;
        $char++;
    }

    $char = 'A';
    if($classification <= 5) {
        foreach($mfDaypartsResult as $key => $val){
            $network_dayparts_excel_array[$key]['network_name']      = $val->network_alias;
            $network_dayparts_excel_array[$key]['daypart_name']      = $generic_dayparts_array[$val->gen_daypart_id];
            $network_dayparts_excel_array[$key]['total_airings']     = $val->airings;
            $network_dayparts_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
            $network_dayparts_excel_array[$key]['national_airings']  = $val->national_airings;
            $network_dayparts_excel_array[$key]['national']          = $val->national;
            $network_dayparts_excel_array[$key]['national_spend']    = $val->national_spend;
            $network_dayparts_excel_array[$key]['local_airings']     = $val->local_airings;
            $network_dayparts_excel_array[$key]['local']             = $val->local;
            $network_dayparts_excel_array[$key]['local_spend']       = $val->local_spend;
        }
    } else {
        foreach($mfDaypartsResult as $key => $val){
            $network_dayparts_excel_array[$key]['network_name']      = $val->network_alias;
            $network_dayparts_excel_array[$key]['daypart_name']      = $generic_dayparts_array[$val->gen_daypart_id];
            $network_dayparts_excel_array[$key]['total_airings']     = $val->airings;
            $network_dayparts_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
        }
    }
    setColumnNumberFormat($objPHPExcel , $column_index_array) ;

    foreach($header_daypart_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($h_key,$h_val);
    }
    $objPHPExcel->setActiveSheetIndex($x)->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);

    foreach(range('B',$last_column) as $columnID) {
        $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension($columnID)->setAutoSize(true);
    }

    $row = 2;
     foreach($network_dayparts_excel_array as $key => $val){
         $char = 'A';
         $row++;
         foreach($val as $array_key => $array_value){
             $objPHPExcel->setActiveSheetIndex($x)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
             $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($char.$row,$array_value);
             $char++;
             $progress = ($rowNum /  $requestData['no_of_rows']) * 100;
             $rowNum++;
             if($progress < 99 && ($firstTabResult + $secondTabResult) <=  $requestData['no_of_rows']){
                  $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
                  $stmt = $db_obj->prepare($sql);
                  $stmt->execute();
             }
             
         }
     }

//dayparts by spend (s-s)
     $x = 2;
     if($classification <= 5) {
        $daypart_headers               = array('Network','Daypart','Total Airings','Total Spend ($)','National Airings','National %','National Spend ($)','DPI Airings','DPI %','DPI Spend ($)');
        $column_index_array = ['C','D','E','G','H','J'];
        $last_column = 'J';
        
    } else {
        $daypart_headers               = array('Network','Daypart','Total Airings','Total Spend ($)');
        $column_index_array = ['D','C'];
        $last_column = 'D';
    }
     $objPHPExcel->createSheet();
     $objPHPExcel->setActiveSheetIndex($x);
     $objRichText = new PHPExcel_RichText(); // \n"."
     $objRichText->createText("Ranking Report for Dayparts (S-S) \n");
     $objBold = $objRichText->createTextRun($filter_detail);
     $objBold->getFont()->setBold(true);
     $phpColor = new PHPExcel_Style_Color();
     $phpColor->setRGB('0000FF');
     $objDrawing1 = new PHPExcel_Worksheet_Drawing();
     $objDrawing1->setName('Logo');
     $objDrawing1->setDescription('Logo');
     $objDrawing1->setPath($logo);  //setOffsetY has no effect
     $objDrawing1->setCoordinates('A1');
     $objDrawing1->setHeight($imageHeight);
     $objDrawing1->setWidth($imageWidth);
     $objDrawing1->setOffsetX(6);
     $objDrawing1->setOffsetY(20);
     $objPHPExcel->setActiveSheetIndex($x)->setTitle("Daypart by spend (S-S)");
     $objDrawing1->setWorksheet($objPHPExcel->setActiveSheetIndex($x));
     $objPHPExcel->setActiveSheetIndex($x)->getCell('B1')->setValue($objRichText);
     $objPHPExcel->setActiveSheetIndex($x)->getStyle('B1')->getAlignment()->setWrapText(true);
     $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('1')->setRowHeight(100);
     $objPHPExcel->setActiveSheetIndex($x)->mergeCells('B1:'.$last_column.'1');
     $objPHPExcel->setActiveSheetIndex($x)->getStyle("B1:".$last_column."1")->applyFromArray($styleHeader);
     $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('2')->setRowHeight(24);
     $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension("A")->setWidth(30);
     if($classification <= 5) {
             $column_index_array = ['C','D','E','F','G','H','I','J'];
     } else {
        $column_index_array = ['C','D'];
     }
     $char = 'A';
     $header_daypart_array = array();
   
     foreach($daypart_headers as $header_key => $header_value) {
         $header_daypart_array[$char.'2'] = $header_value;
         $char++;
     }
     $char = 'A';
     if($classification <= 5) {
        foreach($ssDaypartsResult as $key => $val){
            $network_weekend_excel_array[$key]['network_name']      = $val->network_alias;
            $network_weekend_excel_array[$key]['daypart_name']      = $generic_dayparts_array[$val->gen_daypart_id];
            $network_weekend_excel_array[$key]['total_airings']     = $val->airings;
            $network_weekend_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
            $network_weekend_excel_array[$key]['national_airings']  = $val->national_airings;
            $network_weekend_excel_array[$key]['national']          = $val->national;
            $network_weekend_excel_array[$key]['national_spend']    = custom_round($val->national_spend);
            $network_weekend_excel_array[$key]['local_airings']     = $val->local_airings;
            $network_weekend_excel_array[$key]['local']             = $val->local;
            $network_weekend_excel_array[$key]['local_spend']       = custom_round($val->local_spend);
           
        }
    } else {
        foreach($ssDaypartsResult as $key => $val){
            $network_weekend_excel_array[$key]['network_name']      = $val->network_alias;
            $network_weekend_excel_array[$key]['daypart_name']      = $generic_dayparts_array[$val->gen_daypart_id];
            $network_weekend_excel_array[$key]['total_airings']     = $val->airings;
            $network_weekend_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
        }
    }
    setColumnNumberFormat($objPHPExcel , $column_index_array) ;
 
     foreach($header_daypart_array as $h_key => $h_val){
         $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($h_key,$h_val);
     }
     $objPHPExcel->setActiveSheetIndex($x)->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);
 
     foreach(range('B',$last_column) as $columnID) {
         $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension($columnID)->setAutoSize(true);
     }
 
     $row = 2;
      foreach($network_weekend_excel_array as $key => $val){
          $char = 'A';
          $row++;
          foreach($val as $array_key => $array_value){
              $objPHPExcel->setActiveSheetIndex($x)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
              $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($char.$row,$array_value);
              $char++;
              $progress = ($rowNum /  $requestData['no_of_rows']) * 100;
              $rowNum++;
              if($progress < 99 && ($firstTabResult + $secondTabResult + $thirdTabResult) <=  $requestData['no_of_rows']){
                   $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
                   $stmt = $db_obj->prepare($sql);
                   $stmt->execute();
              }
          }
      }

      //programs by spend 
      if($classification != 6  && $classification != 7) {
     $x = 3;
     if($classification <= 5) {
        $program_headers               = array('Program','Network','Start Time(EST)','Total Airings','Total Spend($)','National Airings','National %','National Spend($)','DPI Airings','DPI %','DPI Spend($)');
        $column_index_array = ['D','E','F','H','K'];
        $last_column = 'K';
        
    } else {
        $program_headers               = array('Program','Network','Start Time(EST)','Total Airings','Total Spend($)');
        $column_index_array = ['D','E'];
        $last_column = 'E';
    }
     $objPHPExcel->createSheet();
     $objPHPExcel->setActiveSheetIndex($x);
     $objRichText = new PHPExcel_RichText(); // \n"."
     $objRichText->createText("Ranking Report for Programs \n");
     $objBold = $objRichText->createTextRun($filter_detail);
     $objBold->getFont()->setBold(true);
     $phpColor = new PHPExcel_Style_Color();
     $phpColor->setRGB('0000FF');
     $objDrawing1 = new PHPExcel_Worksheet_Drawing();
     $objDrawing1->setName('Logo');
     $objDrawing1->setDescription('Logo');
     $objDrawing1->setPath($logo);  //setOffsetY has no effect
     $objDrawing1->setCoordinates('A1');
     $objDrawing1->setHeight($imageHeight);
     $objDrawing1->setWidth($imageWidth);
     $objDrawing1->setOffsetX(6);
     $objDrawing1->setOffsetY(20);
     $objPHPExcel->setActiveSheetIndex($x)->setTitle("Program By spend");
     $objDrawing1->setWorksheet($objPHPExcel->setActiveSheetIndex($x));
     $objPHPExcel->setActiveSheetIndex($x)->getCell('B1')->setValue($objRichText);
     $objPHPExcel->setActiveSheetIndex($x)->getStyle('B1')->getAlignment()->setWrapText(true);
     $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('1')->setRowHeight(100);
     $objPHPExcel->setActiveSheetIndex($x)->mergeCells('B1:'.$last_column.'1');
     $objPHPExcel->setActiveSheetIndex($x)->getStyle("B1:".$last_column."1")->applyFromArray($styleHeader);
     $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('2')->setRowHeight(24);
     $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension("A")->setWidth(30);
 
     $char = 'A';
     $header_program_array = array();
   
     foreach($program_headers as $header_key => $header_value) {
         $header_program_array[$char.'2'] = $header_value;
         $char++;
     }
     $char = 'A';

     if($classification <= 5) {
        foreach($programsResult as $key => $val){
            $start_time = date("h:i A", strtotime($val->start_date.' '.$val->start_hour.':'.$val->start_half_hour.':00'));
                $program_excel_array[$key]['program_name']      = $val->program;
                $program_excel_array[$key]['network_alias']     = $val->network_alias;
                $program_excel_array[$key]['start_time']        = $start_time;
                $program_excel_array[$key]['total_airings']     = $val->airings;
                $program_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
                $program_excel_array[$key]['national_airings']  = $val->national_airings;
                $program_excel_array[$key]['national_percent']  = custom_round($val->nationalP);
                $program_excel_array[$key]['national_spend']    = custom_round($val->nat_spend);
                $program_excel_array[$key]['local_airings']     = $val->local_airings;
                $program_excel_array[$key]['local_spend']       = custom_round($val->localP);
                $program_excel_array[$key]['local_percent']     = custom_round($val->loc_spend);
        }
    } else {
        foreach($programsResult as $key => $val){
            $start_time = date("h:i A", strtotime($val->start_date.' '.$val->start_hour.':'.$val->start_half_hour.':00'));
                $program_excel_array[$key]['program_name']      = $val->program;
                $program_excel_array[$key]['network_alias']     = $val->network_alias;
                $program_excel_array[$key]['start_time']        = $start_time;
                $program_excel_array[$key]['total_airings']     = $val->airings;
                $program_excel_array[$key]['total_spend']       = custom_round($val->total_spend);
        }
    }
    setColumnNumberFormat($objPHPExcel, $column_index_array);
    
     foreach($header_program_array as $h_key => $h_val){
         $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($h_key,$h_val);
     }
     $objPHPExcel->setActiveSheetIndex($x)->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);
 
     foreach(range('B',$last_column) as $columnID) {
         $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension($columnID)->setAutoSize(true);
     }
 
     $row = 2;
      foreach($program_excel_array as $key => $val){
        $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension("A")->setWidth(50);
          $char = 'A';
          $row++;
          foreach($val as $array_key => $array_value){
              $objPHPExcel->setActiveSheetIndex($x)->getStyle($char.$row.":".$char.$row)->applyFromArray($styleArray, False);
              $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($char.$row,$array_value);
              $char++;
              $progress = ($rowNum /  $requestData['no_of_rows']) * 100;
              $rowNum++;
              if($progress < 99 ){
                   $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
                   $stmt = $db_obj->prepare($sql);
                   $stmt->execute();
              }
          }
      }

    }
    $objPHPExcel->setActiveSheetIndex(0);
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    $objWriter->save($newFilePath);
    $filesize = calculateFileSize(stripslashes($requestData['file_path']));
    $sql = "UPDATE excel_exports set status = 'completed', no_of_records = '".$requestData['no_of_rows']."', filesize  = '".$filesize."', progress='100' WHERE id ='". $last_insert_export_id."'";
    $stmt = $db_obj->prepare($sql);
    $stmt->execute();
    echo json_encode(array('status'=>1, 'done'=>'done'));
}

function networkListExportFromGridWrapper(){
    $url    = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST']. '/drmetrix/api/index.php/network_list_export_from_grid' ;
    $ch     = curl_init($url);
    $_REQUEST['user_id'] = $_SESSION['user_id'];
    $_REQUEST['username'] = $_SESSION['username'];
    $array  = array_merge(array("REQUEST" => $_REQUEST));
    curl_setopt($ch, CURLOPT_TIMEOUT, 5); //timeout in seconds
 
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS,  http_build_query($array));

    curl_exec($ch);
    curl_close($ch);
}

function networkListExportFromGrid(){
    $_REQUEST = $_POST['REQUEST'];
    $header_title = 'DRM Network And Creative List Of Brand - '.$_REQUEST['brand_name'].' with Creatives ';
    $_filter_detail_text = " | Brand - ".htmlspecialchars_decode($_REQUEST['brand_name']);
    $val                    = $_REQUEST['val'];
    $sd                     = $_REQUEST['sd'];
    $ed                     = $_REQUEST['ed'];
    $tab                    = $_REQUEST['type'];
    $c                      = urldecode($_REQUEST['c']);
    $network_code           = isset($_REQUEST['network_code']) ? $_REQUEST['network_code'] : '';
    $requestData            = $_REQUEST;
    $date_range             = urldecode($_REQUEST['date_range_str']);   
   // $title = $header_title.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His') ;
    $file_name = cleanFileName($_REQUEST['filename']);
 //   $find       = array("{", "%7B", "}", "%7D", "'");
    $file_name = urlDecode($file_name);
   // $file_name = str_replace($find, "", $file_name);
  
   //  $requestData['file_path']   = NULL;
    $title                  = $file_name;
    //Infromation insert into DB
    $user_id                            = $_REQUEST['user_id'];
    $dir_name                           = createDir($user_id);    
    $requestData['user_id']             = $user_id;
    $requestData['user_id']             = $user_id;
    $requestData['network_id']           = isset($_REQUEST['network_id']) ? $_REQUEST['network_id'] : '';
    $network_selection_check  = $_REQUEST['network_selection_check'];;
    //$title                              = str_replace(array('/', '*',':'), '-', $title);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 0;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "inprogress";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat_id']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = "network_list";
    $requestData['no_of_rows']          = 0;
    $db_obj = addExcelExportInfo($requestData);
    $last_insert_export_id = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);

    //--------------------

    $result = brandNetworks(1, $_REQUEST);
   
    $requestData['no_of_rows']  = $networks_rows_count = count($result); 

    $styleHeader = styleHeaderExcel();
    $styleSubHeader = styleSubHeaderExcel();
    $styleArray = styleExcel();
    $styleRowsCat = styleRowsCatExcel();
    $styleRows = styleRowsExcel();
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  

    $totalSpendHeader = 'Total Spend';
    $totalAiringsHeader = 'Total Airings';
    $customSpend   = '';
    $programsIds = 0;
    if(isset($requestData['programs_ids']) && $requestData['programs_ids'] != '') {
         $programsIds = 1;
    }
    if($network_selection_check == 1 || $requestData['day'] != 'all_day' || $requestData['daypart'] != 'all_dayparts' || $requestData['hour'] != 'all_hour' || $programsIds == 1) {
            $totalSpendHeader = 'Custom Spend';
            $customSpend      = 'Custom';
            $totalAiringsHeader = 'Custom Airings';
    }
    // if($c > 5){
    //     $header_array_creative = array('B'.$i=>'Creatives','C'.$i=>'Total Airings','D'.$i=>'Spend By Creative ($)','E'.$i=>'Classification','F'.$i=>'First Aired','G'.$i=>'Last Aired','H'.$i => 'Play');
    // }else{
    //     $header_array_creative = array('A'.$i=>'Duration','B'.$i=>'Creatives','C'.$i=>'Classification','D'.$i=>'Total Airings','E'.$i=>'Spend By Creative ($)','F'.$i=>'National Airings','G'.$i=>'National %','H'.$i=>'Creative Spend (National $)','I'.$i=>'Local Airings','J'.$i=>'Local %','K'.$i=>'Creative Spend (Local $)','L'.$i=>'First Aired','M'.$i=>'Last Aired','N'.$i=>'Play');
    // }    

    $char = 'A';
    $header_array = [];
    $header_array_creative = $header_array_programs = [];
    
    if($c > 5){
        $char_start = $char_program_start = 'A';
        $column_brand = 'F';
        $column_creative = 'J';
        $headers = array('Networks','DPi','Creatives','Program',$totalAiringsHeader,$totalSpendHeader.' ($)');
        $header_creative = array('Creatives','Program',$totalAiringsHeader,$customSpend.'Spend By Creative ($)','Classification','First Aired','Last Aired','Play');
        $header_programs = array('Station Name','Program',$totalAiringsHeader,$totalSpendHeader.' ($)');
    }else{
        $char_start = $char_program_start = 'A';
        $column_brand = 'M';
        $column_creative = 'P';
        $last_column = 'M';
        $headers = array('Networks','DPi','Creatives','Program',$totalAiringsHeader, $totalSpendHeader.' ($)','National Airings','National %','National Spend ($)','DPI Airings','DPI %','DPI Spend ($)','ASD');
        $header_creative = array('Duration','Creatives','Classification','Program',$totalAiringsHeader,$customSpend.'Spend By Creative ($)','National Airings','National %','Creative Spend (National $)','DPI Airings','DPI %','Creative Spend (DPI $)','First Aired','Last Aired','Play');
        $header_programs = array('Networks','Program',$totalAiringsHeader,$totalSpendHeader.' ($)','National Airings','National %', 'National Spend($)','DPI Airings','DPI %','DPI Spend($)');
    } 

    foreach($headers as $header_key => $header_value) {
        $header_array[$char.'2'] = $header_value;
        $char++;
    }

    foreach($header_creative as $header_key => $header_value) {
        $header_array_creative[$char_start.'2'] = $header_value;
        $char_start++;
    }

    foreach($header_programs as $header_key => $header_value) {
        $header_array_programs[$char_program_start.'2'] = $header_value;
        $char_program_start++;
    }
    
    $b = 0;$net_data = 1;
    $alignColRank = 'A';
    $report_title = 'Networks';
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Airings Counts by Network \n");
    $filter_detail = "Date Range - ".$date_range.$_filter_detail_text;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex($b)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex($b)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex($b)->mergeCells('B1:'.$column_brand.'1');
    $objPHPExcel->setActiveSheetIndex($b)->getStyle("B1:".$column_brand."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getActiveSheet()->getStyle("A2:".$column_brand."2")->applyFromArray($styleSubHeader);    
    $objPHPExcel->getProperties()->setTitle($title)->setDescription("Networks");    
    $activeSheet = $objPHPExcel->getActiveSheet();   
    foreach($header_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B',$column_brand) as $columnID) {
        $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension($columnID)->setAutoSize(true);
    }
    $i = 3;    

    if($c > 5) {
        $column_index_array = ['F','E'];
    }
    else {
        $column_index_array = ['F','E','G','I','J','L'];
    }
    setColumnNumberFormat($objPHPExcel , $column_index_array) ;

    foreach ($result as $key => $val) {
        $objPHPExcel->setActiveSheetIndex($b)->getStyle("A".($i).":".$column_brand.($i))->applyFromArray($styleArray, False);
        if($c > 5){
            $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['creatives'],'D'.$i=>$val['program'],'E'.$i=>$val['airings'],'F'.$i=> $val['total_spend']);
            $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("D")->setWidth(25);
            $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("E")->setWidth(25);  
        }else{           
            $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['creatives'],'D'.$i=>$val['program'],'E'.$i=>$val['airings'],'F'.$i=>$val['total_spend'],'G'.$i=>$val['national_count'],'H'.$i=>$val['national'],'I'.$i=>$val['nat_spend'],'J'.$i=>$val['local_count'],'K'.$i=>$val['local'],'L'.$i=>$val['local_spend'],'M'.$i=>$val['duration']);
        }
        
        foreach($resp_array as $k => $v){                    
            $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($k, $v);
            $objPHPExcel->setActiveSheetIndex($b)->getRowDimension($i)->setRowHeight(15);           
            if($k[0] == 'M' || $k[0] == 'B'){
                $objPHPExcel->setActiveSheetIndex($b)->getStyle($k)->getAlignment()->applyFromArray(
                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
                );
            }
            // if($k[0] == 'E' || $k[0] == 'F' || $k[0] == 'G' || $k[0] == 'H' || $k[0] == 'I'  || $k[0] == 'J'  || $k[0] == 'K' || $k[0] == 'L'  ) {
            //     $objPHPExcel->setActiveSheetIndex($b)->getStyle($k)->getAlignment()->applyFromArray(
            //         array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)
            //     );
            // }
        }
        $i++; 
    }    
    // Rename worksheet
    $objPHPExcel->setActiveSheetIndex($b)->setTitle($report_title);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex($b));
  
    $x = 1;      
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($x);

    $requestData            = $_REQUEST;
    
  //  For Creatives  
    $alignColRank = 'A';
    $report_title = 'Creatives';
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Creatives And Airings Counts by Network \n");
    $filter_detail = "Date Range - ".$date_range.$_filter_detail_text;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);

    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $objDrawing1 = new PHPExcel_Worksheet_Drawing();
    $objDrawing1->setName('Logo');
    $objDrawing1->setDescription('Logo');     
    $objDrawing1->setPath($logo);  //setOffsetY has no effect
    $objDrawing1->setCoordinates('A1');    
    $objDrawing1->setHeight($imageHeight);
    $objDrawing1->setWidth($imageWidth);
    $objDrawing1->setOffsetX(6);
    $objDrawing1->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex($x)->setTitle("Creatives");
    $objDrawing1->setWorksheet($objPHPExcel->setActiveSheetIndex(1));
    $objPHPExcel->setActiveSheetIndex($x)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex($x)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex($x)->mergeCells('B1:'.$column_creative.'1');
    $objPHPExcel->setActiveSheetIndex($x)->getStyle("B1:".$column_creative."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex($x)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension("A")->setWidth(30);
    
    $i = 2; $net_data = 1;

    if($c > 5) {
        $column_index_array = ['F','E'];
    }
    else {
        $column_index_array = ['F','E','G','L','I','K'];
    }
    setColumnNumberFormat($objPHPExcel , $column_index_array) ;

    foreach ($result as $key => $val) {
        $char = 'A';
        foreach($headers as $header_key => $header_value) {
            $header_array[$char.$i] = $header_value;
            $char++;
        }

        $objPHPExcel->setActiveSheetIndex($x)->getStyle("A".$i.":".$column_brand.$i)->applyFromArray($styleSubHeader);
        foreach($header_array as $h_key => $h_val){
            $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($h_key,$h_val);
        }

        foreach(range('B',$column_brand) as $columnID) {
            $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension($columnID)->setAutoSize(true);
        }
        $objPHPExcel->setActiveSheetIndex($x)->mergeCells($column_brand.$i.':'.$column_creative.$i);
        $i++;
         $objPHPExcel->setActiveSheetIndex($x)->getStyle("A".($i).":".$column_creative.($i))->applyFromArray($styleArray, False);

        if($c > 5){
            $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['creatives'],'D'.$i=>$val['program'],'E'.$i=>$val['airings'],'F'.$i=> $val['total_spend']);
        }else{           
            $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['creatives'],'D'.$i=>$val['program'],'E'.$i=>$val['airings'],'F'.$i=>$val['total_spend'],'G'.$i=>$val['national_count'],'H'.$i=>$val['national'],'I'.$i=>$val['nat_spend'],'J'.$i=>$val['local_count'],'K'.$i=>$val['local'],'L'.$i=>$val['local_spend'],'M'.$i=>$val['duration']);
        }
      
        foreach($resp_array as $k => $v){                    
            $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($k, $v);
            if($k[0] == 'B'){
                $objPHPExcel->setActiveSheetIndex($x)->getStyle($k)->getAlignment()->applyFromArray(
                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
                );
            }
            $objPHPExcel->setActiveSheetIndex($x)->getRowDimension($i)->setRowHeight(15);
            $objPHPExcel->setActiveSheetIndex($x)->getStyle($k)->applyFromArray($styleRows);
        }
        $objPHPExcel->setActiveSheetIndex($x)->mergeCells($column_brand.$i.':'.$column_creative.$i);
        // $progress = ($net_data / $requestData['no_of_rows']) * 100;

    //     $net_data ++;
    //    if($progress < 97){
    //        $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
    //        $stmt = $db_obj->prepare($sql);
    //        $stmt->execute();
    //    }
       $i++;

        if($c > 5){
            $header_array_creative = array('B'.$i=>'Creatives','C'.$i=>'Language','D'.$i=>'Program','E'.$i=>$totalAiringsHeader,'F'.$i=>$customSpend.' Spend By Creative ($)','G'.$i=>'Classification','H'.$i=>'First Aired','I'.$i=>'Last Aired','J'.$i => 'Play');
          
        }else{
            $header_array_creative = array('A'.$i=>'Duration','B'.$i=>'Creatives','C'.$i => 'Language','D'.$i=>'Classification','E'.$i=>'Program', 'F'.$i=>$totalAiringsHeader,'G'.$i=>$customSpend.' Spend By Creative ($)','H'.$i=>'National Airings','I'.$i=>'National %','J'.$i=>'Creative Spend (National $)','K'.$i=>'DPI Airings','L'.$i=>'DPI %','M'.$i=>'Creative Spend (DPI $)','N'.$i=>'First Aired','O'.$i=>'Last Aired','P'.$i=>'Play');
        }    
      
        $_REQUEST['brand_id'] = $val['brand_id'];
        $_REQUEST['network_id'] = $val['network_id'];
        $creativesNetworksByNetworkId = creativesNetworks(1, $_REQUEST);
        $objPHPExcel->setActiveSheetIndex($x)->getStyle("A".$i.":".$column_creative.$i)->applyFromArray($styleRowsCat);
        foreach($header_array_creative as $c_key => $c_val){
            $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($c_key,$c_val);
        }
        foreach(range('B',$column_creative) as $columnIDC) {
            $objPHPExcel->setActiveSheetIndex($x)->getColumnDimension($columnIDC)->setAutoSize(true);
        }            
        $i++;
        $column_index_array = ['G','E','F','I','J','L'];
        if($c > 5) {
            $column_index_array = ['E','D'];
        }
        setColumnNumberFormat($objPHPExcel , $column_index_array) ;
        foreach ($creativesNetworksByNetworkId as $keycd => $valcd) {
            $objPHPExcel->setActiveSheetIndex($x)->getStyle("A".($i).":".$column_creative.($i))->applyFromArray($styleArray, False);
            if($c > 5){
                 $resp_arr = array('B'.$i=>$valcd['creative_name'],'C'.$i=>$valcd['language'],'D'.$i=>$valcd['program'],'E'.$i=>$valcd['airings'],'F'.$i=>$valcd['total_spend'],'G'.$i=>$valcd['classification'],'H'.$i=>dateFormateForGridDate($valcd['first_aired']),'I'.$i=>dateFormateForGridDate($valcd['last_aired']),'J'.$i=>'Play');
            }else{           
                $resp_arr = array('A'.$i=>$valcd['duration'],'B'.$i=>$valcd['creative_name'],'C'.$i=>$valcd['language'],'D'.$i=>$valcd['classification'],'E'.$i=>$valcd['program'],'F'.$i=>$valcd['airings'],'G'.$i=>$valcd['total_spend'],'H'.$i=>$valcd['national_count'],'I'.$i=>$valcd['national'],'J'.$i=>$valcd['national_spend'],'K'.$i=>$valcd['local_count'],'L'.$i=>$valcd['local'],'M'.$i=>$valcd['local_spend'],'N'.$i=>dateFormateForGridDate($valcd['first_aired']),'O'.$i=>dateFormateForGridDate($valcd['last_aired']),'P'.$i=>'Play');
            }
            foreach($resp_arr as $kcd => $vcd){    
                if($vcd == 'Play'){
                    $url = $url = HOST.'/drmetrix/video/'.$valcd['video'].'?video=1';
                    $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($kcd, 'Play');
                    $objPHPExcel->setActiveSheetIndex($x)->getStyle($kcd)->getFont()->setColor( $phpColor );
                    $objPHPExcel->setActiveSheetIndex($x)->getCell($kcd)->getHyperlink('Play')->setUrl('http://'.$url);
                }else{            
                    $objPHPExcel->setActiveSheetIndex($x)->SetCellValue($kcd, $vcd);
                }
                $objPHPExcel->setActiveSheetIndex($x)->getRowDimension($i)->setRowHeight(15);
                if($kcd[0] == 'A' || $kcd[0] == 'D' || $kcd[0] == 'E' || $kcd[0] == 'F' || $kcd[0] == 'G' || $kcd[0] == 'H' || $kcd[0] == 'I'  || $kcd[0] == 'J' || $kcd[0] == 'K'  || $kcd[0] == 'L' || $kcd[0] == 'M'){
                    $objPHPExcel->setActiveSheetIndex($x)->getStyle($kcd)->getAlignment()->applyFromArray(
                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
                    );
                }
            }
         $i++;
        }
        //----End
        $i++;
    }    
    $objPHPExcel->setActiveSheetIndex(1)->setTitle($report_title);
    $column_program = ($c > 5) ? 'D' : 'J';
    $p = 2;
    $objPHPExcel->createSheet();
    $objPHPExcel->setActiveSheetIndex($p);
     //  For Program  
     $alignColRank = 'A';
     $report_title = 'Programs';
     $objRichText = new PHPExcel_RichText(); // \n"."
     $objRichText->createText("Programs by Network \n");
     $filter_detail = "Date Range - ".$date_range.$_filter_detail_text;
     $objBold = $objRichText->createTextRun($filter_detail);
     $objBold->getFont()->setBold(true);
 
     $phpColor = new PHPExcel_Style_Color();
     $phpColor->setRGB('0000FF');
     $objDrawing1 = new PHPExcel_Worksheet_Drawing();
     $objDrawing1->setName('Logo');
     $objDrawing1->setDescription('Logo');     
     $objDrawing1->setPath($logo);  //setOffsetY has no effect
     $objDrawing1->setCoordinates('A1');    
     $objDrawing1->setHeight($imageHeight);
     $objDrawing1->setWidth($imageWidth);
     $objDrawing1->setOffsetX(6);
     $objDrawing1->setOffsetY(20);
     $objPHPExcel->setActiveSheetIndex($p)->setTitle("Programs");
     $objDrawing1->setWorksheet($objPHPExcel->setActiveSheetIndex(2));
     $objPHPExcel->setActiveSheetIndex($p)->getCell('B1')->setValue($objRichText);    
     $objPHPExcel->setActiveSheetIndex($p)->getStyle('B1')->getAlignment()->setWrapText(true);    
     $objPHPExcel->setActiveSheetIndex($p)->getRowDimension('1')->setRowHeight(100);
     $objPHPExcel->setActiveSheetIndex($p)->mergeCells('B1:'.$column_program.'1');
     $objPHPExcel->setActiveSheetIndex($p)->getStyle("B1:".$column_program."1")->applyFromArray($styleHeader);
     $objPHPExcel->setActiveSheetIndex($p)->getRowDimension('2')->setRowHeight(24);
     $objPHPExcel->setActiveSheetIndex($p)->getColumnDimension("A")->setWidth(30);
     

     $c_dir                  = urldecode($requestData['c']);
     $spanish                = urldecode($requestData['spanish']);
     $creative_durations     = urldecode($requestData['creative_duration']);
     $brand_classification   = getBrandClassification($c_dir, $creative_durations);
     $_resp_type             = urldecode($requestData['responseType']);
     $categories             = '';
    //  $hours_string           = isset($requestData['hour']) ? $requestData['hour']   : '';
    //  $dayparts_string        = isset($requestData['daypart']) ? $requestData['daypart'] :  '';
    //  $day_string             = isset($requestData['day']) ? $requestData['day'] : '';

    $hours                  = isset($requestData['hour']) ? $requestData['hour']   : '';
    $dayparts               = isset($requestData['dayparts']) ? $requestData['dayparts'] :  '';
    $days                   = isset($requestData['day']) ? $requestData['day'] : '';
    $day_string             = is_array($days) ? implode_call($days)     : $days;
    $hours_string           = is_array($hours) ? implode_call($hours)    : $hours;
    $dayparts_string        = is_array($dayparts) ? implode_call($dayparts)    : $dayparts;

     $network_id             =  isset($requestData['network_id']) ? $requestData['network_id'] : '';
     $program_ids            = isset($requestData['programs_ids']) ? urldecode($requestData['programs_ids']) : '';
 
     $params['network_id']   = $network_id;
     $params['sd']           = $params['from_date_condition'] = $requestData['sd'];
     $params['ed']           = $params['to_date_condition']   = $requestData['ed'];
     $params['spanish']      = $spanish;
     if($requestData['tab'] == 'brand') {
        $params['excel_for_id']  = !empty($requestData['brand_id']) ? $requestData['brand_id'] : '';
     } else {
        $params['excel_for_id']  = !empty($requestData['creative_id']) ? $requestData['creative_id'] : '';
     }
     $params['brand_classification'] =  $brand_classification['brand_classification'];
     $params['responseType'] = '('.$_resp_type.')';
     $params['categories']   = $categories;
     $params['hours']        = $hours_string;
     $params['dayparts']     = $dayparts_string;
     $params['days']         = $day_string;
     $params['area']         = $requestData['tab'];
     $params['inc_cmw']      = 0;
     $params['program_ids']  = $program_ids;
     $params['spendAirings'] = $requestData['sidx'] == 'airings' || $requestData['sidx'] == 'hidden_airings' ? 'total_airings' : 'total_spend';
     $result = get_query_result('__query_get_programs_view_for_network', $params, 'FETCH_ASSOC');
     $totalData = count($result);
     $count = $totalData;
    //  $result = getProgramViewByNetwork(1, $_REQUEST);
    $total_rows = $networks_rows_count + count($result); 
    $requestData['no_of_rows']  = $total_rows;
     $i = 3; $net_data = 1;
 
     if($c > 5) {
         $column_index_array = ['D','E'];
     }
     else {
        $column_index_array = ['C','D','E','G','H','J'];
     }
     setColumnNumberFormat($objPHPExcel , $column_index_array) ;
     $objPHPExcel->setActiveSheetIndex($p)->getStyle("A2:".$column_program.'2')->applyFromArray($styleSubHeader);
     foreach($header_array_programs as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex($p)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B',$column_program) as $columnID) {
        $objPHPExcel->setActiveSheetIndex($p)->getColumnDimension($columnID)->setAutoSize(true);
    }
     foreach ($result as $key => $val) {
        $char = 'A';
         if($c > 5){
              $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['program'],'C'.$i=>$val['total_airings'],'D'.$i=>$val['total_spend']);
         }else{           
             $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['program'],'C'.$i=>$val['total_airings'],'D'.$i=>$val['total_spend'],'E'.$i=>$val['national_airings'],'F'.$i=>$val['nationalP'],'G'.$i=>$val['nat_spend'],'H'.$i=>$val['local_airings'],'I'.$i=>$val['localP'],'J'.$i=>$val['loc_spend']);
         }
         foreach($resp_array as $k => $v) {
             $objPHPExcel->setActiveSheetIndex($p)->SetCellValue($k, $v);
             $objPHPExcel->setActiveSheetIndex($p)->getRowDimension($i)->setRowHeight(15);
             $objPHPExcel->setActiveSheetIndex($p)->getStyle($k)->applyFromArray($styleArray);
         }

          $progress = ($net_data / $total_rows) * 100;
       
          $net_data ++;
         if($progress < 97){
             $sql = "UPDATE excel_exports set progress='".$progress."' WHERE id ='". $last_insert_export_id."'";
             $stmt = $db_obj->prepare($sql);
             $stmt->execute();
         }
         $i++;
    
        }
    // Rename worksheet
    $objPHPExcel->setActiveSheetIndex(2)->setTitle($report_title);
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex(0); 
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    $objWriter->save($newFilePath);
    $filesize = calculateFileSize(stripslashes(addslashes($newFilePath)));
    $sql = "UPDATE excel_exports set status = 'completed', no_of_records = '".$total_rows."', filesize  = '".$filesize."', progress='100' WHERE id ='". $last_insert_export_id."'";
    $stmt = $db_obj->prepare($sql);
    $stmt->execute();
    echo json_encode(array('status'=>1, 'done'=>'done'));
}


function creativeNetworkListExportFromGrid(){    
    $_REQUEST['brand_id']   = $_REQUEST['creative_brand_id'];
    $tab                    = $_REQUEST['type'];
    $header_title           = 'DRM Network List Of Creative - '.htmlspecialchars($_REQUEST['creative_name']).' ';
    $_filter_detail_text    = " | Creative - ".$_REQUEST['creative_name'];
    $sd                     = $_REQUEST['sd'];
    $ed                     = $_REQUEST['ed'];    
    $c                      = urldecode($_REQUEST['c']);
    $date_range             = urldecode($_REQUEST['date_range_str']);
    $requestData            = $_REQUEST;   
    $title = $header_title.date_format(date_create($sd), 'm-d-y').' till '.date_format(date_create($ed), 'm-d-y').'_time_'.date('m-d-y_His') ;    
    $result = brandNetworks(1, $_REQUEST);
    $requestData['no_of_rows']  = count($result); 

    $styleHeader    = styleHeaderExcel();
 
    $styleSubHeader = styleSubHeaderExcel() ;
    $styleArray     =  styleExcel();
    $styleRowsCat   = styleRowsCatExcel();
   
    $styleRows      = styleRowsExcel();
    
    // Create new PHPExcel object
    $logo = IMAGE ;
    if(isset($logo)){
        $ImageDimension = getimagesize($logo);
        $imageWidth = $ImageDimension[0];
        $imageHeight = $ImageDimension[1];
    }  

    if($c > 5){
        $last_column = 'G';
        $header_array = array('A2'=>'Networks','B2'=>'DPi','C2'=>'Airings','D2'=>'Spend ($)','E2'=>'First Aired', 'F2'=>'Last Aired', 'G2'=>'Play');
    }else{
        $last_column = 'M';
        $header_array = array('A2'=>'Networks','B2'=>'DPi','C2'=>'Total Airings','D2'=>'Total Spend ($)','E2' => 'National Airings','F2'=>'National %','G2' => 'National Spend ($)','H2'=>'DPI Airings','I2'=>'DPI %','J2' => 'DPI Spend ($)','K2'=>'First Aired', 'L2'=>'Last Aired', 'M2'=>'Play');
    }    
    $b = 0;
    $alignColRank = 'A';
    $report_title = 'Networks';
    $objRichText = new PHPExcel_RichText(); // \n"."
    $objRichText->createText("Airings Counts by Network \n");
    $filter_detail = "Date Range - ".$date_range.$_filter_detail_text;
    $objBold = $objRichText->createTextRun($filter_detail);
    $objBold->getFont()->setBold(true);
    $objPHPExcel = new PHPExcel();
    $phpColor = new PHPExcel_Style_Color();
    $phpColor->setRGB('0000FF');
    $objDrawing = new PHPExcel_Worksheet_Drawing();
    $objDrawing->setName('Logo');
    $objDrawing->setDescription('Logo');     
    $objDrawing->setPath($logo);  //setOffsetY has no effect
    $objDrawing->setCoordinates('A1');    
    $objDrawing->setHeight($imageHeight);
    $objDrawing->setWidth($imageWidth);
    $objDrawing->setOffsetX(6);
    $objDrawing->setOffsetY(20);
    $objPHPExcel->setActiveSheetIndex($b)->getCell('B1')->setValue($objRichText);    
    $objPHPExcel->setActiveSheetIndex($b)->getStyle('B1')->getAlignment()->setWrapText(true);    
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('1')->setRowHeight(100);
    $objPHPExcel->setActiveSheetIndex($b)->mergeCells('B1:'.$last_column.'1');
    $objPHPExcel->setActiveSheetIndex($b)->getStyle("B1:".$last_column."1")->applyFromArray($styleHeader);
    $objPHPExcel->setActiveSheetIndex($b)->getRowDimension('2')->setRowHeight(24);
    $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("A")->setWidth(25);
    $objPHPExcel->getActiveSheet()->getStyle("A2:".$last_column."2")->applyFromArray($styleSubHeader);    
    $objPHPExcel->getProperties()->setTitle($title)->setDescription("Networks");    
    $activeSheet = $objPHPExcel->getActiveSheet();   
    foreach($header_array as $h_key => $h_val){
        $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($h_key,$h_val);
    }
    foreach(range('B',$last_column) as $columnID) {
        $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension($columnID)->setAutoSize(true);
    }
    $i = 3;  
    
    $column_index_array = ['C','D','G','J'];
    setColumnNumberFormat($objPHPExcel , $column_index_array);
    foreach ($result as $key => $val) {
        $objPHPExcel->setActiveSheetIndex($b)->getStyle("A".($i).":".$last_column.($i))->applyFromArray($styleArray, False);
        if($c > 5){
             $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['airings'],'D'.$i=>$val['total_spend'],'E'.$i=>$val['first_aired'],'F'.$i=>$val['last_aired'],'G'.$i=>'Play');
             $objPHPExcel->setActiveSheetIndex($b)->getColumnDimension("C")->setWidth(25);
        }else{           
            $resp_array = array('A'.$i=>$val['network_alias'],'B'.$i=>$val['dpi'],'C'.$i=>$val['airings'],'D'.$i=>$val['total_spend'],'E'.$i=>$val['national_count'],'F'.$i=>$val['national'],'G'.$i=>$val['nat_spend'],'H'.$i=>$val['local_count'],'I'.$i=>$val['local'],'J'.$i=>$val['local_spend'],'K'.$i=>dateFormateForGridDate($val['first_aired']),'L'.$i=>dateFormateForGridDate($val['last_aired']),'M'.$i=>'Play');
        }

        foreach($resp_array as $k => $v){ 
            if($v == 'Play' && $k == $last_column.$i){
                $url = $url = HOST.'/drmetrix/video/'.$val['video'].'?video=1';
                $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($k, 'Play');
                $objPHPExcel->setActiveSheetIndex($b)->getStyle($k)->getFont()->setColor( $phpColor );
                $objPHPExcel->setActiveSheetIndex($b)->getCell($k)->getHyperlink('Play')->setUrl('http://'.$url);
            }else{            
                $objPHPExcel->setActiveSheetIndex($b)->SetCellValue($k, $v);
            }           
            $objPHPExcel->setActiveSheetIndex($b)->getRowDimension($i)->setRowHeight(15); 
            if($k[0] != 'A'){
                $objPHPExcel->setActiveSheetIndex($b)->getStyle($k)->getAlignment()->applyFromArray(
                    array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
                );
            }
        }
        $i++;        
    }    
    // Rename worksheet
    $objPHPExcel->setActiveSheetIndex($b)->setTitle($report_title);
    $objDrawing->setWorksheet($objPHPExcel->setActiveSheetIndex($b)); 
    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
    $objPHPExcel->setActiveSheetIndex($b); 
    //Infromation insert into DB
    $user_id                            = $_SESSION['user_id'];
    $dir_name                           = createDir($user_id);    
    $requestData['user_id']             = $user_id;
    $requestData['username']            = $_SESSION['username'];
    $title                              = cleanFileName($title);
   // $title                              = str_replace(array('/', '*',':'), '-', $title);
    //$title                              = str_replace("'", '', $title);
    $file_name                          = $dir_name.$title;
    $newFilePath                        = $file_name.'.xlsx';
    $requestData['header_text']         = addslashes($title.'.xlsx');
    $requestData['file_path']           = addslashes($newFilePath);
    $requestData['email_alert']         = 0;
    $requestData['network_ids']         = NULL;
    $requestData['dow']                 = NULL; 
    $requestData['hod']                 = NULL;
    $requestData['query']               = NULL;
    $requestData['progress']            = 100;
    $requestData['task_initiated_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['task_completed_on']   = standardDateTimeFormat('Y-m-d H:i:s');
    $requestData['day_type']            = "NA";
    $requestData['timespan']            = "NA";
    $requestData['inc_cmw']             = "NA";
    $requestData['status']              = "completed";
    $requestData['category_ids']        =  addslashes($_REQUEST['cat_id']);
    $requestData['media_date_range']    =  addslashes($_REQUEST['date_range_str']);
    //$requestData['ask_me']            =  $_REQUEST['ask_alt'];
    $requestData['brand_id']            = 0;
    $requestData['excel_for']           = $tab == 1 ? "brand" : "advertiser";
    $requestData['type']                = "creative_network_list";
    $requestData['no_of_rows']          = $requestData['no_of_rows'];  
    $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel); 
    $objWriter->save($newFilePath);
    $db_obj                 = addExcelExportInfo($requestData);
    $last_insert_export_id  = $db_obj->lastInsertId();
    updateDownloadsCountInZoho($user_id);
    $exportedData           = fetchLastExportedData($last_insert_export_id);
    echo json_encode(array('status'=>1, 'last_insert_export_id' => $last_insert_export_id ,'obj' => $exportedData, 'done'=>'done'));

}


function getCompanyOwners() {
    $db                                 = getConnection(); 
    try {
        $obj        = get_query_result('__query_get_company_owners', array(), 'FETCH_OBJ');

        echo json_encode(array('status'=>1, 'result' => $obj )); 
    }
    catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}
/***Start -- List related functions ****/
function saveUserList(){
    $params = $isDuplicateName = $isDuplicateCriteria =  $isDuplicateList = array();
    $request  = Slim::getInstance()->request();
    $response = json_decode($request->getBody());
    $postCriteriaArray          = explode(",", $response->criteria_ids);
    sort($postCriteriaArray);
    $params['criteria']         = implode(",",$postCriteriaArray);
    $params['created_date']     = date("Y-m-d H:i:s");
    $params['list_name']        =  addslashes(trim($response->list_name));
    $params['primary_tab']      = $response->primary_tab;
    $params['user_id']          = $_SESSION['user_id'];
    $params['created_date']     = customDate('Y-m-d H:i:s');
    $list_id = isset($response->list_id) ? $response->list_id : '';
    $params['is_duplicate']     = $is_duplicate = isset($response->is_duplicate) ? $response->is_duplicate : 0;
    if($is_duplicate == 0) {
        $isDuplicateList = get_query_result('__check_duplicate_list', $params);
        if(!empty($isDuplicateList) && count($isDuplicateList) > 1) {
                $list_id    = $isDuplicateList[0]['id'];
                $list_name  = $isDuplicateList[0]['name'];
                echo json_encode(array('status'=>3, 'isDuplicate' =>'both', 'message'=>'List with same selected "'.$response->primary_tab.'"s already exists with name "'.$list_name.'" ', 'list_id'=> $list_id));
                exit;
        } else {
            $isDuplicateListName        = get_query_result('__check_duplicate_list_name', $params);
            if(empty($isDuplicateListName)) {
                $isDuplicateListCriteria    = get_query_result('__check_duplicate_criteria_list', $params);
                if(!empty($isDuplicateListCriteria)) {
                    $list_id = $isDuplicateListCriteria[0]['id'];
                    echo json_encode(array('status'=>3, 'isDuplicate' =>'criteria', 'message'=>'List with same criteria already exists', 'list_id' => $list_id));
                    exit;
                }
            } else {
                $list_id = $isDuplicateListName[0]['id'];
                echo json_encode(array('status'=>3, 'isDuplicate' =>'name', 'message'=>'List with same name already exists', 'list_id' => $list_id));
                exit;
            }
        }
    }
    $params['list_id'] = $list_id;
    if(empty($list_id)) {
        $db = execute_query('__qurey_insert_user_list', $params);
        $params['type_id'] = $db->lastInsertId();
        echo json_encode(array('status'=>1));
      
    } else {
        $status  = execute_query('__qurey_update_user_list', $params, 'FETCH_OBJ');
        echo json_encode(array('status'=>2));

    }
}

function getAllListData() {
    $db                                 = getConnection(); 
    
    $request                                = Slim::getInstance()->request();
    $query_string                           = json_decode($request->getBody());
   
    $params['primary_tab'] = $query_string->primary_tab;
    try {
        $sql    = __query_get_all_list_data($params); 
        $stmt   = $db->prepare($sql);
        $stmt->execute();
        $obj    = $stmt->fetchAll(PDO::FETCH_OBJ);
        $return_arr = array();
        foreach($obj as $key => $value){
            $return_arr[$key]['name'] = $value->name;
            $return_arr[$key]['rowid'] = $value->id;
        }
        echo json_encode(array('status'=>1, 'return_arr' => $return_arr )); 
    }
    catch(PDOException $e) {
        echo '{"status":0,"error":{"text":'. $e->getMessage() .'}}'; 
    }
}

function getUserLists(){
    $db = getConnection();
    $requestData = array();
    $request                            = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    parse_str($query_string, $requestData);
    $requestData = (array)json_decode($query_string, TRUE);
    $sidx                               = $requestData['sidx'];
    $sord                               = $requestData['sord'];
    $page                               = $requestData['page'];
    $limit                              = $requestData['rows'];
    $requestData['user_id']             = $_SESSION['user_id'];
    $columns = array( 
        'created_date'      => 'created_date',
        'name'              => 'name',
        'primary_tab'       => 'primary_tab',
        'shared_list_date'       => 'shared_list_date',
        'full_name'        => 'full_name'
    );

    $_order_by = $columns[$sidx] ." ".$sord;
    $order_by = " ORDER BY ".$_order_by;
    $requestData['order_by'] = $order_by;

    $sql    = __query_get_user_list($requestData); 
    $stmt   = $db->prepare($sql);
    $stmt->execute();
    $obj    = $stmt->fetchAll(PDO::FETCH_ASSOC);
    $totalData  = count($obj);
    $count      = $totalData;
        
        
    //Calculate paging related values $total_pages, $page
    if ($count > 0) {
      $total_pages = ceil($count / $limit);
    } else {
      $total_pages = 0;
    }
    if ($page > $total_pages) {
      $page = $total_pages;
    }
    //Calculate offset for dataQuery
    $offset = $limit * $page - $limit;
    if ($offset < 0) {
      $offset = 0;
    }
    $data = array();
    foreach($obj as $result_key => $result){
        $checked_shared_list =  $checked_copy_list = ''; 
        
        if($result['shared_by'] == $_SESSION['user_id']){
            $checked_shared_list      =  'checked = checked';
        }

        if(($result['parent_id'] != 0)){
            $checked_copy_list        =  'checked = checked';
        }
        $disabled_shared_list =  $disabled_class = $disable_copy_list = $disabled_copy_list_class  = '';
        
        if((!empty($result['shared_by']) && $result['shared_by'] != $_SESSION['user_id'] ) ) {
            $disabled_class             = 'other-opa';
            $disabled_shared_list     = 'disabled = disabled';
        }else {
            $disabled_copy_list_class = 'other-opa';
            $disable_copy_list        = 'disabled = disabled';
        }
        $shared_list                  = '';
        $nestedData['checked_shared_list']     = $checked_shared_list;
        $nestedData['disabled_shared_list']     = $disabled_shared_list;
        $nestedData['disabled_class']     = $disabled_class;

        $copy_list                    = '';
        $nestedData['checked_copy_list']     = $checked_copy_list;
        $nestedData['disable_copy_list']     = $disable_copy_list;
        $nestedData['disabled_copy_list_class']     = $disabled_copy_list_class;
        
        $requestData['criteria_id']     = $result['criteria_id'];
        $sql                            = __query_get_name_of_criteria($requestData); 
        $obj                            = execute_query_get_result($sql, 'FETCH_COLUMN');
        $result['criteria']             = $result['criteria_id'];
        $edit_ids                       = $result['criteria_id'] ;
        $nestedData['id']               = $result['id'];
        $nestedData['name']             = urldecode($result['name']);
        $nestedData['criteria_id']     = $result['criteria_id'];
        $nestedData['criteria_name']    = $obj[0]->criteria_name;
        $nestedData['shared_list']      = $shared_list;
        $nestedData['copy_list']        = $copy_list;
        $nestedData['full_name']        = $result['full_name'];
        $nestedData['shared_by']        = $result['shared_by'] != '' ? $result['shared_by'] : ' ';
        $nestedData['created_date']     = standardDateTimeFormat('m-d-Y h:i A', strtotime($result['created_date']));
        $shared_date                    = standardDateTimeFormat('m-d-Y h:i A', strtotime($result['shared_date']));
        $nestedData['shared_list_date'] = $shared_date;
        $nestedData['edit_list']        = $edit_ids;
        $nestedData['apply']            = $requestData['primary_tab'];
        $data[] = $nestedData;
    }
    $json_data              = array();
    $json_data['rows']      = $data;
    $json_data['page']      = $page;
    $json_data['total']     = $total_pages;
    $json_data['records']   = $count; 
        
    echo json_encode($json_data); 
}

function getAllBrandsAdvertisers() {
    $db = getConnection();
    $requestData = array();
    $request                            = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    parse_str($query_string, $requestData);
    $sql    = __query_get_brands_advertisers_list($requestData); 
    $result = execute_query_get_result($sql, 'FETCH_OBJ');
    echo json_encode(array('status'=>1, 'result'=>$result));
}

function updateEditedList() {
    $db = getConnection();
    $requestData = $filter_record_id = array();
    $sql = '';
    $newQueryString = '';
    $request                            = Slim::getInstance()->request();
    $queryString   = $request->getBody();
    parse_str($queryString, $requestData);
    $postCriteriaArray          = explode(",", $requestData['selected_ids']);
    sort($postCriteriaArray);
    $params['criteria_id']      = $params['criteria'] = implode(",",$postCriteriaArray);
    $params['primary_tab']       = $requestData['applied_list_type'];
    $params['user_id']           = $_SESSION['user_id'];
    $isDuplicateListCriteria    = get_query_result('__check_duplicate_criteria_list', $params);
    if(!empty($isDuplicateListCriteria)) {
        $list_id = $isDuplicateListCriteria[0]['id'];
        echo json_encode(array('status'=>3, 'isDuplicate' =>'criteria', 'message'=>'List with same criteria already exists', 'list_id' => $list_id));
        exit;
    } else {
        $filter_record = execute_query_get_result('SELECT list_id,query_string, criteria,id FROM user_filters WHERE list_id = "'.$requestData['id'].'"', 'FETCH_OBJ');
        foreach($filter_record as $key => $val) {
            $filter_record_id       = $val->list_id;
            $params['list_id']      = $filter_record_id;
            $params['query_string'] = $query_string = $val->query_string;
            if(strpos($query_string, 'applied_ids') !== false){
                $query_string_arr       = explode('&applied_ids', $query_string);
                $query_string_arr       = explode('&', $query_string_arr[1]);
                $list_ids               = str_replace('=','',$query_string_arr[0]); 
                $primary_tab            = str_replace('primary_tab=', '',$query_string_arr[1]);
        
                $newQueryString        = str_replace($list_ids, urlencode($params['criteria_id']),  $query_string);
            }
            // $params['criteria']     = $filter_record[0]->criteria;
            $params['newQueryString'] = $newQueryString;
            // $params['criteria_id'] = urlencode($requestData['selected_ids']);
            $params['filter_id']      = $val->id;
    
            $result = execute_query('__query_update_filter', $params); 
        
        }
        if(!empty($filter_record)) {
            $filter_record_id       = $filter_record[0]->list_id;
            $params['list_id']      = $filter_record_id;
            $params['query_string'] = $query_string = $filter_record[0]->query_string;
            if(strpos($query_string, 'applied_ids') !== false){
            
                $query_string_arr       = explode('&applied_ids', $query_string);
                $query_string_arr       = explode('&', $query_string_arr[1]);
                $list_ids               = str_replace('=','',$query_string_arr[0]); 
                $primary_tab            = str_replace('primary_tab=', '',$query_string_arr[1]);
    
                $newQueryString        = str_replace($list_ids, urlencode($params['criteria_id']),  $query_string);
            }
            $params['newQueryString'] = $newQueryString;
            $params['criteria_id'] = urlencode($params['criteria_id']);
            $params['filter_id']      = $filter_record[0]->id;
    
            if(!empty($filter_record_id)) {
                $result = execute_query('__query_update_filter', $params); 
            }
        }
        
        $result = execute_query('__query_edit_brands_advertisers_list', $requestData, 'FETCH_OBJ');
        echo json_encode(array('status'=>1, 'result'=>$result));
    }
   
}

function updateShareList() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    parse_str($query_string, $requestData);
    $filter_id_array                    = array();
    $id                                 = $requestData['id'];
    $share_list_val                     = $requestData['share_list'];
    $myListRecord                       = getMyList($id);
    $params['company_id']               = $_SESSION['company_id'];
    $params['check_contact']            = '0';
    $users                              = get_query_result('__query_get_user_of_company', $params, 'FETCH_OBJ');
    if($share_list_val == 1) {
        $set_shared_by_col = 'shared_by = "'.$_SESSION['user_id'].'" , shared_date = "'.standardDateTimeFormat('Y-m-d H:i:s').'"';
    } else {
        $set_shared_by_col = 'shared_by = NULL , shared_date = NULL';
    }
    $sql = "UPDATE users_list set $set_shared_by_col where id = ".$id;
    $stmt = $db->prepare($sql);
    $stmt->execute();
  
    if($share_list_val == 1) {
        foreach($users as $key => $value) {
            if($value->user_id != $_SESSION['user_id']) {
                $insert_sql = 'INSERT INTO users_list (user_id,name,primary_tab,criteria_id,status,created_date,shared_by,shared_list_id,shared_date) VALUES ("'.$value->user_id.'","'.$myListRecord[0]->name.'","'.$myListRecord[0]->primary_tab.'","'.$myListRecord[0]->criteria_id.'","'.$myListRecord[0]->status.'","'.standardDateTimeFormat('Y-m-d H:i:s').'","'.$_SESSION['user_id'].'","'.$myListRecord[0]->id.'","'.standardDateTimeFormat('Y-m-d H:i:s').'")';
                $stmt    = $db->prepare($insert_sql);
                $stmt->execute();
            }
        }
    } else {
        foreach($users as $key => $value) {
            array_push($filter_id_array, $value->user_id);
        }
        $filter_ids = rtrim(implode(",",$filter_id_array),',');
        $delete_sql = "DELETE FROM users_list WHERE user_id IN (".$filter_ids.") AND shared_list_id = ".$myListRecord[0]->id;
        $stmt       = $db->prepare($delete_sql);
        $stmt->execute();
    }
    echo json_encode(array('status'=>1)); 
}

function deleteListRow(){
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    parse_str($query_string, $requestData);
    $params['id'] = trim(urldecode($requestData['id']),",");
    execute_query('__query_delete_user_List', $params);
   
    echo "Deleted";
}

function copyShareList() {
    $db                                 = getConnection();
    $request                            = Slim::getInstance()->request();
    $query_string                       = $request->getBody();
    $set_one                            = explode('&', $query_string);
    parse_str($query_string, $requestData);
    $excel_id_array                     = array();
    $id                                 = $requestData['id'];
    $copy_list_val                      = $requestData['copy_list'];
    $myListRecord                       = getMyList($id);
   
    if($copy_list_val == 1) {
        $insert_sql = 'INSERT INTO users_list (user_id,parent_id,name,primary_tab,criteria_id,status,created_date) VALUES ("'.$_SESSION['user_id'].'","'.$id.'","'.$myListRecord[0]->name.'","'.$myListRecord[0]->primary_tab.'","'.$myListRecord[0]->criteria_id.'","'.$myListRecord[0]->status.'","'.standardDateTimeFormat('Y-m-d H:i:s').'")';
        $stmt    = $db->prepare($insert_sql);
        $stmt->execute();
    } else {
        $delete_sql = "DELETE FROM users_list WHERE parent_id IN (".$id.")";
        $stmt    = $db->prepare($delete_sql);
        $stmt->execute();
    }
    echo json_encode(array('status'=>1));
}

function saveListData(){
    $request        = Slim::getInstance()->request();
    $query_string   = $request->getBody();
    parse_str($query_string, $output);
    
   $name           = cleanFileName($output['name']);
   $name           = urldecode($name);
   $rowid          = $output['rowid'];

   $params['name']    = $brand_class = $name;
   $params['id']      = $rowid;

     try{
        $db   = getConnection(); 
        $sql  = __query_update_for_my_list($params); 
        execute_sql($sql);

        echo json_encode(array('status'=> 1));
    } catch (Exception $ex) {
            echo '{"status":0,"error":{"text":'. $ex->getMessage() .'}}'; 
    }  
}
/***End -- List related functions ****/
closeConnection();
